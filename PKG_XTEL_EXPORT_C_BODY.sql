create or replace PACKAGE BODY "PKG_XTEL_EXPORT_C" AS

  --- CONSTANTS
  --
  C_DAYS_OF_LOG NUMBER := 30;
  --
  C_SYSUSR VARCHAR2(5) := 'SYSH';
  --C_T100_STATUS_OK VARCHAR(5):='1';
  --C_T106_STATUS_OK VARCHAR(5):='1';

  -- FORMATS
  C_SM1_FORMAT_DATE   VARCHAR2(30) := 'MM/DD/YYYY HH24:MI:SS';
  C_SM1_NULL_DATE     DATE := TO_DATE ('12/30/1899','MM/DD/YYYY');

  -- FUNCTIONS AND PROCEDURES

  /*============================================================================*\
  /* Name: P_XOUT_MOVE_TO_LOG
     Moves staging area table into Log staging area table
     Moves records already read by ERP only

     Logs into T854 if some records have ERP_STATUS not ok


     Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                            PI_PROGR_D - detail sm1 job number ( T800SYSTEMACTIVITYLOG )
                            PI_TABLE_NAME    - table name

     Logs in T800 when error

     Author : Mariangela Bandiera
     Creation Date : 21 November 2012
     ----
     Updates :


    ============================================================================ */
  PROCEDURE P_XOUT_MOVE_TO_LOG ( PI_PROGR_H IN NUMBER,
                                 PI_PROGR_D IN NUMBER,
                                 PI_TABLE_NAME    IN VARCHAR2,
                                 PO_STATUS  OUT NUMBER)

  IS

  VL_SQL VARCHAR2(4000):=NULL;
  VL_MSG VARCHAR2(4000):=NULL;
  VL_SM1_CODPROCESS NUMBER(9);
  VL_SM1_COUNT      NUMBER(9);
  TYPE CURTYP IS REF CURSOR;
  CUR CURTYP;
  BEGIN

  PO_STATUS := 0;
  VL_SQL :=  'SELECT SM1_CODPROCESS, count(*) FROM '||PI_TABLE_NAME||' WHERE ERP_DTEPROCESS IS NOT NULL AND NVL(ERP_STATUS, ''9'') <> ''0'' GROUP BY SM1_CODPROCESS ';

  OPEN CUR FOR VL_SQL || CHR(0);
    LOOP
      FETCH CUR INTO VL_SM1_CODPROCESS, VL_SM1_COUNT;
      EXIT WHEN CUR%NOTFOUND;

          VL_MSG := 'Table '||PI_TABLE_NAME||'. '||VL_SM1_COUNT||' records read with errors from ERP. CodProcess='||VL_SM1_CODPROCESS;
          PKG_UTILS.LOG_NEW_DETAIL_ERROR( PI_PROGR_H,
                                          PI_PROGR_D,
                                           0,
                                           VL_MSG);


  END LOOP;
  CLOSE CUR;




  VL_SQL := 'INSERT INTO '||PI_TABLE_NAME||'_LOG SELECT * FROM '||PI_TABLE_NAME||' WHERE ERP_DTEPROCESS IS NOT NULL ';
  EXECUTE IMMEDIATE (VL_SQL);
  VL_SQL := 'DELETE FROM '||PI_TABLE_NAME||' WHERE ERP_DTEPROCESS IS NOT NULL ';
  EXECUTE IMMEDIATE (VL_SQL);

  COMMIT;


  EXCEPTION WHEN OTHERS THEN
   ROLLBACK;
      VL_MSG := SUBSTR(VL_SQL||' '||SQLERRM,1, 2000);
      PO_STATUS := -1;
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     PI_PROGR_D,
                                     SQLCODE,
                                     VL_MSG);


  END P_XOUT_MOVE_TO_LOG;
  /*============================================================================*\
  /* Name: P_XOUT_CLEANUP_LOG
     Clean XOUT LOG tables from records older than C_DAYS_OF_LOG days

     Input parameters :      PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_PROGR_D - detail sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_TABLE_NAME    - table name

     Logs in T800 when error

     Author : Mariangela Bandiera
     Creation Date : 21 November 2012
     ----
     Updates :


    ============================================================================ */
  PROCEDURE P_XOUT_CLEANUP_LOG ( PI_PROGR_H    IN NUMBER,
                                 PI_PROGR_D    IN NUMBER,
                                 PI_TABLE_NAME IN VARCHAR2,
                                 PO_STATUS  OUT NUMBER)

  IS
  VL_MSG VARCHAR2(4000):=NULL;
  VL_SQL VARCHAR2(4000):=NULL;

  BEGIN
      PO_STATUS := 0;
      VL_SQL := 'DELETE '||PI_TABLE_NAME||'_LOG WHERE SM1_DTEPROCESS < SYSDATE - '||C_DAYS_OF_LOG;
      EXECUTE IMMEDIATE (VL_SQL);

      COMMIT;

   EXCEPTION WHEN OTHERS THEN
   ROLLBACK;
      PO_STATUS := -1;
      VL_MSG := SUBSTR(VL_SQL||' '||SQLERRM,1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     PI_PROGR_D,
                                     SQLCODE,
                                     VL_MSG);


  END P_XOUT_CLEANUP_LOG;
  /*============================================================================*\
  /* Name: P_INIT_MEASURE_LIST
     Loads in a array the link between the measure name and the fields in the TA0192

     Input parameters :
                            PI_CODTYPSURVEY    - Survey type
     Output parameters :
                            PO_MEAS_COD          list with measure name
                            PO_MEAS_FIELDS       LIST WITH  field name

     Author : Mariangela Bandiera
     Creation Date : 21 November 2012
     ----
     Updates :


    ============================================================================ */
  PROCEDURE P_INIT_MEASURE_LIST ( PI_CODTYPSURVEY    IN VARCHAR2,
                                   PO_MEAS_COD        OUT VARCHAR2,
                                   PO_MEAS_FIELDS     OUT VARCHAR2,
                                   PO_STATUS          OUT NUMBER,
                                   PO_MESSAGE         OUT VARCHAR2)  IS


   VL_MEAS_COD    VARCHAR2(4000);
   VL_MEAS_FIELDS VARCHAR2(4000);

   CURSOR CL_MEAS IS
       SELECT T.CODMEASURE,
              T.FIELDNAME
      FROM TA0180MEASURE T,
           TA0182SURVEYMEASURE D
      WHERE T.CODMEASURE   = D.CODMEASURE
        AND D.CODTYPSURVEY = PI_CODTYPSURVEY
      ORDER BY D.NUMPRG ASC;

   BEGIN



    FOR RL_MEAS IN CL_MEAS LOOP
         VL_MEAS_COD :=   CASE WHEN VL_MEAS_COD IS NOT NULL
                                THEN VL_MEAS_COD||','||'M_'|| RL_MEAS.CODMEASURE
                                ELSE 'M_'||RL_MEAS.CODMEASURE
                           END ;
         VL_MEAS_FIELDS := CASE WHEN VL_MEAS_FIELDS IS NOT NULL
                                THEN VL_MEAS_FIELDS||','|| RL_MEAS.FIELDNAME
                                ELSE RL_MEAS.FIELDNAME
                           END ;
    END LOOP;


    PO_MEAS_COD := VL_MEAS_COD;
    PO_MEAS_FIELDS := VL_MEAS_FIELDS;
    PO_STATUS := 0;
    PO_MESSAGE := NULL;

   EXCEPTION WHEN OTHERS THEN
    PO_STATUS := -1;
    PO_MESSAGE := 'Error while retrieving measure info on TA0180/TA0182 on codtypsurvey '||PI_CODTYPSURVEY||' '||SQLERRM;
    VL_MEAS_COD :=  NULL;
    VL_MEAS_FIELDS := NULL;
    PO_MEAS_COD := VL_MEAS_COD;
    PO_MEAS_FIELDS := VL_MEAS_FIELDS;
    --

  END P_INIT_MEASURE_LIST;

  /*============================================================================*\
  /* Name: EXP_TA4410_NOTES
        Exports SM1 tables
        •  TA4410NOTES  notes
        Into Staging Area (SSA) tables
        .  XOUT_TA4410NOTES

          Cleaning and Moving records in XOUT and XOUT_LOG
      Before exporting it :
       . cleans old records from XOUT_LOG table
       . moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by erp

      exporting logic:
                       Exports records not locked by users that have fields DTETOHOST NULL OR LESS THAN DTEMOD
                       it locks all records to be exported
                       DELETE records on XOUT table already present that havn't already been read by ERP
                       INSERT records
                       set DTETOHOST after record is done
                       release lock record by record when it has been exported and all records at the end of procedure.

        Error handling:
        •  All Errors will be logged in T852/T854 SM1 log tables
        •  On error all notes belonging to same document key will be discarded

     !!  PAY ATTENTION !!!
     !!! THIS PROCEDURE MUST BE ALWAYS CALLED FROM OTHERS EXPORT PROCEDURES THAT WILL MANAGE XOUT CLEAN UP AND MOVING TO XOUT_LOG !!
     !!  DOES NOT COMMIT THE TRANSACTION
     Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                            PI_PROGR_D - detail sm1 job number ( T800SYSTEMACTIVITYLOG )
                            PI_PARENTKEY     - document note key
     Outputparameters :     PO_MSG           - message of error if procedure exit with error
                            PO_INS           - number of inserted rows
     Author : Mariangela Bandiera
     Creation Date : 22 November 2012
     ----
     Updates :


    ============================================================================ */

   PROCEDURE EXP_TA4410_NOTES(PI_PROGR_H       IN NUMBER,
                              PI_PROGR_D       IN NUMBER,
                              PI_PARENTKEY     IN VARCHAR2,
                              PI_SM1_DTEPROCESS IN DATE,
                              PO_MSG           OUT VARCHAR,
                              PO_STATUS        OUT NUMBER ,
                              PO_INS           OUT NUMBER ,
                              PO_COUNT         OUT NUMBER) IS

    -- -----------------------------------------
    -- Cursor on GENERIC Notes table TA4410NOTES
    -- -----------------------------------------
    CURSOR CL_TA4410 (CI_PARENTKEY VARCHAR2) IS
      SELECT
          *
        FROM  TA4410NOTES
       WHERE PARENTKEY = CI_PARENTKEY;

    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting Notes TA4410';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    REC_XOUT_TA4410 XOUT_TA4410NOTES%ROWTYPE      := NULL;

    VL_STATUS NUMBER:= 0;
    VL_INS    NUMBER:= 0;
    VL_COUNT  NUMBER:= 0;
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN
    PO_INS    :=0;
    PO_COUNT  :=0;
    PO_MSG    := null;
    PO_STATUS := 0;
    --
    -- --------------------------------------------------------------
    -- loops Notes for DOCUMENT KEY IN INPUT
    -- --------------------------------------------------------------
    VL_MESSAGE_D := 'Delete XOUT_TA4410NOTES ';
    DElETE XOUT_TA4410NOTES WHERE PARENTKEY = PI_PARENTKEY AND ERP_DTEPROCESS IS NULL;
     --
    VL_STATUS := 0;
     --
    FOR RL_TA4410 IN CL_TA4410(PI_PARENTKEY) LOOP
    VL_COUNT := VL_COUNT + 1;
      IF ( VL_STATUS = 0 ) THEN

      --
      VL_MESSAGE_H :=   'Doc Key: '||PI_PARENTKEY;
      --
      BEGIN


        VL_MESSAGE_D := 'Insert XOUT_TA4410NOTES ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table
        REC_XOUT_TA4410.PARENTKEY :=RL_TA4410.PARENTKEY;
        REC_XOUT_TA4410.NOTETYPE :=RL_TA4410.NOTETYPE;
        REC_XOUT_TA4410.IDSEQ :=RL_TA4410.IDSEQ;
        REC_XOUT_TA4410.NOTE :=RL_TA4410.NOTE;
        REC_XOUT_TA4410.CODUSRCRE :=RL_TA4410.CODUSRCRE;
        REC_XOUT_TA4410.DTECRE :=RL_TA4410.DTECRE;
        REC_XOUT_TA4410.CODUSRMOD :=RL_TA4410.CODUSRMOD;
        REC_XOUT_TA4410.DTEMOD :=RL_TA4410.DTEMOD;
        --
        REC_XOUT_TA4410.SM1_DTEPROCESS := PI_SM1_DTEPROCESS;
        REC_XOUT_TA4410.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_TA4410NOTES VALUES REC_XOUT_TA4410;
         VL_INS := VL_INS + 1;


       EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           PI_PROGR_D,
                                           SQLCODE,
                                           VL_MESSAGE_H);
       END; -- NOTES
       END IF;

    END LOOP;  -- notes



    PO_INS    := VL_INS;
    PO_COUNT  := VL_COUNT;


    --
  EXCEPTION WHEN OTHERS THEN

          ROLLBACK;

          VL_MESSAGE_H       := SUBSTR (VL_MESSAGE_H ||' '||SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         PI_PROGR_D,
                                         SQLCODE,
                                         VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_TA4410_NOTES;
  --



  /*============================================================================*\
  /* Name: EXP_TA443X_ANOMALIES
        Exports SM1 tables
        •  TA4430ANOMALIES generic anomalies
        •  TA4432ANOMDETAILS  anomaly detail

        Into Staging Area (SSA) tables
        •  XOUT_TA4430ANOMALIES generic anomalies
        •  XOUT_TA4432ANOMDETAILS  anomaly detail

         Cleaning and Moving records in XOUT and XOUT_LOG
      Before exporting it :
       . cleans old records from XOUT_LOG table
       . moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by erp

      exporting logic:
                       Exports records not locked by users that have fields DTETOHOST NULL OR LESS THAN DTEMOD
                       it locks all records to be exported
                       DELETE records on XOUT table already present that havn't already been read by ERP
                       INSERT records
                       set DTETOHOST after record is done
                       release lock record by record when it has been exported and all records at the end of procedure.

        Error handling:
        •  All Errors will be logged in T852/T854 SM1 log tables
        •  On error all notes belonging to same document key will be discarded

     !!  PAY ATTENTION !!!
     !!! THIS PROCEDURE MUST BE ALWAYS CALLED FROM OTHERS EXPORT PROCEDURES THAT WILL MANAGE XOUT CLEAN UP AND MOVING TO XOUT_LOG !!
     !!  DOES NOT COMMIT THE TRANSACTION
     Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                            PI_PROGR_D - detail sm1 job number ( T800SYSTEMACTIVITYLOG )
                            PI_PARENTKEY     - document note key
     Outputparameters :     PO_MSG           - message of error if procedure exit with error
                            PO_INS           - number of inserted rows
     Author : Mariangela Bandiera
     Creation Date : 22 November 2012
     ----
     Updates :


    ============================================================================ */

   PROCEDURE EXP_TA443X_ANOMALIES(PI_PROGR_H       IN NUMBER,
                                  PI_PROGR_D       IN NUMBER,
                                  PI_PARENTKEY     IN VARCHAR2,
                                  PI_SM1_DTEPROCESS IN DATE,
                                  PO_MSG           OUT VARCHAR,
                                  PO_STATUS        OUT NUMBER ,
                                  PO_INS           OUT NUMBER ,
                                  PO_COUNT         OUT NUMBER) IS

    -- --------------------------
    -- Anomalies
    -- ---------------------------
    CURSOR CL_TA4430(CI_PARENTKEY VARCHAR2) IS
      SELECT *
        FROM TA4430ANOMALIES
       WHERE PARENTKEY = CI_PARENTKEY
       ;


    -- --------------------------
    -- Anomaly details
    -- ---------------------------
    CURSOR CL_TA4432(CI_PARENTKEY VARCHAR2, CI_IDANOMALY NUMBER ) IS
      SELECT *
        FROM TA4432ANOMDETAILS
       WHERE PARENTKEY = CI_PARENTKEY
         AND IDANOMALY = CI_IDANOMALY
       ;


    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting Anomalies TA4430';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    REC_XOUT_TA4430 XOUT_TA4430ANOMALIES%ROWTYPE      := NULL;
    REC_XOUT_TA4432 XOUT_TA4432ANOMDETAILS%ROWTYPE      := NULL;

    VL_STATUS NUMBER:= 0;
    VL_INS    NUMBER:= 0;
    VL_COUNT  NUMBER:= 0;
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN
    PO_INS    :=0;
    PO_COUNT  :=0;
    PO_MSG    := null;
    PO_STATUS := 0;
    --
    -- --------------------------------------------------------------
    -- loops Notes for DOCUMENT KEY IN INPUT
    -- --------------------------------------------------------------
    VL_MESSAGE_D := 'Delete XOUT_TA4430ANOMALIES ';
    DElETE XOUT_TA4430ANOMALIES WHERE PARENTKEY = PI_PARENTKEY AND ERP_DTEPROCESS IS NULL;
     --
    VL_STATUS := 0;
     --
    FOR RL_TA4430 IN CL_TA4430(PI_PARENTKEY) LOOP
    VL_COUNT := VL_COUNT + 1;
     IF ( VL_STATUS = 0 ) THEN

      --
      VL_MESSAGE_H :=   'Doc Key: '||PI_PARENTKEY;
      --
      BEGIN ---


        VL_MESSAGE_D := 'Insert XOUT_TA4430ANOMALIES ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table
        REC_XOUT_TA4430.PARENTKEY :=RL_TA4430.PARENTKEY;
        REC_XOUT_TA4430.IDANOMALY :=RL_TA4430.IDANOMALY;
        REC_XOUT_TA4430.CODANOMALY :=RL_TA4430.CODANOMALY;
        REC_XOUT_TA4430.CODE1 :=RL_TA4430.CODE1;
        REC_XOUT_TA4430.CODE2 :=RL_TA4430.CODE2;
        REC_XOUT_TA4430.DES1 :=RL_TA4430.DES1;
        REC_XOUT_TA4430.DES2 :=RL_TA4430.DES2;
        REC_XOUT_TA4430.NUM1 :=RL_TA4430.NUM1;
        REC_XOUT_TA4430.NUM2 :=RL_TA4430.NUM2;
        REC_XOUT_TA4430.DTE1 :=RL_TA4430.DTE1;
        REC_XOUT_TA4430.DTE2 :=RL_TA4430.DTE2;
        REC_XOUT_TA4430.DTECRE :=RL_TA4430.DTECRE;
        REC_XOUT_TA4430.DTECHECK :=RL_TA4430.DTECHECK;
        REC_XOUT_TA4430.DTEEND :=RL_TA4430.DTEEND;
        REC_XOUT_TA4430.CODUSRSIGN :=RL_TA4430.CODUSRSIGN;
        REC_XOUT_TA4430.DTESIGN :=RL_TA4430.DTESIGN;
        REC_XOUT_TA4430.IDANOMORIG :=RL_TA4430.IDANOMORIG;
        --
        REC_XOUT_TA4430.SM1_DTEPROCESS := PI_SM1_DTEPROCESS;
        REC_XOUT_TA4430.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_TA4430ANOMALIES VALUES REC_XOUT_TA4430;

             VL_MESSAGE_D := 'Delete XOUT_TA4432ANOMDETAILS ';
             DElETE XOUT_TA4432ANOMDETAILS WHERE PARENTKEY = RL_TA4430.PARENTKEY AND IDANOMALY = RL_TA4430.IDANOMALY AND ERP_DTEPROCESS IS NULL;

             BEGIN
               FOR RL_TA4432 IN CL_TA4432(RL_TA4430.PARENTKEY, RL_TA4430.IDANOMALY) LOOP
                    REC_XOUT_TA4432.PARENTKEY :=RL_TA4432.PARENTKEY;
                    REC_XOUT_TA4432.IDANOMALY :=RL_TA4432.IDANOMALY;
                    REC_XOUT_TA4432.IDDET :=RL_TA4432.IDDET;
                    REC_XOUT_TA4432.CODE1 :=RL_TA4432.CODE1;
                    REC_XOUT_TA4432.CODE2 :=RL_TA4432.CODE2;
                    REC_XOUT_TA4432.DES1 :=RL_TA4432.DES1;
                    REC_XOUT_TA4432.DES2 :=RL_TA4432.DES2;
                    REC_XOUT_TA4432.NUM1 :=RL_TA4432.NUM1;
                    REC_XOUT_TA4432.NUM2 :=RL_TA4432.NUM2;
                    REC_XOUT_TA4432.DTE1 :=RL_TA4432.DTE1;
                    REC_XOUT_TA4432.DTE2 :=RL_TA4432.DTE2;
                    REC_XOUT_TA4432.CODE3 :=RL_TA4432.CODE3;
                    REC_XOUT_TA4432.CODE4 :=RL_TA4432.CODE4;
                    REC_XOUT_TA4432.NUM3 :=RL_TA4432.NUM3;
                    REC_XOUT_TA4432.NUM4 :=RL_TA4432.NUM4;
                    REC_XOUT_TA4432.DTE3 :=RL_TA4432.DTE3;
                    REC_XOUT_TA4432.DTE4 :=RL_TA4432.DTE4;
                    REC_XOUT_TA4432.DES3 :=RL_TA4432.DES3;
                    REC_XOUT_TA4432.DES4 :=RL_TA4432.DES4;
                    --
                    REC_XOUT_TA4432.SM1_DTEPROCESS := REC_XOUT_TA4430.SM1_DTEPROCESS ;
                    REC_XOUT_TA4432.SM1_CODPROCESS := REC_XOUT_TA4430.SM1_CODPROCESS;


               END LOOP;

            EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                            PI_PROGR_D,
                                            SQLCODE,
                                            VL_MESSAGE_H);
           END;
        IF (VL_STATUS = 0 ) THEN
           VL_INS := VL_INS + 1;
        END IF;


       EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                            PI_PROGR_D,
                                            SQLCODE,
                                            VL_MESSAGE_H);
       END;
       END IF;

    END LOOP;  -- notes

    PO_INS    := VL_INS;
    PO_COUNT  := VL_COUNT;

    --
  EXCEPTION WHEN OTHERS THEN

          ROLLBACK;

          VL_MESSAGE_H       :=  SUBSTR (VL_MESSAGE_H ||' '||SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         PI_PROGR_D,
                                         SQLCODE,
                                         VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_TA443X_ANOMALIES;
  --


 /*============================================================================*\
  /* Name: EXP_T90X_DECODES
    Exports SM1 view:
    •  QTABS   -  All decode tables

    Into Staging Area (SSA) tables
    •  XOUT_T902TABROWS

    Before exporting it :
    •  cleans old records from XOUT_LOG table
    •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

    Export logic:
    •  exports all records every time
    •  deletes records on XOUT table already present that havn't been already read by ERP
    •  Inserts records
    •  Commits each CODTAB/CODSYS block of information

          Error handling:
          •  All Errors will be logged in T852/T854 SM1 log tables
          •  On Error on record, all block CODTAB/CODSYS is discarded

    Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                                    PI_SESSION_ID    - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                                    PO_STATUS        - 0 OK; -1 Error

     Author : Mariangela Bandiera
     Creation Date : 21 November 2012
     ----
     Updates :


    ============================================================================ */

   PROCEDURE EXP_T90X_DECODES(PI_PROGR_H       IN NUMBER,
                              PI_SESSION_ID    IN NUMBER,
                              PO_MSG           OUT VARCHAR,
                              PO_STATUS        OUT NUMBER ) IS

    -- -----------------------------------------
    -- Cursor on Users table T030PARTYAMOUNT
    -- -----------------------------------------
    CURSOR CL_T902 IS
      SELECT
      CODSYS,
      CODTAB,
      COD AS CODTABROW,
      DES AS DESTABROW,
      NUMOPTIONAL,
      OPTINFO,
      FLGANN
     FROM QTABS
     ORDER BY CODSYS, CODTAB;


    --
    EX_EXIT  EXCEPTION;
    --

    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting Users T030';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T902     NUMBER := 0;
    VL_COUNT_XOUT_T902  NUMBER := 0;
    VL_INS_T902         NUMBER := 0;
    VL_INS_T902_P       NUMBER := 0;
    --
    REC_XOUT_T902 XOUT_T902TABROWS%ROWTYPE    := NULL;

    VL_STATUS NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    VL_CODTAB_PREV T902TABROWS.CODTAB%TYPE:='@';
    VL_CODSYS_PREV T902TABROWS.CODSYS%TYPE:='@';
    --

  BEGIN



    VL_PROGR_D_T902 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                       'TABS',
                                       'EXPORT --> QTABS',
                                        0,
                                        NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T902, 'XOUT_T902TABROWS', VL_STATUS);

    -- Moves already read by ERP records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T902, 'XOUT_T902TABROWS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- loops in qtabrows
    -- --------------------------------------------------------------
    FOR RL_T902 IN CL_T902 LOOP

      -- pings to t035 every 100 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 100) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
   --
      VL_MESSAGE_H :=   'Tab: '||RL_T902.CODTAB||' CodSys: '||RL_T902.CODSYS;
      --
      BEGIN ---

        IF ( VL_CODTAB_PREV <> RL_T902.CODTAB OR VL_CODSYS_PREV <> RL_T902.CODSYS ) THEN
          IF ( VL_STATUS = 0 ) THEN
             VL_INS_T902 :=  VL_INS_T902 + VL_INS_T902_P ;
            COMMIT;
          ELSE
            ROLLBACK;
          END IF;
          VL_STATUS := 0;
          VL_INS_T902_P := 0;
          VL_MESSAGE_D := 'Delete XOUT_T902TABROWS ';
          DElETE XOUT_T902TABROWS WHERE CODTAB = RL_T902.CODTAB AND CODSYS = RL_T902.CODSYS AND ERP_DTEPROCESS IS NULL;
        END IF;

        IF ( VL_STATUS = 0 ) THEN
              VL_MESSAGE_D := 'Insert XOUT_T902TABROWS ';
              -- Here you can customize field elaboration
              -- the default is the xout has the same value of sm1 table

              REC_XOUT_T902.CODSYS      :=RL_T902.CODSYS;
              REC_XOUT_T902.CODTAB      :=RL_T902.CODTAB;
              REC_XOUT_T902.CODTABROW   :=RL_T902.CODTABROW;
              REC_XOUT_T902.DESTABROW   :=RL_T902.DESTABROW;
              REC_XOUT_T902.NUMOPTIONAL :=RL_T902.NUMOPTIONAL;
              REC_XOUT_T902.OPTINFO     :=RL_T902.OPTINFO;
              REC_XOUT_T902.FLGANN      :=RL_T902.FLGANN;

              --
              REC_XOUT_T902.SM1_DTEPROCESS := XSYSDATE;
              REC_XOUT_T902.SM1_CODPROCESS := PI_PROGR_H;

              INSERT INTO XOUT_T902TABROWS VALUES REC_XOUT_T902;
               VL_INS_T902_P := VL_INS_T902_P + 1;
       END IF;
       EXCEPTION WHEN OTHERS THEN
             ROLLBACK;
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T902,
                                           SQLCODE,
                                           VL_MESSAGE_H);
       END; -- T902

      VL_CODTAB_PREV := RL_T902.CODTAB;
      VL_CODSYS_PREV := RL_T902.CODSYS;

    VL_COUNT_XOUT_T902 := CL_T902%ROWCOUNT;
    END LOOP;  -- T902



     IF ( VL_STATUS = 0 ) THEN
       VL_INS_T902 :=  VL_INS_T902 + VL_INS_T902_P ;
       COMMIT;
     ELSE
        ROLLBACK;
     END IF;

   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T902,
                             0,
                             VL_COUNT_XOUT_T902,
                             VL_INS_T902,
                             VL_COUNT_XOUT_T902 - VL_INS_T902);


    PO_MSG    := VL_INS_T902||'/'||VL_COUNT_XOUT_T902||' Decode Exported';
    PO_STATUS := VL_INS_T902;


    --
  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       :=  SUBSTR (VL_MESSAGE_H ||' '||SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T902,
                                         SQLCODE,
                                         VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

WHEN OTHERS THEN

          ROLLBACK;

          VL_MESSAGE_H       :=  SUBSTR (VL_MESSAGE_H ||' general '||SQLERRM, 1, 2000);

          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T902,
                                         SQLCODE,
                                         VL_MESSAGE_H);

          PO_MSG    := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T90X_DECODES;
  --
  --
  /*============================================================================*\
  /* Name: EXP_T03X_USERS
    Exports SM1 tables:
      •  T030USERS - Users master data
      •  T031USERDIV  - Users info information

      Into Staging Area (SSA) tables
      •  XOUT_T030USERS - Users master data
      •  XOUT_T031USERDIV  - Users info information
      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field T030USER.DTETOHOST set to NULL or lower than last modified data (T030USER.DTEMOD)
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T030USER.CODUSR block of information
      •  Set date T030USER.DTETOHOST into SM1 header table

            Error handling:
            •  All Errors will be logged in T852/T854 SM1 log tables
            •  Error on record, header and all details are discarded

      Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID    - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'  wihout any check on DTETOHOST
                             PI_MASSIVE_EXP_DATE:  NULL - normal export (DTEMOD>DTETOHOST or DTETOHOST is null)
                                                   NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE without any check on DTETOHOST


             PO_STATUS        - 0 OK; -1 Error

     Author : Mariangela Bandiera
     Creation Date : 21 November 2012
     ----
     Updates :


    ============================================================================ */

   PROCEDURE EXP_T03X_USERS(PI_PROGR_H       IN NUMBER,
                         PI_SESSION_ID       IN NUMBER,
                         PI_DOCUMENTKEY      IN VARCHAR2,
                         PI_MASSIVE_EXP_DATE IN DATE,
                         PO_MSG              OUT VARCHAR,
                         PO_STATUS           OUT NUMBER ) IS

    -- -----------------------------------------
    -- Cursor on Users table T030PARTYAMOUNT
    -- -----------------------------------------
    CURSOR CL_T030 IS
      SELECT
      *
     FROM  T030USER

        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY CODUSR;

    -- -----------------------------------------
    -- Cursor on Users Division Info T031USERDIV
    -- -----------------------------------------
    CURSOR CL_T031(CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM  T031USERDIV
        WHERE CODUSR = CI_CODUSR;


    -- -----------------------------------------
    -- Cursor on main Customer table T030USER where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T030 IS
      SELECT
          CODUSR,
          CODUSRLCK,
          DTELCK
        FROM  T030USER
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY CODUSR ASC;
    --
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting Users T030';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T030    NUMBER := 0;
    VL_COUNT_XOUT_T030  NUMBER := 0;
    VL_INS_T030        NUMBER := 0;
    --
    VL_PROGR_D_T031       NUMBER := 0;
    VL_COUNT_XOUT_T031    NUMBER := 0;
    VL_COUNT_XOUT_T031_P  NUMBER := 0;
    VL_INS_T031           NUMBER := 0;
    --
    REC_XOUT_T030 XOUT_T030USER%ROWTYPE    := NULL;
    REC_XOUT_T031 XOUT_T031USERDIV%ROWTYPE := NULL;

    VL_STATUS NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --

  BEGIN



    VL_PROGR_D_T030 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                       'USERS',
                                       'EXPORT --> T030USER',
                                        0,
                                        NULL);
    VL_PROGR_D_T031 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                       'USER DIV INFO',
                                       'EXPORT --> T031USERDIV',
                                        0,
                                        NULL);



      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T030, 'XOUT_T030USER', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T031, 'XOUT_T031USERDIV', VL_STATUS);
    --
    -- Moves already read by ERP records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T030, 'XOUT_T030USER', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T031, 'XOUT_T031USERDIV', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies Records to be exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T030USER';
        UPDATE T030USER
        SET IDSESSIONLCK  = PI_SESSION_ID,
            DTELCK         = XSYSDATE,
            CODUSRLCK      = C_SYSUSR
            WHERE
            not exists ( select null from T035LOGGEDUSERS T035 where T035.IDSESSION = NVL(IDSESSIONLCK, '@') AND T035.LASTCHECK > TRUNC(XSYSDATE)-1 ) AND
            DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
            NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE));
        VL_COUNT_XOUT_T030 := SQL%ROWCOUNT;



    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;

    END;

    -- --------------------------------------------------------------
    -- loops locked records in main table T030USER to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T030 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.CodUser='||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T030,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;
    -- --------------------------------------------------------------
    -- loop in main table T030USER
    -- --------------------------------------------------------------
    FOR RL_T030 IN CL_T030 LOOP

      -- pings to t035 every 100 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 100) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;


      --
      VL_STATUS := 0;

      --
      VL_MESSAGE_H :=   'User: '||RL_T030.CODUSR;
      --
      BEGIN --- HEAD T030

        VL_MESSAGE_D := 'Delete XOUT_T030USER ';
        DElETE XOUT_T030USER WHERE CODUSR = RL_T030.CODUSR AND ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T030USER ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T030.CODUSR :=RL_T030.CODUSR;
        REC_XOUT_T030.USRID :=RL_T030.USRID;
        REC_XOUT_T030.USRGROUP :=RL_T030.USRGROUP;
        REC_XOUT_T030.USRPWD :=RL_T030.USRPWD;
        REC_XOUT_T030.USRTYPE :=RL_T030.USRTYPE;
        REC_XOUT_T030.LINKTYPE :=RL_T030.LINKTYPE;
        REC_XOUT_T030.DTELASTLOGIN :=RL_T030.DTELASTLOGIN;
        REC_XOUT_T030.CODDEFDIV :=RL_T030.CODDEFDIV;
        REC_XOUT_T030.CODUSRSUPFIRST :=RL_T030.CODUSRSUPFIRST;
        REC_XOUT_T030.DESUSR :=RL_T030.DESUSR;
        REC_XOUT_T030.DESADDR :=RL_T030.DESADDR;
        REC_XOUT_T030.CODZIP :=RL_T030.CODZIP;
        REC_XOUT_T030.CODPRV :=RL_T030.CODPRV;
        REC_XOUT_T030.DESLOC :=RL_T030.DESLOC;
        REC_XOUT_T030.CODNATION :=RL_T030.CODNATION;
        REC_XOUT_T030.NUMPHONE1 :=RL_T030.NUMPHONE1;
        REC_XOUT_T030.NUMPHONE2 :=RL_T030.NUMPHONE2;
        REC_XOUT_T030.NUMFAX :=RL_T030.NUMFAX;
        REC_XOUT_T030.DESNOTE1 :=RL_T030.DESNOTE1;
        REC_XOUT_T030.EMAIL1 :=RL_T030.EMAIL1;
        REC_XOUT_T030.EMAIL2 :=RL_T030.EMAIL2;
        REC_XOUT_T030.DESNOTE2 :=RL_T030.DESNOTE2;
        REC_XOUT_T030.CODDISCLISMAX :=RL_T030.CODDISCLISMAX;
        REC_XOUT_T030.CODDISCLISBLK :=RL_T030.CODDISCLISBLK;
        REC_XOUT_T030.DTEMOD :=RL_T030.DTEMOD;
        REC_XOUT_T030.ALLOWLOGIN :=RL_T030.ALLOWLOGIN;
        REC_XOUT_T030.FLGANN :=RL_T030.FLGANN;
        REC_XOUT_T030.CODUSRLCK :=RL_T030.CODUSRLCK;
        REC_XOUT_T030.DTECRE :=RL_T030.DTECRE;
        REC_XOUT_T030.DTELCK :=RL_T030.DTELCK;
        REC_XOUT_T030.IDSESSIONLCK :=RL_T030.IDSESSIONLCK;
        REC_XOUT_T030.CODUSRMOD :=RL_T030.CODUSRMOD;
        REC_XOUT_T030.CODLNG :=RL_T030.CODLNG;
        REC_XOUT_T030.CODVAT :=RL_T030.CODVAT;
        REC_XOUT_T030.CODVATSTAT :=RL_T030.CODVATSTAT;
        REC_XOUT_T030.NUMMAT :=RL_T030.NUMMAT;
        REC_XOUT_T030.CODNATGIU :=RL_T030.CODNATGIU;
        REC_XOUT_T030.CODAREA :=RL_T030.CODAREA;
        REC_XOUT_T030.CODCHKVAT :=RL_T030.CODCHKVAT;
        REC_XOUT_T030.CODFIS :=RL_T030.CODFIS;
        REC_XOUT_T030.NRPATENT :=RL_T030.NRPATENT;
        REC_XOUT_T030.DTEENDPATENT :=RL_T030.DTEENDPATENT;
        REC_XOUT_T030.CODAUTHMODE :=RL_T030.CODAUTHMODE;
        REC_XOUT_T030.USRGROUPOFFLINE :=RL_T030.USRGROUPOFFLINE;
        REC_XOUT_T030.DOCUMENTKEY :=RL_T030.DOCUMENTKEY;
        REC_XOUT_T030.VALLATITUDE :=RL_T030.VALLATITUDE;
        REC_XOUT_T030.VALLONGITUDE :=RL_T030.VALLONGITUDE;
        REC_XOUT_T030.UDLTEMPLATE :=RL_T030.UDLTEMPLATE;
        REC_XOUT_T030.FLGISUDLTEMPLATE :=RL_T030.FLGISUDLTEMPLATE;
        REC_XOUT_T030.FLGISPDATEMPLATE :=RL_T030.FLGISPDATEMPLATE;
        REC_XOUT_T030.PDATEMPLATE :=RL_T030.PDATEMPLATE;
        REC_XOUT_T030.CODUSRMODREAL :=RL_T030.CODUSRMODREAL;
        REC_XOUT_T030.CODUSRCREREAL :=RL_T030.CODUSRCREREAL;
        REC_XOUT_T030.DESMON :=RL_T030.DESMON;
        REC_XOUT_T030.DESTUE :=RL_T030.DESTUE;
        REC_XOUT_T030.DESWED :=RL_T030.DESWED;
        REC_XOUT_T030.DESTHU :=RL_T030.DESTHU;
        REC_XOUT_T030.DESFRI :=RL_T030.DESFRI;
        REC_XOUT_T030.DESSAT :=RL_T030.DESSAT;
        REC_XOUT_T030.DESSUN :=RL_T030.DESSUN;
        REC_XOUT_T030.DTETOHOST :=RL_T030.DTETOHOST;
        --
        REC_XOUT_T030.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T030.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T030USER VALUES REC_XOUT_T030;


       EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T030,
                                           SQLCODE,
                                           VL_MESSAGE_H);
       END; -- HEAD T030


       -- -----------------------------------
        -- T031USER DIV IVISION INFO
        -- -----------------------------------
        BEGIN
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Division info T031USERDIV

              VL_MESSAGE_D := 'Delete XOUT_T010USERDIV ';
              DElETE XOUT_T031USERDIV WHERE CODUSR = RL_T030.CODUSR AND ERP_DTEPROCESS IS NULL;


              FOR RL_T031 IN CL_T031(RL_T030.CODUSR) LOOP

                VL_MESSAGE_H := 'Division Info: '|| RL_T031.CODUSR || '/' ||
                                                    RL_T031.CODDIV;

                  VL_MESSAGE_D := 'Format Conversion ';
                  REC_XOUT_T031.CODUSR :=RL_T031.CODUSR;
                  REC_XOUT_T031.CODDIV :=RL_T031.CODDIV;
                  REC_XOUT_T031.CODUSRSUP1 :=RL_T031.CODUSRSUP1;
                  REC_XOUT_T031.CODUSRSUP2 :=RL_T031.CODUSRSUP2;
                  REC_XOUT_T031.CODUSRSUP3 :=RL_T031.CODUSRSUP3;
                  REC_XOUT_T031.CODUSRSUP4 :=RL_T031.CODUSRSUP4;
                  REC_XOUT_T031.CODUSRSUP5 :=RL_T031.CODUSRSUP5;
                  REC_XOUT_T031.CODUSRSUP6 :=RL_T031.CODUSRSUP6;
                  REC_XOUT_T031.CODPARTY :=RL_T031.CODPARTY;
                  REC_XOUT_T031.USRGROUP :=RL_T031.USRGROUP;
                  REC_XOUT_T031.USRTYPE :=RL_T031.USRTYPE;
                  REC_XOUT_T031.FLGISUSER :=RL_T031.FLGISUSER;
                  REC_XOUT_T031.FLGISSALES :=RL_T031.FLGISSALES;
                  REC_XOUT_T031.CODDISCLISMAX :=RL_T031.CODDISCLISMAX;
                  REC_XOUT_T031.CODSTATUS :=RL_T031.CODSTATUS;
                  REC_XOUT_T031.DTEMODSTATUS :=RL_T031.DTEMODSTATUS;
                  REC_XOUT_T031.CODUSRMODSTATUS :=RL_T031.CODUSRMODSTATUS;
                  REC_XOUT_T031.CODWHSSALES :=RL_T031.CODWHSSALES;
                  REC_XOUT_T031.CODWHSDELIV :=RL_T031.CODWHSDELIV;
                  REC_XOUT_T031.CODSHIPPER :=RL_T031.CODSHIPPER;
                  REC_XOUT_T031.CODZONE :=RL_T031.CODZONE;
                  REC_XOUT_T031.VALCREDIT :=RL_T031.VALCREDIT;
                  REC_XOUT_T031.CODCUR :=RL_T031.CODCUR;
                  REC_XOUT_T031.CODDISCLISBLK :=RL_T031.CODDISCLISBLK;
                  REC_XOUT_T031.FLGAUTO :=RL_T031.FLGAUTO;
                  REC_XOUT_T031.CODVEHICLE :=RL_T031.CODVEHICLE;
                  REC_XOUT_T031.CODTOWING :=RL_T031.CODTOWING;
                  REC_XOUT_T031.CODAGREEMENT :=RL_T031.CODAGREEMENT;
                  REC_XOUT_T031.DTESTARTAGREE :=RL_T031.DTESTARTAGREE;
                  REC_XOUT_T031.DTEENDAGREE :=RL_T031.DTEENDAGREE;
                  REC_XOUT_T031.DTEBLC :=RL_T031.DTEBLC;
                  REC_XOUT_T031.CODUSRBLC :=RL_T031.CODUSRBLC;
                  REC_XOUT_T031.FLGFFS :=RL_T031.FLGFFS;
                  REC_XOUT_T031.CODMODLIQ :=RL_T031.CODMODLIQ;
                  REC_XOUT_T031.USRGROUPOFFLINE :=RL_T031.USRGROUPOFFLINE;
                  REC_XOUT_T031.CODBS :=RL_T031.CODBS;
                   --
                  REC_XOUT_T031.SM1_DTEPROCESS := REC_XOUT_T030.SM1_DTEPROCESS;
                  REC_XOUT_T031.SM1_CODPROCESS := REC_XOUT_T030.SM1_CODPROCESS;

                  INSERT INTO XOUT_T031USERDIV VALUES REC_XOUT_T031;

                  VL_INS_T031 := VL_INS_T031 + 1;
         VL_COUNT_XOUT_T031_P := CL_T031%ROWCOUNT;
         END LOOP;   --T031USERDIV
         VL_COUNT_XOUT_T031 := VL_COUNT_XOUT_T031 + VL_COUNT_XOUT_T031_P;
         VL_COUNT_XOUT_T031_P := 0;


       END IF;
       EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T031,
                                           SQLCODE,
                                           VL_MESSAGE_H);

      END; -- DIVISION T031
      -- if all records have been stored with success then it makes the commit
      -- SET DTETOHOST
      IF VL_STATUS = 0 THEN

         UPDATE T030USER
         SET    DTETOHOST = REC_XOUT_T030.SM1_DTEPROCESS,
                DTELCK          = NULL,
                IDSESSIONLCK    = NULL,
                CODUSRLCK       = NULL
         WHERE  CODUSR    = REC_XOUT_T030.CODUSR;
         VL_INS_T030 := VL_INS_T030 + 1;
         COMMIT;
      ELSE
        ROLLBACK;
            -- Release updated records
          UPDATE T030USER
          SET       DTELCK          = NULL,
                    IDSESSIONLCK    = NULL,
                    CODUSRLCK       = NULL
          WHERE CODUSR = REC_XOUT_T030.CODUSR;

          COMMIT;
      END IF;




    END LOOP;  -- T030USER


   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T031,
                             0,
                             VL_COUNT_XOUT_T031,
                             VL_INS_T031,
                             VL_COUNT_XOUT_T031 - VL_INS_T031);

    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T030,
                             0,
                             VL_COUNT_XOUT_T030,
                             VL_INS_T030,
                             VL_COUNT_XOUT_T030 - VL_INS_T030);


    PO_MSG    := VL_INS_T030||'/'||VL_COUNT_XOUT_T030||' Users Exported';
    PO_STATUS := VL_INS_T030;


    --
  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       :=  SUBSTR (VL_MESSAGE_H ||' '||SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T030,
                                         SQLCODE,
                                         VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;
         -- Release updated records
            UPDATE T030USER
            SET       DTELCK          = NULL,
                      IDSESSIONLCK    = NULL,
                      CODUSRLCK       = NULL
            WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
            COMMIT;

          VL_MESSAGE_H       :=  SUBSTR (VL_MESSAGE_H ||' '||SQLERRM, 1, 2000);

          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T030,
                                         SQLCODE,
                                         VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T03X_USERS;
  --

  /*============================================================================*\
  /* Name: EXP_T04X_CUSTOMERS
    Exports SM1 tables:
        •  T040PARTY             Customers master data. The table contains customer common data (data shared between all the divisions). One master data entity can be of different typologies: a) Delivery Customer b) Invoice Customer c) Point of Sales d) Customer hierarchy node e) Doctor, Hospital,  Pharmacy. One customer entity can play more than one role.
        •  T041PARTYDIV         Divisional customer master data
        •  T042PARTYADDR  Customer addresses
        •  TTA4410NOTES  notes
        •  T045PARTYWEEK  Customer weekly plans. In this table are store customer weekly plans like Closure days, visit days, delivery days etc... for each weekly plan the value can be: a time range (from hour/to hour); two time ranges; a decode table value (QTABS); a free text
        •  T046PARTYBANK  Customer bank data
        •  T047PARTYCONTACT  Contacts registry.
        •  T049PVCATEGORY  Point of Sales product category specific information
        •  T048PARTYAMOUNT Credit info

      Into Staging Area (SSA) tables
        •  XOUT_T045PARTYWEEK
        •  XOUT_T046PARTYBANK
        •  XOUT_T047PARTYCONTACT
        •  XOUT_T049PVCATEGORY
        •  XOUT_T048PARTYAMOUNT
        •  XOUT_T042PARTYADDR
        •  XOUT_T041PARTYDIV
        •  XOUT_T040PARTY
        •  XOUT_TA4410NOTES

        Before exporting it :
        •  cleans old records from XOUT_LOG table
        •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

        Export logic:
        •  exports all records not locked by SM1 User that have field T040party.DTETOHOST set to NULL or lower than last modified data (T040party.DTEMOD)
        •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
        •  deletes records on XOUT table already present that havn't been already read by ERP
        •  Inserts records into XOUT table from SM1 table
        •  Commits each T040party.CODparty block of information
        •  Set date T040party.DTETOHOST into SM1 header table

        Error handling:
         •  All Errors will be logged in T852/T854 SM1 log tables
         •  Error on record, header and all details are discarded

        Input parameters :   PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID    - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'  wihout any check on DTETOHOST
                             PI_MASSIVE_EXP_DATE:  NULL - normal export (DTEMOD>DTETOHOST or DTETOHOST is null)
                                                   NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE without any check on DTETOHOST


     Author : Mariangela Bandiera
     Creation Date : 22 November 2012
     ----
     Updates :


    ============================================================================ */

   PROCEDURE EXP_T04X_CUSTOMERS(PI_PROGR_H     IN NUMBER,
                           PI_SESSION_ID       IN NUMBER,
                           PI_DOCUMENTKEY      IN VARCHAR2,
                           PI_MASSIVE_EXP_DATE IN DATE,
                           PO_MSG           OUT VARCHAR,
                           PO_STATUS        OUT NUMBER ) IS

    -- -----------------------------------------
    -- Cursor on main Customer table T040PARTY
    -- -----------------------------------------
    CURSOR CL_T040 IS
      SELECT
          *
        FROM  T040PARTY
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        AND CODPARTY IN (SELECT DISTINCT CODPARTY FROM T041PARTYDIV WHERE CODDIV IN ('DFI','MED','DDF','SYG')
        AND CODPAYMOD='CR'
        ) AND
        NVL(DTETOHOST,to_Date('30121899','ddmmyyyy')) = to_Date('30121899','ddmmyyyy')
        ORDER BY CODPARTY ASC;

    -- -------------------------------------
    -- Cursor on Division info T041PARTYDIV
    -- -------------------------------------
    CURSOR CL_T041(CI_CODPARTY VARCHAR2) IS
      SELECT *
        FROM T041PARTYDIV
       WHERE CODPARTY = CI_CODPARTY;


    -- -------------------------------------
    -- Cursor on Address info T042PARTYADDR
    -- -------------------------------------
    CURSOR CL_T042(CI_CODPARTY VARCHAR2) IS
      SELECT *
        FROM T042PARTYADDR
       WHERE CODPARTY = CI_CODPARTY ;

    -- -----------------------------------------
    -- Cursor on Customer Credit Info table T048PARTYAMOUNT
    -- -----------------------------------------
    CURSOR CL_T048 (CI_CODPARTY VARCHAR2, CI_CODDIV VARCHAR2) IS
      SELECT
          *
        FROM  T048PARTYAMOUNT
       WHERE CODPARTY = CI_CODPARTY
         AND CODDIV   = CI_CODDIV;

   -- -------------------------------------
    -- Cursor on Weekly plan Info T046PartyBank
    -- -------------------------------------
    CURSOR CL_T045(CI_CODPARTY VARCHAR2, CI_CODDIV VARCHAR2) IS
      SELECT
          *

        FROM T045PARTYWEEK
       WHERE CODPARTY = CI_CODPARTY
         AND CODDIV   = CI_CODDIV;

    -- -------------------------------------
    -- Cursor on Bank Info T046PartyBank
    -- -------------------------------------

    CURSOR CL_T046(CI_CODPARTY VARCHAR2, CI_CODDIV VARCHAR2) IS
      SELECT
          *
        FROM T046PARTYBANK
       WHERE CODPARTY = CI_CODPARTY
         AND CODDIV   = CI_CODDIV    ;


    -- -------------------------------------
    -- Cursor on Contact Info T047PartyContact
    -- -------------------------------------

    CURSOR CL_T047(CI_CODPARTY VARCHAR2, CI_CODDIV VARCHAR2) IS
      SELECT
          *

        FROM T047PARTYCONTACT
       WHERE CODPARTY = CI_CODPARTY
         AND CODDIV   = CI_CODDIV    ;

    -- -------------------------------------
    -- Cursor on Category Info T049PVcategoru
    -- -------------------------------------

    CURSOR CL_T049(CI_CODPARTY VARCHAR2, CI_CODDIV VARCHAR2) IS
      SELECT
         *

        FROM T049PVCATEGORY
       WHERE CODPARTY = CI_CODPARTY
         AND CODDIV   = CI_CODDIV    ;


    -- -----------------------------------------
    -- Cursor on main Customer table T040PARTY where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T040 IS
      SELECT
          CODPARTY,
          CODUSRLCK,
          DTELCK
        FROM  T040PARTY
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        AND CODPARTY IN (SELECT DISTINCT CODPARTY FROM T041PARTYDIV WHERE --CODSTATUS='3' AND
        CODDIV IN ('DFI','MED','DDF','SYG')
        AND CODPAYMOD='CR'
         ) AND
        NVL(DTETOHOST,to_Date('30121899','ddmmyyyy')) = to_Date('30121899','ddmmyyyy')

        ORDER BY CODPARTY ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting CUSTOMERS T04X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T040    NUMBER := 0;
    VL_COUNT_XOUT_T040  NUMBER := 0;
    VL_INS_T040        NUMBER := 0;
    --
    VL_PROGR_D_T041    NUMBER := 0;
    VL_COUNT_XOUT_T041  NUMBER := 0;
    VL_COUNT_XOUT_T041_P  NUMBER := 0;
    VL_INS_T041        NUMBER := 0;
    --
    VL_PROGR_D_T042    NUMBER := 0;
    VL_COUNT_XOUT_T042  NUMBER := 0;
    VL_COUNT_XOUT_T042_P  NUMBER := 0;
    VL_INS_T042        NUMBER := 0;
      --
    VL_PROGR_D_TA4410     NUMBER := 0;
    VL_COUNT_XOUT_TA4410         NUMBER := 0;
    VL_COUNT_XOUT_TA4410_P       NUMBER := 0;
    VL_INS_TA4410         NUMBER := 0;
    VL_INS_TA4410_P       NUMBER := 0;
      --
    VL_PROGR_D_T048    NUMBER := 0;
    VL_COUNT_XOUT_T048  NUMBER := 0;
    VL_COUNT_XOUT_T048_P  NUMBER := 0;
    VL_INS_T048        NUMBER := 0;
    --
    VL_PROGR_D_T045    NUMBER := 0;
    VL_COUNT_XOUT_T045  NUMBER := 0;
    VL_COUNT_XOUT_T045_P  NUMBER := 0;
    VL_INS_T045        NUMBER := 0;
    --
    VL_PROGR_D_T046    NUMBER := 0;
    VL_COUNT_XOUT_T046  NUMBER := 0;
    VL_COUNT_XOUT_T046_P  NUMBER := 0;
    VL_INS_T046        NUMBER := 0;
    --
    VL_PROGR_D_T047    NUMBER := 0;
    VL_COUNT_XOUT_T047  NUMBER := 0;
    VL_COUNT_XOUT_T047_P  NUMBER := 0;
    VL_INS_T047        NUMBER := 0;
    --
    VL_PROGR_D_T049    NUMBER := 0;
    VL_COUNT_XOUT_T049  NUMBER := 0;
    VL_COUNT_XOUT_T049_P  NUMBER := 0;
    VL_INS_T049        NUMBER := 0;
    --
    REC_XOUT_T040 XOUT_T040PARTY%ROWTYPE          := NULL;
    REC_XOUT_T041 XOUT_T041PARTYDIV%ROWTYPE       := NULL;
    REC_XOUT_T042 XOUT_T042PARTYADDR%ROWTYPE      := NULL;
    REC_XOUT_T048 XOUT_T048PARTYAMOUNT%ROWTYPE    := NULL;
    REC_XOUT_T045 XOUT_T045PARTYWEEK%ROWTYPE      := NULL;
    REC_XOUT_T046 XOUT_T046PARTYBANK%ROWTYPE      := NULL;
    REC_XOUT_T047 XOUT_T047PARTYCONTACT%ROWTYPE   := NULL;
    REC_XOUT_T049 XOUT_T049PVCATEGORY%ROWTYPE     := NULL;

    VL_STATUS  NUMBER:= 0;
    VL_ST_NOTE NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T040 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'CUSTOMER HEAD',
                                                'EXPORT --> T040PARTY',
                                                 0,
                                                 NULL);
    --
    VL_PROGR_D_T041 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'CUSTOMER DIV INFO',
                                                 'EXPORT --> T041PARTYDIV',
                                                  0,
                                                   NULL);
    --
    VL_PROGR_D_T042 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'CUSTOMER ADDR',
                                                 'EXPORT --> T042PARTYADDR',
                                                  0,
                                                  NULL);
 --
    VL_PROGR_D_TA4410 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'CUSTOMER NOTE',
                                                 'EXPORT --> TA4410NOTES',
                                                  0,
                                                  NULL);
  --
    VL_PROGR_D_T048 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'CUSTOMER CREDIT',
                                                 'EXPORT --> T048PARTYAMOUNT',
                                                  0,
                                                  NULL);

    VL_PROGR_D_T045 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'CUSTOMER WEEK PLAN',
                                                 'EXPORT --> T045PARTYWEEK',
                                                  0,
                                                  NULL);
 --
    VL_PROGR_D_T046 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'CUSTOMER BANK INFO',
                                                 'EXPORT --> T046PARTYBANK',
                                                  0,
                                                  NULL);
 --
    VL_PROGR_D_T047 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'CUSTOMER CONTACTS',
                                                 'EXPORT --> T047PARTYCONTACT',
                                                  0,
                                                  NULL);
 --
    VL_PROGR_D_T049 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'CUSTOMER PV CATEGORY',
                                                 'EXPORT --> T049PVCATEGORY',
                                                  0,
                                                  NULL);


    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T040, 'XOUT_T040PARTY', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T041, 'XOUT_T041PARTYDIV', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T042, 'XOUT_T042PARTYADDR', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA4410, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T048, 'XOUT_T048PARTYAMOUNT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T045, 'XOUT_T045PARTYWEEK', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T046, 'XOUT_T046PARTYBANK', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T047, 'XOUT_T047PARTYCONTACT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T049, 'XOUT_T049PVCATEGORY', VL_STATUS);
    --
    -- Moves already read by ERP records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T040, 'XOUT_T040PARTY', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T041, 'XOUT_T041PARTYDIV', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T042, 'XOUT_T042PARTYADDR', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA4410, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T048, 'XOUT_T048PARTYAMOUNT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T045, 'XOUT_T045PARTYWEEK', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T046, 'XOUT_T046PARTYBANK', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T047, 'XOUT_T047PARTYCONTACT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T049, 'XOUT_T049PVCATEGORY', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    --
    -- --------------------------------------------------------------
    -- Identifies Header table to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED
    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T040PARTY';

        UPDATE T040PARTY
        SET IDSESSIONLCK = PI_SESSION_ID,
            DTELCK         = XSYSDATE,
            CODUSRLCK      = C_SYSUSR
            WHERE not exists ( select null from T035LOGGEDUSERS T035 where T035.IDSESSION = NVL(IDSESSIONLCK, '@') AND T035.LASTCHECK > TRUNC(XSYSDATE)-1 ) and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        AND CODPARTY IN (SELECT DISTINCT CODPARTY FROM T041PARTYDIV WHERE --CODSTATUS='3' AND
        CODDIV IN ('DFI','MED','DDF','SYG')
        AND CODPAYMOD='CR'
        ) AND
        NVL(DTETOHOST,to_Date('30121899','ddmmyyyy')) = to_Date('30121899','ddmmyyyy');

        VL_COUNT_XOUT_T040 := SQL%ROWCOUNT;

    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking Header Table: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;


    -- --------------------------------------------------------------
    -- loops locked records in main table T040PARTY to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T040 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.CodParty='||R_LOCKED.CODPARTY||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T040,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T040PARTY
    -- --------------------------------------------------------------
    FOR RL_T040 IN CL_T040 LOOP

      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;

      --
      VL_MESSAGE_H :=   'Customer: '||RL_T040.CODPARTY;
      --
      BEGIN --- HEAD T040

        VL_MESSAGE_D := 'Delete XOUT_T040Party ';
        DElETE XOUT_T040PARTY WHERE CODPARTY = RL_T040.CODPARTY AND ERP_DTEPROCESS IS NULL;

        VL_MESSAGE_D := 'Insert XOUT_T040Party ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table
        REC_XOUT_T040.CODPARTY          :=RL_T040.CODPARTY;
        REC_XOUT_T040.DESPARTY1         :=RL_T040.DESPARTY1;
        REC_XOUT_T040.DESPARTY2         :=RL_T040.DESPARTY2;
        REC_XOUT_T040.CODSIGN           :=RL_T040.CODSIGN;
        REC_XOUT_T040.CODNIELSENAREA    :=RL_T040.CODNIELSENAREA;
        REC_XOUT_T040.CODZONE           :=RL_T040.CODZONE;
        REC_XOUT_T040.CODCHANNEL        :=RL_T040.CODCHANNEL;
        REC_XOUT_T040.CODFIS            :=RL_T040.CODFIS;
        REC_XOUT_T040.CODVAT            :=RL_T040.CODVAT;
        REC_XOUT_T040.CODVATINTRA       :=RL_T040.CODVATINTRA;
        REC_XOUT_T040.CODCAT1           :=RL_T040.CODCAT1;
        REC_XOUT_T040.CODCAT2           :=RL_T040.CODCAT2;
        REC_XOUT_T040.CODCAT3           :=RL_T040.CODCAT3;
        REC_XOUT_T040.CODCAT4           :=RL_T040.CODCAT4;
        REC_XOUT_T040.CODCAT5           :=RL_T040.CODCAT5;
        REC_XOUT_T040.CODNATGIU         :=RL_T040.CODNATGIU;
        REC_XOUT_T040.FLGCUSTINV        :=RL_T040.FLGCUSTINV;
        REC_XOUT_T040.CODVATCERT        :=RL_T040.CODVATCERT;
        REC_XOUT_T040.FLGCUSTDELIV      :=RL_T040.FLGCUSTDELIV;
        REC_XOUT_T040.CODMODINVOICE     :=RL_T040.CODMODINVOICE;
        REC_XOUT_T040.FLGCUSTSALE       :=RL_T040.FLGCUSTSALE;
        REC_XOUT_T040.FLGCUSTCONC       :=RL_T040.FLGCUSTCONC;
        REC_XOUT_T040.CODMODDELREP      :=RL_T040.CODMODDELREP;
        REC_XOUT_T040.CODCUSTINV        :=RL_T040.CODCUSTINV;
        REC_XOUT_T040.CODCUSTDELIV      :=RL_T040.CODCUSTDELIV;
        REC_XOUT_T040.CODCUSTCONC       :=RL_T040.CODCUSTCONC;
        REC_XOUT_T040.CODVATMGMT        :=RL_T040.CODVATMGMT;
        REC_XOUT_T040.CODCUR            :=RL_T040.CODCUR;
        REC_XOUT_T040.CODADJGROUP       :=RL_T040.CODADJGROUP;
        REC_XOUT_T040.VALCREDIT         :=RL_T040.VALCREDIT;
        REC_XOUT_T040.DTEMODCREDIT      :=RL_T040.DTEMODCREDIT;
        REC_XOUT_T040.DTECRE            :=RL_T040.DTECRE;
        REC_XOUT_T040.DTEMOD            :=RL_T040.DTEMOD;
        REC_XOUT_T040.DTETOHOST         :=RL_T040.DTETOHOST;
        REC_XOUT_T040.DTELCK            :=RL_T040.DTELCK;
        REC_XOUT_T040.CODUSRLCK         :=RL_T040.CODUSRLCK;
        REC_XOUT_T040.CODUSRMOD         :=RL_T040.CODUSRMOD;
        REC_XOUT_T040.FLGANN            :=RL_T040.FLGANN;
        REC_XOUT_T040.PGMMODCL          :=RL_T040.PGMMODCL;
        REC_XOUT_T040.PGMMODDB          :=RL_T040.PGMMODDB;
        REC_XOUT_T040.CODCUSTXTEL       :=RL_T040.CODCUSTXTEL;
        REC_XOUT_T040.IDSESSIONLCK      :=RL_T040.IDSESSIONLCK;
        REC_XOUT_T040.DTEVALIDSTART     :=RL_T040.DTEVALIDSTART;
        REC_XOUT_T040.PRGDELIVERY       :=RL_T040.PRGDELIVERY;
        REC_XOUT_T040.FLGVIRTUAL        :=RL_T040.FLGVIRTUAL;
        REC_XOUT_T040.DTETOSERVER       :=RL_T040.DTETOSERVER;
        REC_XOUT_T040.RIFERIMENTO_INTERNO :=RL_T040.RIFERIMENTO_INTERNO;
        REC_XOUT_T040.DTESTARTESENZIONE :=RL_T040.DTESTARTESENZIONE;
        REC_XOUT_T040.DTEENDESENZIONE   :=RL_T040.DTEENDESENZIONE;
        REC_XOUT_T040.NUMESENZIONE      :=RL_T040.NUMESENZIONE;
        REC_XOUT_T040.VALEXPOSED        :=RL_T040.VALEXPOSED;
        REC_XOUT_T040.FLGDTEORD         :=RL_T040.FLGDTEORD;
        REC_XOUT_T040.EMAIL             :=RL_T040.EMAIL;
        REC_XOUT_T040.CODCLUSTER        :=RL_T040.CODCLUSTER;
        REC_XOUT_T040.CODCLUSTERCUST    :=RL_T040.CODCLUSTERCUST;
        REC_XOUT_T040.CODCLUSTERINT     :=RL_T040.CODCLUSTERINT;
        REC_XOUT_T040.TOTSALESSURFACE   :=RL_T040.TOTSALESSURFACE;
        REC_XOUT_T040.TOTFOODSURFACE    :=RL_T040.TOTFOODSURFACE;
        REC_XOUT_T040.GLOBALINDEXPOT    :=RL_T040.GLOBALINDEXPOT;
        REC_XOUT_T040.NUMCASSE          :=RL_T040.NUMCASSE;
        REC_XOUT_T040.NUMCASSEATTR      :=RL_T040.NUMCASSEATTR;
        REC_XOUT_T040.NUMADDETTI        :=RL_T040.NUMADDETTI;
        REC_XOUT_T040.CODNIELSENPARTY   :=RL_T040.CODNIELSENPARTY;
        REC_XOUT_T040.DESCEDEC          :=RL_T040.DESCEDEC;
        REC_XOUT_T040.QTYLINEARI        :=RL_T040.QTYLINEARI;
        REC_XOUT_T040.TOTNONFOODSURFACE :=RL_T040.TOTNONFOODSURFACE;
        REC_XOUT_T040.FLGDOCTOR         :=RL_T040.FLGDOCTOR;
        REC_XOUT_T040.FLGSTRUCTURE      :=RL_T040.FLGSTRUCTURE;
        REC_XOUT_T040.CODACTIVITYDOTT :=RL_T040.CODACTIVITYDOTT;
        REC_XOUT_T040.CODDEGREE       :=RL_T040.CODDEGREE;
        REC_XOUT_T040.CODIMP          :=RL_T040.CODIMP;
        REC_XOUT_T040.CODOCCUPATION   :=RL_T040.CODOCCUPATION;
        REC_XOUT_T040.CODSPECIALIZATION   :=RL_T040.CODSPECIALIZATION;
        REC_XOUT_T040.CODSPECIALIZATION2  :=RL_T040.CODSPECIALIZATION2;
        REC_XOUT_T040.CODTYPESTRUCTURE    :=RL_T040.CODTYPESTRUCTURE;
        REC_XOUT_T040.FLGAPPOINTMENT      :=RL_T040.FLGAPPOINTMENT;
        REC_XOUT_T040.CODGENDER           :=RL_T040.CODGENDER;
        REC_XOUT_T040.DOCUMENTKEY         :=RL_T040.DOCUMENTKEY;
        REC_XOUT_T040.CODSEASON           :=RL_T040.CODSEASON;
        REC_XOUT_T040.CODSEASONSTART      :=RL_T040.CODSEASONSTART;
        REC_XOUT_T040.CODCLOSESTART       :=RL_T040.CODCLOSESTART;
        REC_XOUT_T040.CODCLOSEEND         :=RL_T040.CODCLOSEEND;
        REC_XOUT_T040.CODSEASONEND        :=RL_T040.CODSEASONEND;
        REC_XOUT_T040.CODUSRMODREAL       :=RL_T040.CODUSRMODREAL;
        REC_XOUT_T040.CODUSRCREREAL       :=RL_T040.CODUSRCREREAL;
        REC_XOUT_T040.FLGPHARMACY         :=RL_T040.FLGPHARMACY;
        REC_XOUT_T040.CODMINISTERIAL      :=RL_T040.CODMINISTERIAL;
        REC_XOUT_T040.CODTURNOVER         :=RL_T040.CODTURNOVER;
        REC_XOUT_T040.NUMWINDOWS          :=RL_T040.NUMWINDOWS;
        REC_XOUT_T040.CODPRESCRIPTION     :=RL_T040.CODPRESCRIPTION;
        REC_XOUT_T040.CODCOLLEGE          :=RL_T040.CODCOLLEGE;
        REC_XOUT_T040.CODOPINIONLEAD      :=RL_T040.CODOPINIONLEAD;
        REC_XOUT_T040.CODPUBBLICATION     :=RL_T040.CODPUBBLICATION;
        REC_XOUT_T040.CODPROFESSIONALMAGAZINE :=RL_T040.CODPROFESSIONALMAGAZINE;
        REC_XOUT_T040.FLGCUSTPAYER            :=RL_T040.FLGCUSTPAYER;
        REC_XOUT_T040.FLGCUSTBILLTO           :=RL_T040.FLGCUSTBILLTO;
        REC_XOUT_T040.CODCUSTPAYER            :=RL_T040.CODCUSTPAYER;
        REC_XOUT_T040.FLGPERSON               :=RL_T040.FLGPERSON;
        REC_XOUT_T040.CODTITLE                :=RL_T040.CODTITLE;
        REC_XOUT_T040.DESNOTE                 :=RL_T040.DESNOTE;

        REC_XOUT_T040.DTEBIRTHDAY             :=RL_T040.DTEBIRTHDAY;
        REC_XOUT_T040.FLGCUSTWHS              :=RL_T040.FLGCUSTWHS;
        REC_XOUT_T040.FLGCUSTVAN              :=RL_T040.FLGCUSTVAN;

        REC_XOUT_T040.Z_FLGEXTERNAL           :=RL_T040.Z_FLGEXTERNAL;
        --
        REC_XOUT_T040.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T040.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T040PARTY VALUES REC_XOUT_T040;



       EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T040,
                                           SQLCODE,
                                           VL_MESSAGE_H);
       END; -- HEAD T040

        -- -----------------------------------
        -- T041PARTYDIV DIVISION INFO
        -- -----------------------------------
        BEGIN
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Division info T041PARTYDIV

              VL_MESSAGE_D := 'Delete XOUT_T041PartyDiv ';
              DElETE XOUT_T041PARTYDIV WHERE CODPARTY = RL_T040.CODPARTY AND ERP_DTEPROCESS IS NULL;

              FOR RL_T041 IN CL_T041(RL_T040.CODPARTY) LOOP

              IF ( VL_STATUS = 0 ) THEN
               VL_MESSAGE_H := 'Customer: '|| RL_T041.CODPARTY || '/' ||
                               'Division: '|| RL_T041.CODDIV;



                 VL_MESSAGE_D := 'Insert XOUT_T041PartyDiv ';
                -- Here you can customize field elaboration
                -- the default is the xout has the same value of sm1 table
                REC_XOUT_T041.CODPARTY :=RL_T041.CODPARTY;
                REC_XOUT_T041.CODDIV :=RL_T041.CODDIV;
                REC_XOUT_T041.CODUSR1 :=RL_T041.CODUSR1;
                REC_XOUT_T041.CODPAYMOD :=RL_T041.CODPAYMOD;
                REC_XOUT_T041.CODPAYTRM :=RL_T041.CODPAYTRM;
                REC_XOUT_T041.CODABC :=RL_T041.CODABC;
                REC_XOUT_T041.CODASS :=RL_T041.CODASS;
                REC_XOUT_T041.FLGALTART :=RL_T041.FLGALTART;
                REC_XOUT_T041.CODSTATPARTY :=RL_T041.CODSTATPARTY;
                REC_XOUT_T041.CODSHIPPER :=RL_T041.CODSHIPPER;
                REC_XOUT_T041.FLGORDEREXTRACT :=RL_T041.FLGORDEREXTRACT;
                REC_XOUT_T041.CODBLCCAUSE :=RL_T041.CODBLCCAUSE;
                REC_XOUT_T041.FLGLINEEXTRACT :=RL_T041.FLGLINEEXTRACT;
                REC_XOUT_T041.CODSTATUS :=RL_T041.CODSTATUS;
                REC_XOUT_T041.MINORDVAL :=RL_T041.MINORDVAL;
                REC_XOUT_T041.MAXORDVAL :=RL_T041.MAXORDVAL;
                REC_XOUT_T041.VALSCO1 :=RL_T041.VALSCO1;
                REC_XOUT_T041.VALSCO2 :=RL_T041.VALSCO2;
                REC_XOUT_T041.VALSCO3 :=RL_T041.VALSCO3;
                REC_XOUT_T041.VALSCO4 :=RL_T041.VALSCO4;
                REC_XOUT_T041.VALSCO5 :=RL_T041.VALSCO5;
                REC_XOUT_T041.FLGACCBKORD :=RL_T041.FLGACCBKORD;
                REC_XOUT_T041.CODWHS :=RL_T041.CODWHS;
                REC_XOUT_T041.NUMTRASPDAYS :=RL_T041.NUMTRASPDAYS;
                REC_XOUT_T041.FLGACPSALPRICE :=RL_T041.FLGACPSALPRICE;
                REC_XOUT_T041.CODCATDIV1 :=RL_T041.CODCATDIV1;
                REC_XOUT_T041.CODCATDIV2 :=RL_T041.CODCATDIV2;
                REC_XOUT_T041.CODCATDIV3 :=RL_T041.CODCATDIV3;
                REC_XOUT_T041.CODCATDIV4 :=RL_T041.CODCATDIV4;
                REC_XOUT_T041.CODCATDIV5 :=RL_T041.CODCATDIV5;
                REC_XOUT_T041.CODUSR3 :=RL_T041.CODUSR3;
                REC_XOUT_T041.CODUSR2 :=RL_T041.CODUSR2;
                REC_XOUT_T041.CODUSR4 :=RL_T041.CODUSR4;
                REC_XOUT_T041.CODUSR6 :=RL_T041.CODUSR6;
                REC_XOUT_T041.CODUSR5 :=RL_T041.CODUSR5;
                REC_XOUT_T041.CODDISCLIS1 :=RL_T041.CODDISCLIS1;
                REC_XOUT_T041.CODDISCLIS2 :=RL_T041.CODDISCLIS2;
                REC_XOUT_T041.CODDISCLIS3 :=RL_T041.CODDISCLIS3;
                REC_XOUT_T041.CODDISCLIS4 :=RL_T041.CODDISCLIS4;
                REC_XOUT_T041.CODDISCLIS5 :=RL_T041.CODDISCLIS5;
                REC_XOUT_T041.CODMODSHIP :=RL_T041.CODMODSHIP;
                REC_XOUT_T041.CODMODDEL :=RL_T041.CODMODDEL;
                REC_XOUT_T041.CODENDUSERLIS :=RL_T041.CODENDUSERLIS;
                REC_XOUT_T041.CODDISCLISMAX :=RL_T041.CODDISCLISMAX;
                REC_XOUT_T041.CODDISCLISBLK :=RL_T041.CODDISCLISBLK;
                REC_XOUT_T041.CODLIST :=RL_T041.CODLIST;
                REC_XOUT_T041.FLGANN :=RL_T041.FLGANN;
                REC_XOUT_T041.QTYORDMIN :=RL_T041.QTYORDMIN;
                REC_XOUT_T041.QTYORDMAX :=RL_T041.QTYORDMAX;
                REC_XOUT_T041.UMORDQTY :=RL_T041.UMORDQTY;
                REC_XOUT_T041.CODSUBSTPARTY :=RL_T041.CODSUBSTPARTY;
                REC_XOUT_T041.DTEEND :=RL_T041.DTEEND;
                REC_XOUT_T041.CODSUPPLIER :=RL_T041.CODSUPPLIER;
                REC_XOUT_T041.CODUSRCORR :=RL_T041.CODUSRCORR;
                REC_XOUT_T041.CODSUPPLIER1 :=RL_T041.CODSUPPLIER1;
                REC_XOUT_T041.CODSUPPLIER2 :=RL_T041.CODSUPPLIER2;
                REC_XOUT_T041.COD_ATTR_PROIEZIONI :=RL_T041.COD_ATTR_PROIEZIONI;
                REC_XOUT_T041.CODTYPCONTE :=RL_T041.CODTYPCONTE;
                REC_XOUT_T041.CODTYPEVASION :=RL_T041.CODTYPEVASION;
                REC_XOUT_T041.FLAG_BLOCK_LIQ :=RL_T041.FLAG_BLOCK_LIQ;
                REC_XOUT_T041.EC_AGENTE :=RL_T041.EC_AGENTE;
                REC_XOUT_T041.CODSTOREFORMAT :=RL_T041.CODSTOREFORMAT;
                REC_XOUT_T041.CODCUSTDELIV :=RL_T041.CODCUSTDELIV;
                REC_XOUT_T041.CODCUSTDELIV2 :=RL_T041.CODCUSTDELIV2;
                REC_XOUT_T041.FLGASSOVERIFY :=RL_T041.FLGASSOVERIFY;
                REC_XOUT_T041.FLGPROMOVERIFY :=RL_T041.FLGPROMOVERIFY;
                REC_XOUT_T041.CODPANEL :=RL_T041.CODPANEL;
                REC_XOUT_T041.INDEXPOT :=RL_T041.INDEXPOT;
                REC_XOUT_T041.CODDISCLIS6 :=RL_T041.CODDISCLIS6;
                REC_XOUT_T041.CODDISCLIS7 :=RL_T041.CODDISCLIS7;
                REC_XOUT_T041.FLGAUTH :=RL_T041.FLGAUTH;
                REC_XOUT_T041.DTESUBSTPARTY :=RL_T041.DTESUBSTPARTY;
                REC_XOUT_T041.CODVISITFREQUENCE :=RL_T041.CODVISITFREQUENCE;
                REC_XOUT_T041.CODCLUSTER :=RL_T041.CODCLUSTER;
                REC_XOUT_T041.CODCLUSTERCUST :=RL_T041.CODCLUSTERCUST;
                REC_XOUT_T041.CODCLUSTERINT :=RL_T041.CODCLUSTERINT;
                REC_XOUT_T041.FLGENCASHMENT :=RL_T041.FLGENCASHMENT;
                REC_XOUT_T041.IDEVALASSORTMENT :=RL_T041.IDEVALASSORTMENT;
                REC_XOUT_T041.IDEVALPRICELIST :=RL_T041.IDEVALPRICELIST;
                REC_XOUT_T041.IDEVALDISCOUNTLIST :=RL_T041.IDEVALDISCOUNTLIST;
                REC_XOUT_T041.DTEEVALASSO :=RL_T041.DTEEVALASSO;
                REC_XOUT_T041.CODUSR1ERP :=RL_T041.CODUSR1ERP;
                REC_XOUT_T041.CODPARTY_CLUSTER :=RL_T041.CODPARTY_CLUSTER;
                REC_XOUT_T041.CODLEV_CLUSTER :=RL_T041.CODLEV_CLUSTER;
                REC_XOUT_T041.CODHIER_CLUSTER :=RL_T041.CODHIER_CLUSTER;
                REC_XOUT_T041.CODASSORTMENTTYPE_CLUSTER :=RL_T041.CODASSORTMENTTYPE_CLUSTER;

                REC_XOUT_T041.FLG_DSD_PRINT_PRICES :=RL_T041.FLG_DSD_PRINT_PRICES;
                REC_XOUT_T041.FLG_DSD_BLK_PAYTRM :=RL_T041.FLG_DSD_BLK_PAYTRM;
                REC_XOUT_T041.DSD_CODBLK_VALCREDIT :=RL_T041.DSD_CODBLK_VALCREDIT;
                REC_XOUT_T041.FLG_DSD_PAPARLESS :=RL_T041.FLG_DSD_PAPARLESS;
                REC_XOUT_T041.CODAVAILABILITY :=RL_T041.CODAVAILABILITY;
                REC_XOUT_T041.CODPAYMOD2 :=RL_T041.CODPAYMOD2;
                REC_XOUT_T041.CODPAYTRM2 :=RL_T041.CODPAYTRM2;
                REC_XOUT_T041.Z_SERVMODE :=RL_T041.Z_SERVMODE;
                REC_XOUT_T041.Z_CODGROUP :=RL_T041.Z_CODGROUP;
                REC_XOUT_T041.Z_FLGCONSUMER :=RL_T041.Z_FLGCONSUMER;
                REC_XOUT_T041.Z_NUMKIDS :=RL_T041.Z_NUMKIDS;
                REC_XOUT_T041.Z_FLGPERSTORE :=RL_T041.Z_FLGPERSTORE;
                REC_XOUT_T041.Z_FLGPRBLMSTORE :=RL_T041.Z_FLGPRBLMSTORE;
                REC_XOUT_T041.Z_CLASS1 :=RL_T041.Z_CLASS1;
                REC_XOUT_T041.Z_CLASS2 :=RL_T041.Z_CLASS2;
                REC_XOUT_T041.Z_FLGSUPERVISORCHK :=RL_T041.Z_FLGSUPERVISORCHK;
                REC_XOUT_T041.Z_MARITALSTATUS :=RL_T041.Z_MARITALSTATUS;

                REC_XOUT_T041.Z_CONTACTEDBEFORE :=RL_T041.Z_CONTACTEDBEFORE;
                REC_XOUT_T041.Z_DTECONTACTED :=RL_T041.Z_DTECONTACTED;

                --
                REC_XOUT_T041.SM1_DTEPROCESS := REC_XOUT_T040.SM1_DTEPROCESS;
                REC_XOUT_T041.SM1_CODPROCESS := REC_XOUT_T040.SM1_CODPROCESS;

                INSERT INTO XOUT_T041PARTYDIV VALUES REC_XOUT_T041;

                VL_INS_T041 := VL_INS_T041 + 1;

           --
           -- T045PARTYWEEK
           --

           IF ( VL_STATUS = 0 ) THEN
           BEGIN
            VL_MESSAGE_D := 'Delete XOUT_T045PartyWeek ';
            DElETE XOUT_T045PARTYWEEK WHERE CODPARTY = RL_T041.CODPARTY AND CODDIV = RL_T041.CODDIV AND ERP_DTEPROCESS IS NULL;

            FOR RL_T045 IN CL_T045(RL_T041.CODPARTY, RL_T041.CODDIV) LOOP


             IF ( VL_STATUS = 0 ) THEN

                VL_MESSAGE_H := 'Weekly Plan Info: '|| RL_T045.CODPARTY || '/' ||
                                                       RL_T045.CODDIV   || '/' ||
                                                       RL_T045.CODPLAN;

                VL_MESSAGE_D := 'Insert XOUT_T045PartyWeek ';
                -- Here you can customize field elaboration
                -- the default is the xout has the same value of sm1 table

                REC_XOUT_T045.CODPARTY :=RL_T045.CODPARTY;
                REC_XOUT_T045.CODDIV  :=RL_T045.CODDIV;
                REC_XOUT_T045.CODPLAN :=RL_T045.CODPLAN;
                REC_XOUT_T045.DESMON :=RL_T045.DESMON;
                REC_XOUT_T045.DESTUE :=RL_T045.DESTUE;
                REC_XOUT_T045.DESWED :=RL_T045.DESWED;
                REC_XOUT_T045.DESTHU :=RL_T045.DESTHU;
                REC_XOUT_T045.DESFRI :=RL_T045.DESFRI;
                REC_XOUT_T045.DESSAT :=RL_T045.DESSAT;
                REC_XOUT_T045.DESSUN :=RL_T045.DESSUN;
                REC_XOUT_T045.DTEMOD :=RL_T045.DTEMOD;
                REC_XOUT_T045.FLGANN :=RL_T045.FLGANN;
                --
                REC_XOUT_T045.SM1_DTEPROCESS := REC_XOUT_T040.SM1_DTEPROCESS;
                REC_XOUT_T045.SM1_CODPROCESS := REC_XOUT_T040.SM1_CODPROCESS;

                INSERT INTO XOUT_T045PARTYWEEK VALUES REC_XOUT_T045;

                VL_INS_T045 := VL_INS_T045 + 1;
             END IF;

           VL_COUNT_XOUT_T045_P := CL_T045%ROWCOUNT;
           END LOOP; -- T045PARTYWEEK
           VL_COUNT_XOUT_T045 := VL_COUNT_XOUT_T045 + VL_COUNT_XOUT_T045_P;
           VL_COUNT_XOUT_T045_P := 0;
           --
           EXCEPTION WHEN OTHERS THEN
                 VL_STATUS := -1;
                 VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

                 PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                               VL_PROGR_D_T045,
                                               SQLCODE,
                                               VL_MESSAGE_H);
           END; -- T045

           END IF; -- STATUS


            --
            -- T046PARTYBANK
            --

            IF ( VL_STATUS = 0 ) THEN
            BEGIN
            VL_MESSAGE_D := 'Delete XOUT_T046PARTYBANK ';
            DElETE XOUT_T046PARTYBANK WHERE CODPARTY = RL_T041.CODPARTY AND CODDIV = RL_T041.CODDIV AND ERP_DTEPROCESS IS NULL;

            FOR RL_T046 IN CL_T046(RL_T041.CODPARTY, RL_T041.CODDIV) LOOP

             IF ( VL_STATUS = 0 ) THEN

               VL_MESSAGE_H := 'Bank Info Customer: '|| RL_T046.CODPARTY || '/' ||
                               'Division: '||RL_T046.CODDIV   || '/' ||
                               'ABI code: '||RL_T046.CODABI   || '/' ||
                               'CAB code: '||RL_T046.CODCAB;

               VL_MESSAGE_D := 'Insert XOUT_T046PARTYBANK  ';
                -- Here you can customize field elaboration
                -- the default is the xout has the same value of sm1 table

                REC_XOUT_T046.CODPARTY :=RL_T046.CODPARTY;
                REC_XOUT_T046.CODDIV :=RL_T046.CODDIV;
                REC_XOUT_T046.CODABI :=RL_T046.CODABI;
                REC_XOUT_T046.CODCAB :=RL_T046.CODCAB;
                REC_XOUT_T046.DESBAN :=RL_T046.DESBAN;
                REC_XOUT_T046.DESBRA :=RL_T046.DESBRA;
                REC_XOUT_T046.DESADDR :=RL_T046.DESADDR;
                REC_XOUT_T046.DESLOC :=RL_T046.DESLOC;
                REC_XOUT_T046.DESPRV :=RL_T046.DESPRV;
                REC_XOUT_T046.CODPRV :=RL_T046.CODPRV;
                REC_XOUT_T046.CODACCOUNT :=RL_T046.CODACCOUNT;
                REC_XOUT_T046.CODCONTROL :=RL_T046.CODCONTROL;
                REC_XOUT_T046.CODCIN :=RL_T046.CODCIN;
                REC_XOUT_T046.CODIBAN :=RL_T046.CODIBAN;
                REC_XOUT_T046.CODSWIFT :=RL_T046.CODSWIFT;
                --
                REC_XOUT_T046.SM1_DTEPROCESS := REC_XOUT_T040.SM1_DTEPROCESS;
                REC_XOUT_T046.SM1_CODPROCESS := REC_XOUT_T040.SM1_CODPROCESS;

                INSERT INTO XOUT_T046PARTYBANK VALUES REC_XOUT_T046;

                VL_INS_T046 := VL_INS_T046 + 1;
              END IF;

              VL_COUNT_XOUT_T046_P :=  CL_T046%ROWCOUNT;
              END LOOP; -- T046PARTYBANK
              VL_COUNT_XOUT_T046 := VL_COUNT_XOUT_T046 + VL_COUNT_XOUT_T046_P;
              VL_COUNT_XOUT_T046_P := 0;

            EXCEPTION WHEN OTHERS THEN
                   VL_STATUS := -1;
                   VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

                   PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                 VL_PROGR_D_T046,
                                                 SQLCODE,
                                                 VL_MESSAGE_H);
            END; -- T046

            END IF; -- VL_STATUS = 0 T046PARTYBANK
            --
            -- T047PARTYCONTACT
            --
            IF ( VL_STATUS = 0 ) THEN
            BEGIN

            VL_MESSAGE_D := 'Delete XOUT_T047PARTYCONTACT ';
            DElETE XOUT_T047PARTYCONTACT WHERE CODPARTY = RL_T041.CODPARTY AND CODDIV = RL_T041.CODDIV AND ERP_DTEPROCESS IS NULL;

            FOR RL_T047 IN CL_T047(RL_T041.CODPARTY, RL_T041.CODDIV) LOOP


             IF ( VL_STATUS = 0 ) THEN
                 VL_MESSAGE_H := 'Contact Info. Customer: '|| RL_T047.CODPARTY || '/' ||
                                'Division: '   ||RL_T047.CODDIV   || '/' ||
                                'Contact code:'||RL_T047.CODPER   || '/' ||
                                                RL_T047.CODASSOC;

                   VL_MESSAGE_D := 'Insert XOUT_T047PARTYCONTACT  ';
                  -- Here you can customize field elaboration
                  -- the default is the xout has the same value of sm1 table

                  REC_XOUT_T047.CODPARTY :=RL_T047.CODPARTY;
                  REC_XOUT_T047.CODDIV :=RL_T047.CODDIV;
                  REC_XOUT_T047.CODPER :=RL_T047.CODPER;
                  REC_XOUT_T047.DTEFROM :=RL_T047.DTEFROM;
                  REC_XOUT_T047.DTETO :=RL_T047.DTETO;
                  REC_XOUT_T047.CODROLE1 :=RL_T047.CODROLE1;
                  REC_XOUT_T047.CODROLE2 :=RL_T047.CODROLE2;
                  REC_XOUT_T047.CODROLE3 :=RL_T047.CODROLE3;
                  REC_XOUT_T047.FLGPRIMARY :=RL_T047.FLGPRIMARY;
                  REC_XOUT_T047.DESNOTE :=RL_T047.DESNOTE;
                  REC_XOUT_T047.CODSTATUS :=RL_T047.CODSTATUS;
                  REC_XOUT_T047.DTEMOD :=RL_T047.DTEMOD;
                  REC_XOUT_T047.CODASSOC :=RL_T047.CODASSOC;
                   --
                  REC_XOUT_T047.SM1_DTEPROCESS := REC_XOUT_T040.SM1_DTEPROCESS;
                  REC_XOUT_T047.SM1_CODPROCESS := REC_XOUT_T040.SM1_CODPROCESS;

                  INSERT INTO XOUT_T047PARTYCONTACT VALUES REC_XOUT_T047;


                VL_INS_T047 := VL_INS_T047 + 1;
                --
                END IF;

              VL_COUNT_XOUT_T047_P :=  CL_T047%ROWCOUNT;
              END LOOP; -- T047PARTYCONTACT
              VL_COUNT_XOUT_T047 := VL_COUNT_XOUT_T047 + VL_COUNT_XOUT_T047_P;
              VL_COUNT_XOUT_T047_P := 0;

            EXCEPTION WHEN OTHERS THEN
                 VL_STATUS := -1;
                 VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

                 PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                               VL_PROGR_D_T047,
                                               SQLCODE,
                                               VL_MESSAGE_H);

            END; -- T047


            END IF; -- VL_STATUS = 0 T047PARTYCONTACT
            --
            -- T049PVCATEGORY ONLY FOR SALE POINTS
            --
            IF ( VL_STATUS = 0 ) THEN
            BEGIN

            VL_MESSAGE_D := 'Delete XOUT_T049PVCATEGORY ';
            DElETE XOUT_T049PVCATEGORY WHERE CODPARTY = RL_T041.CODPARTY AND CODDIV = RL_T041.CODDIV AND ERP_DTEPROCESS IS NULL;

              FOR RL_T049 IN CL_T049(RL_T041.CODPARTY, RL_T041.CODDIV) LOOP

              IF ( VL_STATUS = 0 ) THEN

               VL_MESSAGE_H := 'Category Info. Customer: '|| RL_T049.CODPARTY    || '/' ||
                               'Division: '     ||RL_T049.CODDIV      || '/' ||
                               'Category code: '||RL_T049.CODCATEGORY || '/' ||
                               'Cluster code: ' ||RL_T049.CODCLUSTERCUST;

               VL_MESSAGE_D := 'Insert XOUT_T049PVCATEGORY  ';
               -- Here you can customize field elaboration
               -- the default is the xout has the same value of sm1 table

                REC_XOUT_T049.CODPARTY :=RL_T049.CODPARTY;
                REC_XOUT_T049.CODDIV :=RL_T049.CODDIV;
                REC_XOUT_T049.CODCATEGORY :=RL_T049.CODCATEGORY;
                REC_XOUT_T049.INDEXPOT :=RL_T049.INDEXPOT;
                REC_XOUT_T049.CODCATEGORYROLE :=RL_T049.CODCATEGORYROLE;
                REC_XOUT_T049.QTYLINEARI :=RL_T049.QTYLINEARI;
                REC_XOUT_T049.NUMAVANCASSE :=RL_T049.NUMAVANCASSE;
                REC_XOUT_T049.CODVISITFREQUENCE :=RL_T049.CODVISITFREQUENCE;
                REC_XOUT_T049.CODCLUSTERCUST :=RL_T049.CODCLUSTERCUST;
                REC_XOUT_T049.CODCLUSTER :=RL_T049.CODCLUSTER;
                REC_XOUT_T049.CODCLUSTERINT :=RL_T049.CODCLUSTERINT;
                REC_XOUT_T049.CODPARTY_CLUSTER :=RL_T049.CODPARTY_CLUSTER;
                REC_XOUT_T049.CODLEV_CLUSTER :=RL_T049.CODLEV_CLUSTER;
                REC_XOUT_T049.CODHIER_CLUSTER :=RL_T049.CODHIER_CLUSTER;
                REC_XOUT_T049.CODASSORTMENTTYPE_CLUSTER :=RL_T049.CODASSORTMENTTYPE_CLUSTER;
                --
                REC_XOUT_T049.SM1_DTEPROCESS := REC_XOUT_T040.SM1_DTEPROCESS;
                REC_XOUT_T049.SM1_CODPROCESS := REC_XOUT_T040.SM1_CODPROCESS;

                INSERT INTO XOUT_T049PVCATEGORY VALUES REC_XOUT_T049;


                VL_INS_T049 := VL_INS_T049 + 1;

                --
                END IF;
               VL_COUNT_XOUT_T049_P := CL_T049%ROWCOUNT;
               END LOOP; -- T049PVCATEGORY
               VL_COUNT_XOUT_T049 := VL_COUNT_XOUT_T049 + VL_COUNT_XOUT_T049_P;
               VL_COUNT_XOUT_T049_P := 0;

             EXCEPTION WHEN OTHERS THEN
                 VL_STATUS := -1;
                 VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

                 PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                               VL_PROGR_D_T049,
                                               SQLCODE,
                                               VL_MESSAGE_H);
              END; -- T049
        END IF; -- VL_STATUS = 0 T049PVCATEGORY

      --- ---------------------------------
      --- T048PARTYAMOUNT CUSTOMER CREDIT INFO
      --- ---------------------------------

      BEGIN -- T048PARTYAMOUNT CUSTOMER CREDIT INFO

        IF ( VL_STATUS = 0 ) THEN

              VL_MESSAGE_D := 'Delete XOUT_T048PARTYAMOUNT  ';
              DElETE XOUT_T048PARTYAMOUNT  WHERE CODPARTY = RL_T041.CODPARTY AND CODDIV = RL_T041.CODDIV AND ERP_DTEPROCESS IS NULL;

              FOR RL_T048 IN CL_T048(RL_T041.CODPARTY, RL_T041.CODDIV) LOOP
              --
                  VL_MESSAGE_H := 'Customer Credit: '|| RL_T048.CODPARTY || '/' ||
                                  'Coddiv: '||RL_T048.CODDIV;

                  VL_MESSAGE_D := 'Insert XOUT_T048PARTYAMOUNT  ';
                  -- Here you can customize field elaboration
                  -- the default is the xout has the same value of sm1 table

                  REC_XOUT_T048.CODPARTY :=RL_T048.CODPARTY;
                  REC_XOUT_T048.VALORDERED :=RL_T048.VALORDERED;
                  REC_XOUT_T048.VALDELIVERED :=RL_T048.VALDELIVERED;
                  REC_XOUT_T048.VALMATURED :=RL_T048.VALMATURED;
                  REC_XOUT_T048.VALNOTMATURED :=RL_T048.VALNOTMATURED;
                  REC_XOUT_T048.VALEXPOSED :=RL_T048.VALEXPOSED;
                  REC_XOUT_T048.DTEMOD :=RL_T048.DTEMOD;
                  REC_XOUT_T048.CODDIV :=RL_T048.CODDIV;
                  REC_XOUT_T048.DTEVALIDCREDIT :=RL_T048.DTEVALIDCREDIT;
                  REC_XOUT_T048.VALCREDIT :=RL_T048.VALCREDIT;
                  REC_XOUT_T048.DTEMODCREDIT :=RL_T048.DTEMODCREDIT;
                  REC_XOUT_T048.VALORDEREDX :=RL_T048.VALORDEREDX;
                  REC_XOUT_T048.DTEMODORDERDX :=RL_T048.DTEMODORDERDX;
                  REC_XOUT_T048.DTELASTCHECK :=RL_T048.DTELASTCHECK;
                  REC_XOUT_T048.VALDELTA :=RL_T048.VALDELTA;
                  REC_XOUT_T048.AVGDAYSPAYRETARD :=RL_T048.AVGDAYSPAYRETARD;
                  REC_XOUT_T048.AVGDAYSOPENRETARD :=RL_T048.AVGDAYSOPENRETARD;
                  REC_XOUT_T048.DTEMAXCONT :=RL_T048.DTEMAXCONT;
                  REC_XOUT_T048.CODMAXCONT :=RL_T048.CODMAXCONT;
                  --
                  REC_XOUT_T048.SM1_DTEPROCESS := REC_XOUT_T040.SM1_DTEPROCESS;
                  REC_XOUT_T048.SM1_CODPROCESS := REC_XOUT_T040.SM1_CODPROCESS;

                  INSERT INTO XOUT_T048PARTYAMOUNT VALUES REC_XOUT_T048;

                  VL_INS_T048 := VL_INS_T048 + 1;

                --
              VL_COUNT_XOUT_T048_P := CL_T048%ROWCOUNT;
              END LOOP;  --- T048
              VL_COUNT_XOUT_T048 := VL_COUNT_XOUT_T048 + VL_COUNT_XOUT_T048_P;
              VL_COUNT_XOUT_T048_P := 0;

      END IF; --( VL_STATUS = 0 )
        --
      EXCEPTION
        WHEN OTHERS THEN
           VL_STATUS := -1;
           VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

           PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T048,
                                           SQLCODE,
                                           VL_MESSAGE_H);

      END; ---CREDIT T048

      END IF; -- VL_STATUS = 0 T041PARTYDIV
      VL_COUNT_XOUT_T041_P :=  CL_T041%ROWCOUNT;
      END LOOP; -- T041
      VL_COUNT_XOUT_T041 := VL_COUNT_XOUT_T041 + VL_COUNT_XOUT_T041_P;
      VL_COUNT_XOUT_T041_P := 0;


      END IF; --( VL_STATUS = 0 AND VL_RECORD_LOCKED = 0 )
        --
      EXCEPTION
        WHEN OTHERS THEN
           VL_STATUS := -1;
           VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

           PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T041,
                                           SQLCODE,
                                           VL_MESSAGE_H);

      END; --- DIVISION INFO T041

      --- ---------------------------------
      --- T042PARTYADDR CUSTOMER ADDRESSES
      --- ---------------------------------

      BEGIN -- ADDRESSES T042PARTYADDR

        IF ( VL_STATUS = 0 ) THEN
              -- ADDR

              VL_MESSAGE_D := 'Delete XOUT_T042PARTYADDR ';
              DElETE XOUT_T042PARTYADDR WHERE CODPARTY = RL_T040.CODPARTY AND ERP_DTEPROCESS IS NULL;

              FOR RL_T042 IN CL_T042(RL_T040.CODPARTY) LOOP
              --
                  VL_MESSAGE_H := 'Address. Customer: '|| RL_T042.CODPARTY || '/' ||
                                  'Adr Code: '||RL_T042.CODADDR;

                  VL_MESSAGE_D := 'Insert XOUT_T042PARTYADDR  ';
                  -- Here you can customize field elaboration
                  -- the default is the xout has the same value of sm1 table


                  REC_XOUT_T042.CODPARTY :=RL_T042.CODPARTY;
                  REC_XOUT_T042.CODADDR :=RL_T042.CODADDR;
                  REC_XOUT_T042.DESADDR1 :=RL_T042.DESADDR1;
                  REC_XOUT_T042.DESADDR2 :=RL_T042.DESADDR2;
                  REC_XOUT_T042.DESLOC1 :=RL_T042.DESLOC1;
                  REC_XOUT_T042.DESLOC2 :=RL_T042.DESLOC2;
                  REC_XOUT_T042.NUMPHONE1 :=RL_T042.NUMPHONE1;
                  REC_XOUT_T042.NUMPHONE2 :=RL_T042.NUMPHONE2;
                  REC_XOUT_T042.NUMFAX1 :=RL_T042.NUMFAX1;
                  REC_XOUT_T042.NUMFAX2 :=RL_T042.NUMFAX2;
                  REC_XOUT_T042.CODZIP :=RL_T042.CODZIP;
                  REC_XOUT_T042.CODPRV :=RL_T042.CODPRV;
                  REC_XOUT_T042.CODAREA :=RL_T042.CODAREA;
                  REC_XOUT_T042.CODZONE :=RL_T042.CODZONE;
                  REC_XOUT_T042.CODNATION :=RL_T042.CODNATION;
                  REC_XOUT_T042.EMAIL1 :=RL_T042.EMAIL1;
                  REC_XOUT_T042.WEBSITE1 :=RL_T042.WEBSITE1;
                  REC_XOUT_T042.WEBSITE2 :=RL_T042.WEBSITE2;
                  REC_XOUT_T042.CODTYPADDR :=RL_T042.CODTYPADDR;
                  REC_XOUT_T042.VALLATITUDE :=RL_T042.VALLATITUDE;
                  REC_XOUT_T042.VALLONGITUDE :=RL_T042.VALLONGITUDE;
                  --
                  REC_XOUT_T042.SM1_DTEPROCESS := REC_XOUT_T040.SM1_DTEPROCESS;
                  REC_XOUT_T042.SM1_CODPROCESS := REC_XOUT_T040.SM1_CODPROCESS;

                  INSERT INTO XOUT_T042PARTYADDR VALUES REC_XOUT_T042;

                  VL_INS_T042 := VL_INS_T042 + 1;

                --
              VL_COUNT_XOUT_T042_P :=  CL_T042%ROWCOUNT;
              END LOOP;  --- T042PARTY ADDR
              VL_COUNT_XOUT_T042 := VL_COUNT_XOUT_T042 + VL_COUNT_XOUT_T042_P;
              VL_COUNT_XOUT_T042_P := 0;

      END IF; --( VL_STATUS = 0 )
        --
      EXCEPTION
        WHEN OTHERS THEN
           VL_STATUS := -1;
           VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

           PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T042,
                                           SQLCODE,
                                           VL_MESSAGE_H);

      END; --- ADDRESSES T042

      -- NOTES
      EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA4410, RL_T040.DOCUMENTKEY, REC_XOUT_T040.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_NOTE, VL_INS_TA4410_P, VL_COUNT_XOUT_TA4410_P );
      VL_INS_TA4410 := VL_INS_TA4410 + VL_INS_TA4410_P;
      VL_COUNT_XOUT_TA4410 := VL_COUNT_XOUT_TA4410 + VL_COUNT_XOUT_TA4410_P;


      -- if all records have been stored with success then it makes the commit
      -- SET DTETOHOST
      IF VL_STATUS = 0 THEN
         VL_INS_T040 := VL_INS_T040 + 1;

         UPDATE T040PARTY
         SET    DTETOHOST = REC_XOUT_T040.SM1_DTEPROCESS,
                DTELCK          = NULL,
                IDSESSIONLCK    = NULL,
                CODUSRLCK       = NULL
         WHERE  CODPARTY  = REC_XOUT_T040.CODPARTY;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Releases Record
        UPDATE T040PARTY
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE CODPARTY     = REC_XOUT_T040.CODPARTY;

        COMMIT;
      END IF;


    END LOOP;  -- T040PARTY


   -- Close Logs

    --
     PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T049,
                                      0,
                                      VL_COUNT_XOUT_T049,
                                      VL_INS_T049,
                                      VL_COUNT_XOUT_T049 - VL_INS_T049);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T047,
                                      0,
                                      VL_COUNT_XOUT_T047,
                                      VL_INS_T047,
                                      VL_COUNT_XOUT_T047 - VL_INS_T047);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T046,
                                      0,
                                      VL_COUNT_XOUT_T046,
                                      VL_INS_T046,
                                      VL_COUNT_XOUT_T046 - VL_INS_T046);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T045,
                                      0,
                                      VL_COUNT_XOUT_T045,
                                      VL_INS_T045,
                                      VL_COUNT_XOUT_T045 - VL_INS_T045);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T048,
                                      0,
                                      VL_COUNT_XOUT_T048,
                                      VL_INS_T048,
                                      VL_COUNT_XOUT_T048 - VL_INS_T048);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T042,
                                      0,
                                      VL_COUNT_XOUT_T042,
                                      VL_INS_T042,
                                      VL_COUNT_XOUT_T042 - VL_INS_T042);
    --
   PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA4410,
                                      0,
                                      VL_COUNT_XOUT_TA4410,
                                      VL_INS_TA4410,
                                      VL_COUNT_XOUT_TA4410-VL_INS_TA4410);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T041,
                                      0,
                                      VL_COUNT_XOUT_T041,
                                      VL_INS_T041,
                                      VL_COUNT_XOUT_T041 - VL_INS_T041);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T040,
                                      0,
                                      VL_COUNT_XOUT_T040,
                                      VL_INS_T040,
                                      VL_COUNT_XOUT_T040 - VL_INS_T040);


    PO_MSG    := VL_INS_T040||'/'||VL_COUNT_XOUT_T040||' Customers Exported';
    PO_STATUS := VL_INS_T040;


    --
  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T040,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T040PARTY
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T040,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T04X_CUSTOMERS;
  --



 /*============================================================================*\
  /* Name: EXP_T06X_PRODUCTS
     Exports SM1 tables:
        •  T060ARTICLE - product master data
        •  T062UMCONV  - product unit of measure
        •  T064PARTLIST - Kit - product components list
        •  T078WHSBALANCE -  Warehouse products stock
        •
        Staging Area (SSA) tables
        •  XOUT_T078WHSBALANCE
        •  XOUT_T062UMCONV
        •  XOUT_T064PARTLIST
        •  XOUT_T060ARTICLE
        Before exporting it :
        •  cleans old records from XOUT_LOG table
        •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

        Export logic:
        •  exports all records not locked by SM1 User that have field T060ARTICLE.DTETOHOST set to NULL or lower than last modified data (T060ARTICLE.DTEMOD)
        •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
        •  deletes records on XOUT table already present that havn't been already read by ERP
        •  Inserts records into XOUT table from SM1 table
        •  Commits each T060ARTICLE.CODART/T060ARTICLE.CODDIV block of information
        •  Set date T060ARTICLE.DTETOHOST into SM1 header table

              Error handling:
              •  All Errors will be logged in T852/T854 SM1 log tables
              •  Error on record, header and all details are discarded

        Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID    - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'  wihout any check on DTETOHOST
                             PI_MASSIVE_EXP_DATE:  NULL - normal export (DTEMOD>DTETOHOST or DTETOHOST is null)
                                                   NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE without any check on DTETOHOST

     Author : Mariangela Bandiera
     Creation Date : 21 November 2012
     ----
     Updates :


    ============================================================================ */

  PROCEDURE EXP_T06X_PRODUCTS(PI_PROGR_H      IN NUMBER,
                          PI_SESSION_ID       IN NUMBER,
                          PI_DOCUMENTKEY      IN VARCHAR2,
                          PI_MASSIVE_EXP_DATE IN DATE,
                          PO_MSG           OUT VARCHAR,
                          PO_STATUS        OUT NUMBER ) IS
    --
    -- Cursor on main Product table
    --
    CURSOR CL_T060 IS
      SELECT
         *

        FROM  T060ARTICLE
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY CODART, CODDIV ASC;

    --
    -- Unit Measure
    --
    CURSOR CL_T062(CI_CODART VARCHAR2, CI_CODDIV VARCHAR2) IS
      SELECT *
        FROM T062UMCONV
       WHERE CODART = CI_CODART
         AND CODDIV = CI_CODDIV;

    --
    -- KIT
    --
    CURSOR CL_T064(CI_CODART VARCHAR2, CI_CODDIV VARCHAR2) IS
      SELECT  *
        FROM T064PARTLIST
       WHERE CODART = CI_CODART
         AND CODDIV = CI_CODDIV;
    --
    -- Warehouse
    --
    CURSOR CL_T078(CI_CODART VARCHAR2, CI_CODDIV VARCHAR2) IS
      SELECT  *
        FROM T078WHSBALANCE
       WHERE CODART = CI_CODART
         AND CODDIV = CI_CODDIV;


    -- -----------------------------------------
    -- Cursor on main Product table T060ARTICLE where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T060 IS
      SELECT CODART, CODDIV, DTELCK, CODUSRLCK
        FROM  T060ARTICLE
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY CODART, CODDIV ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting PRODUCTS T06X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T060    NUMBER := 0;
    VL_COUNT_XOUT_T060 NUMBER := 0;
    VL_INS_T060        NUMBER := 0;
    --
    VL_PROGR_D_T062    NUMBER := 0;
    VL_COUNT_XOUT_T062 NUMBER := 0;
    VL_COUNT_XOUT_T062_P NUMBER := 0;
    VL_INS_T062        NUMBER := 0;
     --
    VL_PROGR_D_T064    NUMBER := 0;
    VL_COUNT_XOUT_T064 NUMBER := 0;
    VL_COUNT_XOUT_T064_P NUMBER := 0;
    VL_INS_T064        NUMBER := 0;
     --
    VL_PROGR_D_T078    NUMBER := 0;
    VL_COUNT_XOUT_T078 NUMBER := 0;
    VL_COUNT_XOUT_T078_P NUMBER := 0;
    VL_INS_T078        NUMBER := 0;
   --
    REC_XOUT_T060 XOUT_T060ARTICLE%ROWTYPE     := NULL;
    REC_XOUT_T062 XOUT_T062UMCONV%ROWTYPE      := NULL;
    REC_XOUT_T064 XOUT_T064PARTLIST%ROWTYPE    := NULL;
    REC_XOUT_T078 XOUT_T078WHSBALANCE%ROWTYPE  := NULL;

    VL_STATUS NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T060 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'PRODUCTS HEAD',
                                                     'EXPORT --> T060ARTICLE',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T062 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'UNIT OF MEASURE',
                                                     'EXPORT --> T062UMCONV',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T064 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'KIT',
                                                     'EXPORT --> T064PARTLIST',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T078 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'WHS',
                                                     'EXPORT --> T078WHSBALANCE',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T060, 'XOUT_T060ARTICLE', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T062, 'XOUT_T062UMCONV', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T064, 'XOUT_T064PARTLIST', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T078, 'XOUT_T078WHSBALANCE', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T060, 'XOUT_T060ARTICLE', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T062, 'XOUT_T062UMCONV', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T064, 'XOUT_T064PARTLIST', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T078, 'XOUT_T078WHSBALANCE', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies T060ARTILCE records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T060ARTICLE';
        UPDATE T060ARTICLE
        SET IDSESSIONLCK = PI_SESSION_ID,
            CODUSRLCK    = C_SYSUSR,
            DTELCK       = XSYSDATE
            WHERE not exists ( select null from T035LOGGEDUSERS T035 where T035.IDSESSION = NVL(IDSESSIONLCK, '@') AND T035.LASTCHECK > TRUNC(XSYSDATE)-1 ) and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE));

        VL_COUNT_XOUT_T060 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T060ARTICLE to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T060 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.CodArt='||R_LOCKED.CODART||'Coddiv= '||R_LOCKED.CODDIV||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T060,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T060ARTICLE
    -- --------------------------------------------------------------
    FOR RL_T060 IN CL_T060 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Product: '||RL_T060.CODART || '/' ||
                        RL_T060.CODDIV;
      --
      BEGIN --- HEAD T060


        VL_MESSAGE_D := 'Delete XOUT_T060ARTICLE ';
        DElETE XOUT_T060ARTICLE WHERE CODART = RL_T060.CODART AND CODDIV = RL_T060.CODDIV AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T060ARTICLE ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T060.CODART :=RL_T060.CODART;
        REC_XOUT_T060.CODDIV :=RL_T060.CODDIV;
        REC_XOUT_T060.CODART2 :=RL_T060.CODART2;
        REC_XOUT_T060.CODART3 :=RL_T060.CODART3;
        REC_XOUT_T060.DESART :=RL_T060.DESART;
        REC_XOUT_T060.DESART2 :=RL_T060.DESART2;
        REC_XOUT_T060.CODEAN13 :=RL_T060.CODEAN13;
        REC_XOUT_T060.CODCATMER :=RL_T060.CODCATMER;
        REC_XOUT_T060.CODSAL1 :=RL_T060.CODSAL1;
        REC_XOUT_T060.CODLINMER :=RL_T060.CODLINMER;
        REC_XOUT_T060.CODSAL2 :=RL_T060.CODSAL2;
        REC_XOUT_T060.CODFAMMER :=RL_T060.CODFAMMER;
        REC_XOUT_T060.CODSAL3 :=RL_T060.CODSAL3;
        REC_XOUT_T060.CODBRAND :=RL_T060.CODBRAND;
        REC_XOUT_T060.CODSAL4 :=RL_T060.CODSAL4;
        REC_XOUT_T060.CODFRMT :=RL_T060.CODFRMT;
        REC_XOUT_T060.CODSAL5 :=RL_T060.CODSAL5;
        REC_XOUT_T060.CODPRODMGR :=RL_T060.CODPRODMGR;
        REC_XOUT_T060.CODPUR1 :=RL_T060.CODPUR1;
        REC_XOUT_T060.CODPUR2 :=RL_T060.CODPUR2;
        REC_XOUT_T060.CODPUR3 :=RL_T060.CODPUR3;
        REC_XOUT_T060.CODPUR4 :=RL_T060.CODPUR4;
        REC_XOUT_T060.CODPUR5 :=RL_T060.CODPUR5;
        REC_XOUT_T060.VALHEIGHT :=RL_T060.VALHEIGHT;
        REC_XOUT_T060.VALWIDTH :=RL_T060.VALWIDTH;
        REC_XOUT_T060.VALDEPTH :=RL_T060.VALDEPTH;
        REC_XOUT_T060.UMDIMENSION :=RL_T060.UMDIMENSION;
        REC_XOUT_T060.VALNETWEIGHT :=RL_T060.VALNETWEIGHT;
        REC_XOUT_T060.VALGROSSWEIGHT :=RL_T060.VALGROSSWEIGHT;
        REC_XOUT_T060.UMWEIGHT :=RL_T060.UMWEIGHT;
        REC_XOUT_T060.VALVOLUME :=RL_T060.VALVOLUME;
        REC_XOUT_T060.UMVOLUME :=RL_T060.UMVOLUME;
        REC_XOUT_T060.UMINV1 :=RL_T060.UMINV1;
        REC_XOUT_T060.UMINV2 :=RL_T060.UMINV2;
        REC_XOUT_T060.UMDEL :=RL_T060.UMDEL;
        REC_XOUT_T060.UMORDMIN :=RL_T060.UMORDMIN;
        REC_XOUT_T060.UMORD1 :=RL_T060.UMORD1;
        REC_XOUT_T060.FLGCHKAVAIL :=RL_T060.FLGCHKAVAIL;
        REC_XOUT_T060.UMORD2 :=RL_T060.UMORD2;
        REC_XOUT_T060.FLGARTCOMP :=RL_T060.FLGARTCOMP;
        REC_XOUT_T060.UMORD4 :=RL_T060.UMORD4;
        REC_XOUT_T060.UMORD5 :=RL_T060.UMORD5;
        REC_XOUT_T060.UMORD3 :=RL_T060.UMORD3;
        REC_XOUT_T060.FLGARTKIT :=RL_T060.FLGARTKIT;
        REC_XOUT_T060.PRCIVA :=RL_T060.PRCIVA;
        REC_XOUT_T060.CODSTATUS :=RL_T060.CODSTATUS;
        REC_XOUT_T060.DTEORDFROM :=RL_T060.DTEORDFROM;
        REC_XOUT_T060.CODBLCCAUSE :=RL_T060.CODBLCCAUSE;
        REC_XOUT_T060.FLGGIFT :=RL_T060.FLGGIFT;
        REC_XOUT_T060.DTEORDTO :=RL_T060.DTEORDTO;
        REC_XOUT_T060.CODUSRLCK :=RL_T060.CODUSRLCK;
        REC_XOUT_T060.FLGORDERABLE :=RL_T060.FLGORDERABLE;
        REC_XOUT_T060.DTELCK :=RL_T060.DTELCK;
        REC_XOUT_T060.FLGANN :=RL_T060.FLGANN;
        REC_XOUT_T060.CODUSRMOD :=RL_T060.CODUSRMOD;
        REC_XOUT_T060.PGMMODCL :=RL_T060.PGMMODCL;
        REC_XOUT_T060.PGMMODDB :=RL_T060.PGMMODDB;
        REC_XOUT_T060.DTECRE :=RL_T060.DTECRE;
        REC_XOUT_T060.DTEMOD :=RL_T060.DTEMOD;
        REC_XOUT_T060.IDSESSIONLCK :=RL_T060.IDSESSIONLCK;
        REC_XOUT_T060.QTYORDMIN :=RL_T060.QTYORDMIN;
        REC_XOUT_T060.FLGRETURNABLE :=RL_T060.FLGRETURNABLE;
        REC_XOUT_T060.FLGBUDGET :=RL_T060.FLGBUDGET;
        REC_XOUT_T060.CODCAUSEKIT :=RL_T060.CODCAUSEKIT;
        REC_XOUT_T060.FLG_TRA_PERIF :=RL_T060.FLG_TRA_PERIF;
        REC_XOUT_T060.CODSTATUSCUST :=RL_T060.CODSTATUSCUST;
        REC_XOUT_T060.FLGPROMO :=RL_T060.FLGPROMO;
        REC_XOUT_T060.CODCATEGORY :=RL_T060.CODCATEGORY;
        REC_XOUT_T060.CODSEGM :=RL_T060.CODSEGM;
        REC_XOUT_T060.FLGARTFITTIZIO :=RL_T060.FLGARTFITTIZIO;
        REC_XOUT_T060.CODARTSOURCE :=RL_T060.CODARTSOURCE;
        REC_XOUT_T060.FLGCOMPETITOR :=RL_T060.FLGCOMPETITOR;
        REC_XOUT_T060.FLGTOP :=RL_T060.FLGTOP;
        REC_XOUT_T060.DOCUMENTKEY :=RL_T060.DOCUMENTKEY;
        REC_XOUT_T060.DTETOSERVER :=RL_T060.DTETOSERVER;
        REC_XOUT_T060.CODUSRMODREAL :=RL_T060.CODUSRMODREAL;
        REC_XOUT_T060.CODUSRCREREAL :=RL_T060.CODUSRCREREAL;
        REC_XOUT_T060.CODSAL6 :=RL_T060.CODSAL6;
        REC_XOUT_T060.CODSAL7 :=RL_T060.CODSAL7;
        REC_XOUT_T060.CODSAL8 :=RL_T060.CODSAL8;
        REC_XOUT_T060.CODSAL9 :=RL_T060.CODSAL9;
        REC_XOUT_T060.CODSAL10 :=RL_T060.CODSAL10;
        REC_XOUT_T060.FLGSEASONAL :=RL_T060.FLGSEASONAL;
        REC_XOUT_T060.CODARTSUBST :=RL_T060.CODARTSUBST;
        REC_XOUT_T060.NUMSHELFLIFE :=RL_T060.NUMSHELFLIFE;
        --
        REC_XOUT_T060.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T060.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T060ARTICLE VALUES REC_XOUT_T060;

        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T060,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T060

        BEGIN -- UNIT MEASURE T062
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T062UMCONV ';
              DElETE XOUT_T062UMCONV WHERE CODART = RL_T060.CODART AND CODDIV = RL_T060.CODDIV AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T062 IN CL_T062(RL_T060.CODART, RL_T060.CODDIV) LOOP

                VL_MESSAGE_H := 'Measure Unit: '|| RL_T062.CODART || '/' ||
                                  RL_T062.CODDIV || '/' ||
                                  RL_T062.UMFROM || '/' ||
                                  RL_T062.UMTO;


                 VL_MESSAGE_D := 'Insert  XOUT_T062UMCONV ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T062.CODART :=RL_T062.CODART;
                REC_XOUT_T062.CODDIV :=RL_T062.CODDIV;
                REC_XOUT_T062.UMFROM :=RL_T062.UMFROM;
                REC_XOUT_T062.UMTO :=RL_T062.UMTO;
                REC_XOUT_T062.VALCONVFACT :=RL_T062.VALCONVFACT;
                REC_XOUT_T062.VALCONVFACTREV :=RL_T062.VALCONVFACTREV;
                --
                REC_XOUT_T062.SM1_DTEPROCESS := REC_XOUT_T060.SM1_DTEPROCESS;
                REC_XOUT_T062.SM1_CODPROCESS := REC_XOUT_T060.SM1_CODPROCESS;

                INSERT INTO XOUT_T062UMCONV VALUES REC_XOUT_T062;

                VL_INS_T062 := VL_INS_T062 + 1;
                --
              VL_COUNT_XOUT_T062_P := CL_T062%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T062 := VL_COUNT_XOUT_T062 + VL_COUNT_XOUT_T062_P;
              VL_COUNT_XOUT_T062_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T062,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- unit measure T062


        BEGIN --T064PARTLIST
        --
        IF ( VL_STATUS = 0  ) THEN
              -- KIT
              VL_MESSAGE_D := 'Delete XOUT_T064PARTLIST ';
              DElETE XOUT_T064PARTLIST WHERE CODART = RL_T060.CODART AND CODDIV = RL_T060.CODDIV AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T064 IN CL_T064(RL_T060.CODART, RL_T060.CODDIV) LOOP

                VL_MESSAGE_H := 'Kit: '|| RL_T064.CODART || '/' ||
                                          RL_T064.CODDIV || '/' ||
                                          RL_T064.CODARTSON;


                 VL_MESSAGE_D := 'Insert  XOUT_T064PARTLIST ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T064.CODART :=RL_T064.CODART;
                REC_XOUT_T064.CODDIV :=RL_T064.CODDIV;
                REC_XOUT_T064.CODARTSON :=RL_T064.CODARTSON;
                REC_XOUT_T064.UMSON :=RL_T064.UMSON;
                REC_XOUT_T064.QTY :=RL_T064.QTY;
                REC_XOUT_T064.PRCAMOUNT :=RL_T064.PRCAMOUNT;
                --
                REC_XOUT_T064.SM1_DTEPROCESS := REC_XOUT_T060.SM1_DTEPROCESS;
                REC_XOUT_T064.SM1_CODPROCESS := REC_XOUT_T060.SM1_CODPROCESS;

                INSERT INTO XOUT_T064PARTLIST VALUES REC_XOUT_T064;

                VL_INS_T064 := VL_INS_T064 + 1;
                --
              VL_COUNT_XOUT_T064_P :=  CL_T064%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T064 := VL_COUNT_XOUT_T064 + VL_COUNT_XOUT_T064_P;
              VL_COUNT_XOUT_T064_P := 0;


        END IF; --( VL_STATUS =0)
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T064,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- KIT T064

      BEGIN -- WHS T078

        IF ( VL_STATUS = 0 ) THEN
              -- WHS
             VL_MESSAGE_D := 'Delete XOUT_T078WHSBALANCE ';
              DElETE XOUT_T078WHSBALANCE WHERE CODART = RL_T060.CODART AND CODDIV = RL_T060.CODDIV AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T078 IN CL_T078(RL_T060.CODART, RL_T060.CODDIV) LOOP

                --
                VL_MESSAGE_H := 'Whs: '|| RL_T078.CODART || '/' ||
                                          RL_T078.CODDIV || '/' ||
                                          RL_T078.CODWHS;
                VL_MESSAGE_D := 'Insert  XOUT_T078WHSBALANCE ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T078.CODART :=RL_T078.CODART;
                REC_XOUT_T078.CODWHS :=RL_T078.CODWHS;
                REC_XOUT_T078.CODDIV :=RL_T078.CODDIV;
                REC_XOUT_T078.QTYSTOCK :=RL_T078.QTYSTOCK;
                REC_XOUT_T078.UMSTOCK :=RL_T078.UMSTOCK;
                REC_XOUT_T078.DTESTOCK :=RL_T078.DTESTOCK;
                REC_XOUT_T078.QTYSTOCKMIN :=RL_T078.QTYSTOCKMIN;
                REC_XOUT_T078.TYPSTOCK :=RL_T078.TYPSTOCK;
                REC_XOUT_T078.DTEMOD :=RL_T078.DTEMOD;
                REC_XOUT_T078.FLGANN :=RL_T078.FLGANN;

                --
                REC_XOUT_T078.SM1_DTEPROCESS := REC_XOUT_T060.SM1_DTEPROCESS;
                REC_XOUT_T078.SM1_CODPROCESS := REC_XOUT_T060.SM1_CODPROCESS;

                INSERT INTO XOUT_T078WHSBALANCE VALUES REC_XOUT_T078;

                VL_INS_T078 := VL_INS_T078 + 1;
                VL_COUNT_XOUT_T078_P :=  CL_T078%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T078 := VL_COUNT_XOUT_T078 + VL_COUNT_XOUT_T078_P;
              VL_COUNT_XOUT_T078_P := 0;


      END IF;
        --
      EXCEPTION
        WHEN OTHERS THEN
           VL_STATUS := -1;
           VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

           PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T078,
                                           SQLCODE,
                                           VL_MESSAGE_H);

      END; --- WHS T078

      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T060 := VL_INS_T060 + 1;
          UPDATE T060ARTICLE
          SET    DTETOHOST = REC_XOUT_T060.SM1_DTEPROCESS,
                  DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
          WHERE  CODART    = REC_XOUT_T060.CODART
            AND  CODDIV    = REC_XOUT_T060.CODDIV;

         COMMIT;
      ELSE
        ROLLBACK;
          -- Release
        UPDATE T060ARTICLE
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE CODART = REC_XOUT_T060.CODART
          AND CODDIV = REC_XOUT_T060.CODDIV ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T078,
                                      0,
                                      VL_COUNT_XOUT_T078,
                                      VL_INS_T078,
                                      VL_COUNT_XOUT_T078 - VL_INS_T078);
   --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T064,
                                      0,
                                      VL_COUNT_XOUT_T064,
                                      VL_INS_T064,
                                      VL_COUNT_XOUT_T064 - VL_INS_T064);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T062,
                                      0,
                                      VL_COUNT_XOUT_T062,
                                      VL_INS_T062,
                                      VL_COUNT_XOUT_T062 - VL_INS_T062);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T060,
                                      0,
                                      VL_COUNT_XOUT_T060,
                                      VL_INS_T060,
                                      VL_COUNT_XOUT_T060 - VL_INS_T060);





    PO_MSG := VL_INS_T060||'/'||VL_COUNT_XOUT_T060||' Products Exported';
    PO_STATUS :=VL_INS_T060;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T060,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T060ARTICLE
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T060,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T06X_PRODUCTS;
  --

 /*============================================================================*\
  /* Name: EXP_T09X_DEPOSITS
     Exports SM1 tables:
        •   T090DEPOSIT
        •   T092ENCASHMENT
        •   T093ENCDET

        Staging Area (SSA) tables
        •   XOUT_T090DEPOSIT
        •   XOUT_T092ENCASHMENT
        •   XOUT_T093ENCDET
        Before exporting it :
        •  cleans old records from XOUT_LOG table
        •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

        Export logic:
        •  exports all records not locked by SM1 User that have field t090deposit.DTETOHOST set to NULL or lower than last modified data (t090deposit.DTEMOD)
        •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
        •  deletes records on XOUT table already present that havn't been already read by ERP
        •  Inserts records into XOUT table from SM1 table
        •  Commits each t090deposit.IDDEP/T090DEPOSIT.CODUSR block of information
        •  Set date T090DEPOSIT.DTETOHOST into SM1 header table

              Error handling:
              •  All Errors will be logged in T852/T854 SM1 log tables
              •  Error on record, header and all details are discarded

        Input parameters :   PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID    - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'  wihout any check on DTETOHOST
                             PI_MASSIVE_EXP_DATE:  NULL - normal export (DTEMOD>DTETOHOST or DTETOHOST is null)
                                                   NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE without any check on DTETOHOST

     Author : Mariangela Bandiera
     Creation Date : 24 October 2014
     ----
     Updates :


    ============================================================================ */

  PROCEDURE EXP_T09X_DEPOSITS(PI_PROGR_H      IN NUMBER,
                              PI_SESSION_ID       IN NUMBER,
                              PI_DOCUMENTKEY      IN VARCHAR2,
                              PI_MASSIVE_EXP_DATE IN DATE,
                              PO_MSG           OUT VARCHAR,
                              PO_STATUS        OUT NUMBER ) IS

    --
    -- Cursor on main Deposit table
    --
    CURSOR CL_T090 IS
      SELECT
         *
        FROM  T090DEPOSIT
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY CODUSR, IDDEP ASC;

    --
    -- Deposit Detail
    --
    CURSOR CL_T092(CI_CODUSR VARCHAR2, CI_IDDEP VARCHAR2) IS
      SELECT *
        FROM T092ENCASHMENT
       WHERE CODUSR = CI_CODUSR
         AND IDDEP  = CI_IDDEP;

    --
    -- Encashment
    --
    CURSOR CL_T093(CI_CODUSR VARCHAR2, CI_IDDEP VARCHAR2) IS
      SELECT  *
        FROM T093ENCDET
        WHERE CODUSR = CI_CODUSR
         AND IDDEP  = CI_IDDEP;


    -- -----------------------------------------
    -- Cursor on main Deposit table T090DEPOSIT where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T090 IS
      SELECT IDDEP, CODUSR, DTELCK, CODUSRLCK
        FROM  T090DEPOSIT
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY IDDEP, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting DEPOSIT T09X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T090    NUMBER := 0;
    VL_COUNT_XOUT_T090 NUMBER := 0;
    VL_INS_T090        NUMBER := 0;
    --
    VL_PROGR_D_T092    NUMBER := 0;
    VL_COUNT_XOUT_T092 NUMBER := 0;
    VL_COUNT_XOUT_T092_P NUMBER := 0;
    VL_INS_T092        NUMBER := 0;
     --
    VL_PROGR_D_T093    NUMBER := 0;
    VL_COUNT_XOUT_T093 NUMBER := 0;
    VL_COUNT_XOUT_T093_P NUMBER := 0;
    VL_INS_T093        NUMBER := 0;
    --
    REC_T090 XOUT_T090DEPOSIT%ROWTYPE     := NULL;
    REC_T092 XOUT_T092ENCASHMENT%ROWTYPE  := NULL;
    REC_T093 XOUT_T093ENCDET%ROWTYPE      := NULL;

    VL_STATUS NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T090 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'DEPOSIT HEAD',
                                                     'EXPORT --> T090DEPOSIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T092 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'DEPOSIT DETAILS',
                                                     'EXPORT --> T092ENCASHMENT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T093 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ENCASHMENT',
                                                     'EXPORT --> T093T093ENCDET',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T090, 'XOUT_T090DEPOSIT',    VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T092, 'XOUT_T092ENCASHMENT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T093, 'XOUT_T093ENCDET',     VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T090, 'XOUT_T090DEPOSIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T092, 'XOUT_T092ENCASHMENT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T093, 'XOUT_T093ENCDET', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies T090DEPOSIT records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T090DEPOSIT';
        UPDATE T090DEPOSIT
        SET IDSESSIONLCK = PI_SESSION_ID,
            CODUSRLCK    = C_SYSUSR,
            DTELCK       = XSYSDATE
            WHERE not exists ( select null from T035LOGGEDUSERS T035 where T035.IDSESSION = NVL(IDSESSIONLCK, '@') AND T035.LASTCHECK > TRUNC(XSYSDATE)-1 ) and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE));

        VL_COUNT_XOUT_T090 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T090DEPOSIT to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T090 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.DepositNr='||R_LOCKED.IDDEP||'Codusr= '||R_LOCKED.codusr||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T090,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T090DEPOSIT
    -- --------------------------------------------------------------
    FOR RL_T090 IN CL_T090 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Deposit: '||RL_T090.iddep || '/' ||
                        ' User: '  ||RL_T090.codusr;
      --
      BEGIN --- HEAD T090


        VL_MESSAGE_D := 'Delete XOUT_T090DEPOSIT ';
        DElETE XOUT_T090DEPOSIT WHERE IDDEP = RL_T090.IDDEP AND CODUSR = RL_T090.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T090DEPOSIT ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table
          REC_T090.CODUSR :=RL_T090.CODUSR;
          REC_T090.NUMDEP :=RL_T090.NUMDEP;
          REC_T090.DTEDEP :=RL_T090.DTEDEP;
          REC_T090.CODSTATUS :=RL_T090.CODSTATUS;
          REC_T090.CODTYPDEP :=RL_T090.CODTYPDEP;
          REC_T090.CODCUR :=RL_T090.CODCUR;
          REC_T090.VALDEP :=RL_T090.VALDEP;
          REC_T090.CODABI :=RL_T090.CODABI;
          REC_T090.DESBAN :=RL_T090.DESBAN;
          REC_T090.CODCABSRC :=RL_T090.CODCABSRC;
          REC_T090.DESBRASRC :=RL_T090.DESBRASRC;
          REC_T090.DESNOTE :=RL_T090.DESNOTE;
          REC_T090.DTETOSERVER :=RL_T090.DTETOSERVER;
          REC_T090.DTETOHOST :=RL_T090.DTETOHOST;
          REC_T090.DTECRE :=RL_T090.DTECRE;
          REC_T090.DTEMOD :=RL_T090.DTEMOD;
          REC_T090.DTELCK :=RL_T090.DTELCK;
          REC_T090.CODUSRMOD :=RL_T090.CODUSRMOD;
          REC_T090.CODUSRLCK :=RL_T090.CODUSRLCK;
          REC_T090.IDSESSIONLCK :=RL_T090.IDSESSIONLCK;
          REC_T090.PGMMODCL :=RL_T090.PGMMODCL;
          REC_T090.PRGUSRBNK :=RL_T090.PRGUSRBNK;
          REC_T090.PGMMODDB :=RL_T090.PGMMODDB;
          REC_T090.FLGANN :=RL_T090.FLGANN;
          REC_T090.CODEUSR :=RL_T090.CODEUSR;
          REC_T090.TOHOST :=RL_T090.TOHOST;
          REC_T090.NUMDISTINTA :=RL_T090.NUMDISTINTA;
          REC_T090.CODACCOUNTSRC :=RL_T090.CODACCOUNTSRC;
          REC_T090.CODDIV :=RL_T090.CODDIV;
          REC_T090.CODUSRMODREAL :=RL_T090.CODUSRMODREAL;
          REC_T090.CODUSRCREREAL :=RL_T090.CODUSRCREREAL;
          REC_T090.CODIBAN :=RL_T090.CODIBAN;
          REC_T090.DOCUMENTKEY :=RL_T090.DOCUMENTKEY;
          REC_T090.IDDEP :=RL_T090.IDDEP;

        --
        REC_T090.SM1_DTEPROCESS := XSYSDATE;
        REC_T090.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T090DEPOSIT VALUES REC_T090;

        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T090,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T090

        BEGIN -- DEPOSIT DETAILL T092
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T092ENCASHMENT ';
              DElETE XOUT_T092ENCASHMENT WHERE IDDEP = RL_T090.IDDEP AND CODUSR = RL_T090.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T092 IN CL_T092(RL_T090.IDDEP, RL_T090.CODUSR) LOOP

                VL_MESSAGE_H := 'Deposit: ' ||  RL_T092.IDDEP || '/' ||
                                'User : '   ||  RL_T092.CODUSR || '/' ||
                                'Customer: '||  RL_T092.CODPARTY || '/' ||
                                'Date: '    ||  to_char( RL_T092.DTEENC, C_SM1_FORMAT_DATE);


                 VL_MESSAGE_D := 'Insert  XOUT_T092ENCASHMENT ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                  REC_T092.NUMDEP :=RL_T092.NUMDEP;
                  REC_T092.CODUSR :=RL_T092.CODUSR;
                  REC_T092.CODPARTY :=RL_T092.CODPARTY;
                  REC_T092.CODDIV :=RL_T092.CODDIV;
                  REC_T092.DESNOTE :=RL_T092.DESNOTE;
                  REC_T092.VALENC :=RL_T092.VALENC;
                  REC_T092.DTEENC :=RL_T092.DTEENC;
                  REC_T092.RCPPAYNR :=RL_T092.RCPPAYNR;
                  REC_T092.FLGPROCESSED :=RL_T092.FLGPROCESSED;
                  REC_T092.IDDEP :=RL_T092.IDDEP;
                  REC_T092.IDSURVEY :=RL_T092.IDSURVEY;

                --
                REC_T092.SM1_DTEPROCESS := REC_T090.SM1_DTEPROCESS;
                REC_T092.SM1_CODPROCESS := REC_T090.SM1_CODPROCESS;

                INSERT INTO XOUT_T092ENCASHMENT VALUES REC_T092;

                VL_INS_T092 := VL_INS_T092 + 1;
                --
              VL_COUNT_XOUT_T092_P := CL_T092%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T092 := VL_COUNT_XOUT_T092 + VL_COUNT_XOUT_T092_P;
              VL_COUNT_XOUT_T092_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T092,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- deposit detail T092


        BEGIN --T093ENCDET
        --
        IF ( VL_STATUS = 0  ) THEN
              -- encashment
              VL_MESSAGE_D := 'Delete XOUT_T093ENCDET ';
              DElETE XOUT_T093ENCDET WHERE iddep = RL_T090.iddep AND codusr = RL_T090.codusr AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T093 IN CL_T093(RL_T090.IDDEP, RL_T090.CODUSR) LOOP

                VL_MESSAGE_H := 'Deposit: ' ||  RL_T093.IDDEP || '/' ||
                                'User : '   ||  RL_T093.CODUSR || '/' ||
                                'Customer: '||  RL_T093.CODPARTY || '/' ||
                                'Date: '    ||  to_char( RL_T093.DTEVALENC, C_SM1_FORMAT_DATE);

                 VL_MESSAGE_D := 'Insert  XOUT_T093ENCDET ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_T093.CODUSR :=RL_T093.CODUSR;
                REC_T093.DTEENC :=RL_T093.DTEENC;
                REC_T093.NUMDEP :=RL_T093.NUMDEP;
                REC_T093.NUMROWENC :=RL_T093.NUMROWENC;
                REC_T093.CODPARTY :=RL_T093.CODPARTY;
                REC_T093.CODDIV :=RL_T093.CODDIV;
                REC_T093.CODTYPPAY :=RL_T093.CODTYPPAY;
                REC_T093.DTEVALENC :=RL_T093.DTEVALENC;
                REC_T093.VALENC :=RL_T093.VALENC;
                REC_T093.NUMSER :=RL_T093.NUMSER;
                REC_T093.DESLOC :=RL_T093.DESLOC;
                REC_T093.CODABIPAY :=RL_T093.CODABIPAY;
                REC_T093.CODCABPAY :=RL_T093.CODCABPAY;
                REC_T093.DESBANPAY :=RL_T093.DESBANPAY;
                REC_T093.DESBRAPAY :=RL_T093.DESBRAPAY;
                REC_T093.FLGFUTURE :=RL_T093.FLGFUTURE;
                REC_T093.NUMDEPASS :=RL_T093.NUMDEPASS;
                REC_T093.NUMROWASS :=RL_T093.NUMROWASS;
                REC_T093.DTEENCASS :=RL_T093.DTEENCASS;
                REC_T093.CODACCOUNTPAY :=RL_T093.CODACCOUNTPAY;
                REC_T093.CODENCASS :=RL_T093.CODENCASS;
                REC_T093.DTECRE :=RL_T093.DTECRE;
                REC_T093.DTETOHOST :=RL_T093.DTETOHOST;
                REC_T093.IDDEP :=RL_T093.IDDEP;

                --
                REC_T093.SM1_DTEPROCESS := REC_T090.SM1_DTEPROCESS;
                REC_T093.SM1_CODPROCESS := REC_T090.SM1_CODPROCESS;

                INSERT INTO XOUT_T093ENCDET VALUES REC_T093;

                VL_INS_T093 := VL_INS_T093 + 1;
                --
              VL_COUNT_XOUT_T093_P :=  CL_T093%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T093 := VL_COUNT_XOUT_T093 + VL_COUNT_XOUT_T093_P;
              VL_COUNT_XOUT_T093_P := 0;


        END IF; --( VL_STATUS =0)
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T093,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ENCASHMENT T093

     -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T090 := VL_INS_T090 + 1;
          UPDATE T090DEPOSIT
          SET    DTETOHOST = REC_T090.SM1_DTEPROCESS,
                 TOHOST  = -1,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL
          WHERE  IDDEP     = REC_T090.IDDEP
            AND  CODUSR    = REC_T090.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
          -- Release
        UPDATE T090DEPOSIT
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE IDDEP  = REC_T090.IDDEP
          AND CODUSR = REC_T090.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
   --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T093,
                                      0,
                                      VL_COUNT_XOUT_T093,
                                      VL_INS_T093,
                                      VL_COUNT_XOUT_T093 - VL_INS_T093);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T092,
                                      0,
                                      VL_COUNT_XOUT_T092,
                                      VL_INS_T092,
                                      VL_COUNT_XOUT_T092 - VL_INS_T092);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T090,
                                      0,
                                      VL_COUNT_XOUT_T090,
                                      VL_INS_T090,
                                      VL_COUNT_XOUT_T090 - VL_INS_T090);





    PO_MSG := VL_INS_T090||'/'||VL_COUNT_XOUT_T090||' Deposits Exported';
    PO_STATUS :=VL_INS_T090;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T090,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T090DEPOSIT
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T090,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T09X_DEPOSITS;
  --

 /*============================================================================*\
  /* Name: EXP_T101BENEFIT
        Exports SM1 tables
        •  T101BENEFIT discounts
        Into Staging Area (SSA) tables
        .  XOUT_T101BENEFIT

          Cleaning and Moving records in XOUT and XOUT_LOG
      Before exporting it :
       . cleans old records from XOUT_LOG table
       . moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by erp

      exporting logic:
                       Exports records not locked by users that have fields DTETOHOST NULL OR LESS THAN DTEMOD
                       it locks all records to be exported
                       DELETE records on XOUT table already present that havn't already been read by ERP
                       INSERT records
                       set DTETOHOST after record is done
                       release lock record by record when it has been exported and all records at the end of procedure.

        Error handling:
        •  All Errors will be logged in T852/T854 SM1 log tables
        •  On error all notes belonging to same document key will be discarded

     !!  PAY ATTENTION !!!!
     !!! THIS PROCEDURE MUST BE ALWAYS CALLED FROM OTHERS EXPORT PROCEDURES THAT WILL MANAGE XOUT CLEAN UP AND MOVING TO XOUT_LOG !!
     !!  DOES NOT COMMIT THE TRANSACTION
     Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                            PI_PROGR_D - detail sm1 job number ( T800SYSTEMACTIVITYLOG )
                            PI_NUMORD
                            PI_CODUSR
                            PI_NUMROW
     Outputparameters :     PO_MSG           - message of error if procedure exit with error
                            PO_INS           - number of inserted rows
     Author : Mariangela Bandiera
     Creation Date : 22 November 2012
     ----
     Updates :


    ============================================================================ */

   PROCEDURE EXP_T101BENEFIT (PI_PROGR_H       IN NUMBER,
                              PI_PROGR_D       IN NUMBER,
                              PI_NUMORD        IN NUMBER,
                              PI_CODUSR        IN VARCHAR2,
                              PI_NUMROW        IN NUMBER,
                              PI_SM1_DTEPROCESS IN DATE,
                              PO_MSG           OUT VARCHAR,
                              PO_STATUS        OUT NUMBER ,
                              PO_INS           OUT NUMBER,
                              PO_COUNT         OUT NUMBER) IS

    -- -----------------------------------------
    -- Cursor on GENERIC Notes table TA4410NOTES
    -- -----------------------------------------
    --
    -- Head and Rows Discounts
    --
    CURSOR CL_T101(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2, CI_NUMROW NUMBER) IS
      SELECT *
        FROM T101BENEFIT
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
         AND NUMROW = CI_NUMROW
       ;

    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting benefit T101';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    REC_XOUT_T101   XOUT_T101BENEFIT%ROWTYPE       := NULL;

    VL_STATUS NUMBER:= 0;
    VL_INS    NUMBER:= 0;
    VL_COUNT  NUMBER:= 0;
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN
    PO_INS    :=0;
    PO_COUNT  :=0;
    PO_MSG    := null;
    PO_STATUS := 0;
    --
    -- --------------------------------------------------------------
    -- loops Notes for DOCUMENT KEY IN INPUT
    -- --------------------------------------------------------------
    VL_MESSAGE_D := 'Delete XOUT_T101BENEFIT ';
    DElETE XOUT_T101BENEFIT WHERE NUMORD = PI_NUMORD AND CODUSR = PI_CODUSR AND NUMROW = PI_NUMROW AND ERP_DTEPROCESS IS NULL;
     --
    VL_STATUS := 0;
     --
    FOR RL_T101 IN CL_T101(PI_NUMORD, PI_CODUSR, PI_NUMROW) LOOP
      VL_COUNT := VL_COUNT + 1;
      IF ( VL_STATUS = 0 ) THEN

      --
      VL_MESSAGE_H :=   'Benefit: '||PI_NUMORD||'\'||PI_CODUSR||'\'||PI_NUMROW;
      --
      BEGIN


        VL_MESSAGE_D := 'Insert XOUT_T101BENEFIT ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table
          REC_XOUT_T101.CODSRC :=RL_T101.CODSRC;
          REC_XOUT_T101.NUMBENEFIT :=RL_T101.NUMBENEFIT;
          REC_XOUT_T101.CODSRCREF :=RL_T101.CODSRCREF;
          REC_XOUT_T101.CODTYPBEN :=RL_T101.CODTYPBEN;
          REC_XOUT_T101.CODCALCROLE :=RL_T101.CODCALCROLE;
          REC_XOUT_T101.UMBEN :=RL_T101.UMBEN;
          REC_XOUT_T101.QTYBEN :=RL_T101.QTYBEN;
          REC_XOUT_T101.PRGSEQ :=RL_T101.PRGSEQ;
          REC_XOUT_T101.QTYEACH :=RL_T101.QTYEACH;
          REC_XOUT_T101.VALAZCACCOUNT :=RL_T101.VALAZCACCOUNT;
          REC_XOUT_T101.UMEACH :=RL_T101.UMEACH;
          REC_XOUT_T101.CODART :=RL_T101.CODART;
          REC_XOUT_T101.VALBEN :=RL_T101.VALBEN;
          REC_XOUT_T101.CODDIV :=RL_T101.CODDIV;
          REC_XOUT_T101.VALSCA :=RL_T101.VALSCA;
          REC_XOUT_T101.FLGLASTBEN :=RL_T101.FLGLASTBEN;
          REC_XOUT_T101.CODCAUSE :=RL_T101.CODCAUSE;
          REC_XOUT_T101.CODBENCAUSE :=RL_T101.CODBENCAUSE;
          REC_XOUT_T101.CODBENSUBCAUSE :=RL_T101.CODBENSUBCAUSE;
          REC_XOUT_T101.BENNOTE :=RL_T101.BENNOTE;
          REC_XOUT_T101.QTYGIFT :=RL_T101.QTYGIFT;
          REC_XOUT_T101.UMGIFT :=RL_T101.UMGIFT;
          REC_XOUT_T101.CODOPERATION :=RL_T101.CODOPERATION;
          REC_XOUT_T101.UMENGINE :=RL_T101.UMENGINE;
          REC_XOUT_T101.FLGLOGICALANN :=RL_T101.FLGLOGICALANN;
          REC_XOUT_T101.CODTEOBEN :=RL_T101.CODTEOBEN;
          REC_XOUT_T101.QTYBENMIN :=RL_T101.QTYBENMIN;
          REC_XOUT_T101.QTYBENMAX :=RL_T101.QTYBENMAX;
          REC_XOUT_T101.POCKETPRICE :=RL_T101.POCKETPRICE;
          REC_XOUT_T101.CODUSRLOGICALANN :=RL_T101.CODUSRLOGICALANN;
          REC_XOUT_T101.CODSRCREFTARGET :=RL_T101.CODSRCREFTARGET;
          REC_XOUT_T101.CODKEY1 :=RL_T101.CODKEY1;
          REC_XOUT_T101.PRGAPPLY :=RL_T101.PRGAPPLY;
          REC_XOUT_T101.CODUSR :=RL_T101.CODUSR;
          REC_XOUT_T101.NUMORD :=RL_T101.NUMORD;
          REC_XOUT_T101.NUMROW :=RL_T101.NUMROW;
          REC_XOUT_T101.QTYBENSOFTMAX :=RL_T101.QTYBENSOFTMAX;

        --
        REC_XOUT_T101.SM1_DTEPROCESS := PI_SM1_DTEPROCESS;
        REC_XOUT_T101.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T101BENEFIT VALUES REC_XOUT_T101;
         VL_INS := VL_INS + 1;


       EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           PI_PROGR_D,
                                           SQLCODE,
                                           VL_MESSAGE_H);
       END;
       END IF;
    END LOOP;



    PO_INS    := VL_INS;
    PO_COUNT  := VL_COUNT;


    --
  EXCEPTION WHEN OTHERS THEN

          ROLLBACK;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         PI_PROGR_D,
                                         SQLCODE,
                                         VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T101BENEFIT;
  --


PROCEDURE EXP_T10X_ORDERS_KD(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         *
        FROM  T100ORDHEAD
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY NUMORD, CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS

      SELECT T106.*,t060.Z_DALCAT
       FROM T106ORDROW T106 INNER JOIN t060article  t060
       ON T106.codart=t060.codart AND t106.coddiv=t060.coddiv
       WHERE T106.NUMORD = CI_NUMORD
         AND T106.CODUSR = CI_CODUSR
--         AND T106.CODSTATUS = C_T106_STATUS_OK
       ;

      
        


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  Z_QEXP_T100ORDHEAD_KD_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
               NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) 
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting EXP_T10X_ORDERS_KD';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT KD--> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT KD--> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT KD--> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT KD--> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT KD--> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
        --     NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and -- vikas , dtetohost can't use for presale orders since orders should remain editable even after export                 
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM Z_QEXP_T100ORDHEAD_KD_C Q WHERE
              -- Q.NUMORD='160032063' AND  -- TESTING PURPOSE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
        and NVL(CODTYPORDCUST,0)!=numord -- vikas , dtetohost can't use for presale orders since orders should remain editable even after export
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.CODWHS;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;
        
        REC_XOUT_T100.Z_FLG_KD_ORD :='1';
        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
        REC_XOUT_T106.QTYORDORIG :=RL_T106.QTYORDORIG;
        
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.Z_DALCAT := RL_T106.Z_DALCAT;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET 
           DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,                
                 CODTYPORDCUST   = TRIM(NUMORD),
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_ORDERS_KD;

 /*============================================================================*\
  /* Name: EXP_T10X_ORDERS
     Exports SM1 tables:
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail
      •  T101BENEFIT - head and row discount
      •  TA4410NOTES - head and row notes
      •  TA4430ANOMALIES     - head and row anomalies
      •  TA4432ANOMDETAIL    - head and row anomaly details

      Staging Area (SSA) tables
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW
      •  XOUT_T101BENEFIT
      •  XOUT_TA4410NOTES
      •  XOUT_TA4430ANOMALIES
      •  XOUT_TA4432ANOMDETAIL

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  NO FILTER IS APPLIED ON ORDER STATUS IT HAS TO BE CUSTOMIZED
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

            Error handling:
            •  All Errors will be logged in T852/T854 SM1 log tables
            •  Error on record, header and all details are discarded

       Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                              PI_SESSION_ID       - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                              PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                              PI_MASSIVE_EXP_DATE:  NULL - normal export
                                                    NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                              PI_CODE_CHAR_A : division
     Author : Mariangela Bandiera
     Creation Date : 21 November 2012
     ----
     Updates :
      -- 2014 10 17; 013: Mbandiera; tfs 32462; ORDERS; Exportable orders read in external view QEXP_T100ORDHEAD
      --                                                Added division as input parameter (used PI_CODE_CHAR_A)


    ============================================================================ */
  PROCEDURE EXP_T10X_ORDERS(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         *
        FROM  T100ORDHEAD
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY NUMORD, CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  QEXP_T100ORDHEAD
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
               NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) 
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
        --     NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and -- vikas , dtetohost can't use for presale orders since orders should remain editable even after export                 
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM QEXP_T100ORDHEAD Q WHERE
              -- Q.NUMORD='160032063' AND  -- TESTING PURPOSE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
        and NVL(CODTYPORDCUST,0)!=numord -- vikas , dtetohost can't use for presale orders since orders should remain editable even after export
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.CODWHS;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET   -- DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS, -- vikas , dtetohost can't use for presale orders since orders should remain editable even after export                  
                 CODTYPORDCUST   = TRIM(NUMORD),
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_ORDERS;


PROCEDURE EXP_T10X_ORDERS_61(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         *
        FROM  T100ORDHEAD
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY NUMORD, CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  QEXP_T100ORDHEAD_STOCKCOR_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY )
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                
            -- never exported or massive export
             and
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM QEXP_T100ORDHEAD_STOCKCOR_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.CODWHS;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_ORDERS_61;

  PROCEDURE EXP_T10X_VANUNLOAD(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         T.*,UD.Codwhsdeliv
        FROM  T100ORDHEAD T
  Inner Join T031USERDIV UD
      On T.CODEUSR = UD.CODUSR
      And T.CODDIV = UD.CODDIV
        WHERE T.IDSESSIONLCK IS NOT NULL AND T.IDSESSIONLCK = PI_SESSION_ID
        ORDER BY T.NUMORD, T.CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100VANUNLOAD_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
             NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100VANUNLOAD_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.Codwhsdeliv;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_VANUNLOAD;

 PROCEDURE EXP_T10X_CREDIT_ORDERS(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         *
        FROM  T100ORDHEAD
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY NUMORD, CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
         AND CODTYPROW IN ('0','1')
--         AND CODSTATUS = C_T106_STATUS_OK
    AND   QTYORD > 0 -- if equals zero , discountqty/qtyord will be undefined. 
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100CREDITORDER_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT CREDIT ORDERS --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT CREDIT ORDERS --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
           --  NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100CREDITORDER_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;

dbms_output.put_line (VL_COUNT_XOUT_T100);

    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
      --  DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS; 
     --REC_XOUT_T100.CODSTATUS := 'A';
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.CODWHS;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
             -- DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT/RL_T106.QTYORD;-- DAL wants discount per unit qty 
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL--,
                -- NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_CREDIT_ORDERS;
 PROCEDURE EXP_T10X_CONS_ORDERS(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         *
        FROM  T100ORDHEAD
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY NUMORD, CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100CONSORDER_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
             NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100CONSORDER_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.CODWHS;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_CONS_ORDERS;


/*============================================================================*\
  /* Name: EXP_T10X_CASH_ORDERS (SUMMARISED)
     Source View Name  Used To Lock : ZQEXP_T100CREDITORDER_C
     Exports SM1 tables:
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail
      •  T101BENEFIT - head and row discount
      •  TA4410NOTES - head and row notes
      •  TA4430ANOMALIES     - head and row anomalies
      •  TA4432ANOMDETAIL    - head and row anomaly details

      Staging Area (SSA) tables
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW
      •  XOUT_T101BENEFIT
      •  XOUT_TA4410NOTES
      •  XOUT_TA4430ANOMALIES
      •  XOUT_TA4432ANOMDETAIL

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  NO FILTER IS APPLIED ON ORDER STATUS IT HAS TO BE CUSTOMIZED
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

            Error handling:
            •  All Errors will be logged in T852/T854 SM1 log tables
            •  Error on record, header and all details are discarded

       Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                              PI_SESSION_ID       - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                              PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                              PI_MASSIVE_EXP_DATE:  NULL - normal export
                                                    NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                              PI_CODE_CHAR_A : division
     Author : Sherry
     Creation Date : 26 Aug 2015
    ============================================================================ */




PROCEDURE EXP_T10X_CASH_ORDERS(PI_PROGR_H IN NUMBER,
PI_SESSION_ID IN NUMBER,
PI_DOCUMENTKEY IN VARCHAR2,
PI_MASSIVE_EXP_DATE IN DATE,
PI_CODDIV IN VARCHAR2,
PO_MSG OUT VARCHAR,
PO_STATUS OUT NUMBER ) IS
--
-- Cursor on main Order table
--

/*
CURSOR CL_T100 IS
SELECT
*
FROM T100ORDHEAD
WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
ORDER BY NUMORD, CODUSR ASC;
*/


CURSOR CL_T100 IS
Select
Max(T.NUMORD) NUMORD,
MAX(T.CODUSR) CODUSR, --LOGGED USER
T.CODEUSR CODEUSR, --SALESMN
--Max(T.CODTYPORD) CODTYPORD,
T.CODTYPORD CODTYPORD,
T.CODDIV,
TRUNC(T.DTEORD) DTEORD,
TRUNC(T.DTEDELIV) DTEDELIV, --ORDER AND DELIVERY DATE WILL BE SAME
T.CODPAYTRM,
T.CODPAYMOD,
MAX(T.CODSTATUS) CODSTATUS,
UD.CODPARTY CODCUSTDELIV , --T.CODCUSTDELIV,
T.CODCUR,
Sum(T.GROSSAMOUNT) GROSSAMOUNT,
Sum(T.NETAMOUNT) NETAMOUNT,
Sum(T.TAXAMOUNT) TAXAMOUNT,
Sum(T.VATAMOUNT) VATAMOUNT,
Sum(T.INCREASEAMOUNT) INCREASEAMOUNT,
Sum(T.DISCOUNTAMOUNT) DISCOUNTAMOUNT,
Sum(T.GIFTAMOUNT) GIFTAMOUNT,
MAX(T.CODWHS) CODWHS,
Sum(T.TOTPALLETS) TOTPALLETS,
Sum(T.RETURNAMOUNT) RETURNAMOUNT,
UD.CODPARTY CODCUSTINV
From T100ORDHEAD T
Inner Join T031USERDIV UD
On T.CODEUSR = UD.CODUSR
And T.CODDIV = UD.CODDIV
WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
AND T.CODTYPORD IN ('70','80') -- ADDED BY VIKAS .  INVOICE AND DELIVERY ORDERS 
AND T.CODSTATUS IN ('11','6') -- INVOICED INVOICES AND DELIVERED DELIVERY ORDERS  
--SETTLED IS CONSIDERED IN VIEW 
Group By

T.CODEUSR, --CODEUSRIS THE SALES MAN
T.CODDIV,
TRUNC(T.DTEORD),
TRUNC(T.DTEDELIV),
T.CODCUR,
T.CODPAYTRM,
T.CODPAYMOD,
T.CODTYPORD,
UD.CODPARTY
;

--
-- Rows
--
CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODEUSR VARCHAR2 ,CI_CODDIV VARCHAR2 , CI_DTEORD DATE
, CI_DTEDELIV DATE, CI_CODCUR VARCHAR2 , CI_CODPAYTRM VARCHAR2 , CI_CODPAYMOD VARCHAR2 ) IS
SELECT
CODUSR ,
CI_NUMORD NUMORD,
CODART ,
CI_CODDIV CODDIV ,
UMORD ,
SUM(QTYORD) QTYORD,
UMINV ,
SUM(QTYINV) QTYINV,
CODTYPROW ,
MAX(CODSTATUS) CODSTATUS,
SUM(GROSSAMOUNT) GROSSAMOUNT,
SUM(NETAMOUNT) NETAMOUNT,
(DISCOUNTAMOUNT/QTYINV) DISCOUNTAMOUNT,
SUM(GIFTAMOUNT) GIFTAMOUNT,
GROSSARTAMOUNT, --GROSS UNIT PRICE 
NETARTAMOUNT , --NET UNIT PRICE
max(CODBENCAUSE) CODBENCAUSE,
MAX(CODBENSUBCAUSE) CODBENSUBCAUSE

FROM
(SELECT NUMORD FROM T100ORDHEAD WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
AND CODEUSR = CI_CODEUSR AND CODDIV = CI_CODDIV AND TRUNC (DTEORD) = CI_DTEORD
AND TRUNC(DTEDELIV) = CI_DTEDELIV AND CODCUR = CI_CODCUR AND CODPAYTRM = CI_CODPAYTRM AND CODPAYMOD = CI_CODPAYMOD) ORDHEAD
INNER JOIN T106ORDROW T ON T.NUMORD = ORDHEAD.NUMORD
AND CODTYPROW IN ('0','1')


WHERE NVL(QTYINV,0)!=0 -- QTYINV CAN'T BE NULL OR ZERO SINCE IT IS USED AS A DIVISOR IN DISCOUNTAMOUNT FIELD 

GROUP BY

CODUSR ,
CODART ,
CODDIV ,
UMORD ,
UMINV ,
CODTYPROW,
NETARTAMOUNT , --NET UNIT PRICE
GROSSARTAMOUNT ,-- GROSS UNIT PRICE
(DISCOUNTAMOUNT/QTYINV)
;


-- -----------------------------------------
-- Cursor on main Order table T100ORDHEAD where records are locked by another user
-- -----------------------------------------
CURSOR CL_LOCKED_T100 IS
SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
FROM ZQEXP_T100CASHORDER_C
WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
and
DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
ORDER BY NUMORD, CODUSR ASC;
--
VL_MESSAGE_H VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
VL_MESSAGE_D VARCHAR2(2000) := NULL;
--
VL_PROGR_D_T100 NUMBER := 0;
VL_COUNT_XOUT_T100 NUMBER := 0;
VL_INS_T100 NUMBER := 0;
--
VL_PROGR_D_T106 NUMBER := 0;
VL_COUNT_XOUT_T106 NUMBER := 0;
VL_COUNT_XOUT_T106_P NUMBER := 0;
VL_INS_T106 NUMBER := 0;
--
VL_PROGR_D_T101 NUMBER := 0;
VL_COUNT_XOUT_T101 NUMBER := 0;
VL_COUNT_XOUT_T101_P NUMBER := 0;
VL_INS_T101 NUMBER := 0;
VL_INS_T101_P NUMBER := 0;
--
VL_PROGR_D_TA441 NUMBER := 0;
VL_COUNT_XOUT_TA441 NUMBER := 0;
VL_COUNT_XOUT_TA441_P NUMBER := 0;
VL_INS_TA441 NUMBER := 0;
VL_INS_TA441_P NUMBER := 0;
--
VL_PROGR_D_TA443 NUMBER := 0;
VL_COUNT_XOUT_TA443 NUMBER := 0;
VL_COUNT_XOUT_TA443_P NUMBER := 0;
VL_INS_TA443 NUMBER := 0;
VL_INS_TA443_P NUMBER := 0;

REC_XOUT_T100 XOUT_T100ORDHEAD%ROWTYPE := NULL;
REC_XOUT_T106 XOUT_T106ORDROW%ROWTYPE := NULL;


VL_STATUS NUMBER:= 0;
VL_ST_T101 NUMBER:= 0;
VL_ST_TA441 NUMBER:= 0;
VL_ST_TA443 NUMBER:= 0;
VL_STEP NUMBER:= 0; -- Used to ping t035
VL_NUMROW NUMBER:= 0; -- Used to CREATE UNIQUE NUMROW IN ORDER ROWS FOR COSLIDATION
num_total_rows NUMBER:= 50;
--
EX_EXIT EXCEPTION;
--
BEGIN


VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
'ORDER HEAD',
'EXPORT CASH ORDERS --> T100ORDHEAD',
0,
NULL);
--
VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
'ROWS',
'EXPORT CASH ORDERS --> T106ORDROW',
0,
NULL);

--
VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
'BENEFIT',
'EXPORT --> T101BENEFIT',
0,
NULL);
--
VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
'ORD NOTES',
'EXPORT --> TA4410NOTES',
0,
NULL);
--
VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
'ANOMALIES',
'EXPORT --> TA4430ANOMALIES',
0,
NULL);

-- Clean old records in log table
P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
--
-- Moves records from staging area to log staging area
P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
IF ( VL_STATUS <> 0 ) THEN
RAISE EX_EXIT;
END IF;
P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
IF ( VL_STATUS <> 0 ) THEN
RAISE EX_EXIT;
END IF;
P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
IF ( VL_STATUS <> 0 ) THEN
RAISE EX_EXIT;
END IF;
P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
IF ( VL_STATUS <> 0 ) THEN
RAISE EX_EXIT;
END IF;
P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
IF ( VL_STATUS <> 0 ) THEN
RAISE EX_EXIT;
END IF;
P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
IF ( VL_STATUS <> 0 ) THEN
RAISE EX_EXIT;
END IF;

-- --------------------------------------------------------------
-- Identifies records to be Exported
-- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
-- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

-- --------------------------------------------------------------
BEGIN
 
VL_MESSAGE_D := 'T100ORDHEAD';
UPDATE T100ORDHEAD T
SET T.IDSESSIONLCK = PI_SESSION_ID,
T.CODUSRLCK = C_SYSUSR,
T.DTELCK = XSYSDATE
WHERE

t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
T.CODDIV = nvl(PI_CODDIV, T.coddiv) and
-- never exported or massive export
NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and
-- not in lock by user
(T.NUMORD , T.CODUSR, T.CODDIV ) IN
( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
FROM ZQEXP_T100CASHORDER_C Q WHERE
Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
) 
;
VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
dbms_output.put_line('t100 pROCESS cOUNT :- '||VL_COUNT_XOUT_T100 );

COMMIT;
EXCEPTION WHEN OTHERS THEN
ROLLBACK;
VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
RAISE EX_EXIT;
END;

 

-- --------------------------------------------------------------
-- loops locked records in main table T100ORDHEAD to log them
-- --------------------------------------------------------------
FOR R_LOCKED IN CL_LOCKED_T100 LOOP

VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
VL_PROGR_D_T100,
SQLCODE,
VL_MESSAGE_H);
---SHERRY IF ENTERED IN THIS LOOP HAS TO EXIT

END LOOP;



-- --------------------------------------------------------------
-- loop in main table T100ORDHEAD
-- --------------------------------------------------------------
FOR RL_T100 IN CL_T100 LOOP
-- pings to t035 every 1000 cicles--
VL_STEP := VL_STEP + 1;
IF ( MOD(VL_STEP, 1000) = 0 ) THEN
PKG_UTILS.user_ping(PI_SESSION_ID);
END IF;  

--
VL_STATUS := 0;
--
VL_MESSAGE_H := 'Order: '||RL_T100.NUMORD || '/' ||
RL_T100.CODUSR;
--
BEGIN --- HEAD T100


VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
--DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND ERP_DTEPROCESS IS NULL;


VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
-- Here you can customize field elaboration
-- the default is the xout has the same value of sm1 table

REC_XOUT_T100.NUMORD := RL_T100.NUMORD;
REC_XOUT_T100.CODUSR := RL_T100.CODUSR;
REC_XOUT_T100.CODEUSR := RL_T100.CODEUSR;
REC_XOUT_T100.CODTYPORD := RL_T100.CODTYPORD;
REC_XOUT_T100.CODSTATUS := RL_T100.CODSTATUS;
REC_XOUT_T100.CODPAYMOD := RL_T100.CODPAYMOD;
REC_XOUT_T100.CODDIV := RL_T100.CODDIV;
REC_XOUT_T100.DTEORD := RL_T100.DTEORD;
REC_XOUT_T100.DTEDELIV := RL_T100.DTEDELIV;
REC_XOUT_T100.CODCUSTDELIV := RL_T100.CODCUSTDELIV;
REC_XOUT_T100.CODCUR := RL_T100.CODCUR;
REC_XOUT_T100.GROSSAMOUNT := RL_T100.GROSSAMOUNT;
REC_XOUT_T100.NETAMOUNT := RL_T100.NETAMOUNT;
REC_XOUT_T100.TAXAMOUNT := RL_T100.TAXAMOUNT;
REC_XOUT_T100.VATAMOUNT := RL_T100.VATAMOUNT;
REC_XOUT_T100.INCREASEAMOUNT := RL_T100.INCREASEAMOUNT;
REC_XOUT_T100.DISCOUNTAMOUNT := RL_T100.DISCOUNTAMOUNT;
REC_XOUT_T100.GIFTAMOUNT := RL_T100.GIFTAMOUNT;
REC_XOUT_T100.CODWHS := RL_T100.CODWHS;
REC_XOUT_T100.TOTPALLETS := RL_T100.TOTPALLETS;
REC_XOUT_T100.RETURNAMOUNT := RL_T100.RETURNAMOUNT;
REC_XOUT_T100.CODCUSTINV := RL_T100.CODCUSTINV;


REC_XOUT_T100.NUMORDHOST := ''; --'CS-' || RL_T100.NUMORDHOST;
REC_XOUT_T100.NUMORDCUST := 'CS-' || TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODEUSR);--RL_T100.NUMORDCUST;


REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;


INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

-- Head Benefits
--EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
--VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
--VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

-- Head NOTES
--EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
--VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
--VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

-- Head Anomalies
--EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
--VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
--VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


EXCEPTION WHEN OTHERS THEN
VL_STATUS := -1;
VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
VL_PROGR_D_T100,
SQLCODE,
VL_MESSAGE_H);
END; -- HEAD T100

BEGIN -- ORDER ROWS T106
--
IF ( VL_STATUS = 0 ) THEN
-- Unit Measure data
VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
--DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND ERP_DTEPROCESS IS NULL;


--(CI_NUMORD NUMBER, CI_CODEUSR VARCHAR2 ,CI_CODDIV VARCHAR2 , CI_DTEORD DATE
--, CI_DTEDELIV DATE, CI_CODCUR VARCHAR2 , CI_CODPAYTRM VARCHAR2 , CI_CODPAYMOD VARCHAR2 )

VL_NUMROW := 0;
FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODEUSR , RL_T100.CODDIV, RL_T100.DTEORD , RL_T100.DTEDELIV
, RL_T100.CODCUR , RL_T100.CODPAYTRM , RL_T100.CODPAYMOD) LOOP

VL_NUMROW := VL_NUMROW + 1;

VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
RL_T106.CODUSR || '/' ||
VL_NUMROW ;


VL_MESSAGE_D := 'Insert XOUT_T106ORDROW ';
-- Here you can customize field elaboration
-- the default is the xout has the same value of sm1 table
-----------------------------------------------------------------------------
REC_XOUT_T106.CODUSR := RL_T106.CODUSR;
REC_XOUT_T106.NUMORD := RL_T106.NUMORD;
REC_XOUT_T106.NUMROW := VL_NUMROW ; --RL_T106.NUMROW;
REC_XOUT_T106.CODART := RL_T106.CODART;
REC_XOUT_T106.CODDIV := RL_T106.CODDIV;
REC_XOUT_T106.UMORD := RL_T106.UMORD;
REC_XOUT_T106.QTYORD := RL_T106.QTYORD;
REC_XOUT_T106.UMINV := RL_T106.UMINV;
REC_XOUT_T106.QTYINV := RL_T106.QTYINV;
REC_XOUT_T106.CODTYPROW := RL_T106.CODTYPROW;
REC_XOUT_T106.CODSTATUS := RL_T106.CODSTATUS;
REC_XOUT_T106.GROSSAMOUNT := RL_T106.GROSSAMOUNT;
REC_XOUT_T106.NETAMOUNT := RL_T106.NETAMOUNT;
REC_XOUT_T106.DISCOUNTAMOUNT := RL_T106.DISCOUNTAMOUNT;
REC_XOUT_T106.GIFTAMOUNT := RL_T106.GIFTAMOUNT;
REC_XOUT_T106.GROSSARTAMOUNT := RL_T106.GROSSARTAMOUNT;
REC_XOUT_T106.NETARTAMOUNT := RL_T106.NETARTAMOUNT;
REC_XOUT_T106.CODBENCAUSE := RL_T106.CODBENCAUSE;
REC_XOUT_T106.CODBENSUBCAUSE := RL_T106.CODBENSUBCAUSE;


-----------------------------------------------------------------------------
REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;


VL_INS_T106 := VL_INS_T106 + 1;

-- Row Benefits
--EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
--VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
--VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;


--REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
--REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

--order benefitsheader lavel wher numrow is zero

INSERT INTO XOUT_T101BENEFIT (NUMORD,NUMROW,CODSRC,NUMBENEFIT,VALBEN,CODDIV,CODBENCAUSE,CODBENSUBCAUSE,CODUSR,SM1_DTEPROCESS, SM1_CODPROCESS)
SELECT
RL_T106.NUMORD, 0, CODSRC,1,SUM(VALBEN),RL_T106.CODDIV,CODBENCAUSE,CODBENSUBCAUSE,RL_T106.CODUSR,REC_XOUT_T100.SM1_DTEPROCESS,REC_XOUT_T100.SM1_CODPROCESS
FROM
(SELECT NUMORD FROM T100ORDHEAD WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
AND CODEUSR = RL_T100.CODEUSR AND CODDIV = RL_T100.CODDIV AND TRUNC (DTEORD) = RL_T100.DTEORD
AND TRUNC(DTEDELIV) = RL_T100.DTEDELIV AND CODCUR = RL_T100.CODCUR
AND CODPAYTRM = RL_T100.CODPAYTRM AND CODPAYMOD = RL_T100.CODPAYMOD) ORDHEAD
INNER JOIN
T101BENEFIT ORDBEN ON ORDHEAD.NUMORD = ORDBEN.NUMORD
WHERE
ORDBEN.NUMROW = 0
GROUP BY
CODSRC,CODBENCAUSE,CODBENSUBCAUSE;

/*
INSERT INTO XOUT_T101BENEFIT (NUMORD,NUMROW,CODSRC,NUMBENEFIT,VALBEN,CODDIV,CODBENCAUSE,CODBENSUBCAUSE,CODUSR,SM1_DTEPROCESS, SM1_CODPROCESS)
SELECT
RL_T106.NUMORD, VL_NUMROW, CODSRC,MIN(NUMBENEFIT),SUM(VALBEN),RL_T106.CODDIV,CODBENCAUSE,CODBENSUBCAUSE,RL_T106.CODUSR,REC_XOUT_T100.SM1_DTEPROCESS,REC_XOUT_T100.SM1_CODPROCESS
FROM
(SELECT NUMORD FROM T100ORDHEAD WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
AND CODEUSR = RL_T100.CODEUSR AND CODDIV = RL_T100.CODDIV AND TRUNC (DTEORD) = RL_T100.DTEORD
AND TRUNC(DTEDELIV) = RL_T100.DTEDELIV AND CODCUR = RL_T100.CODCUR
AND CODPAYTRM = RL_T100.CODPAYTRM AND CODPAYMOD = RL_T100.CODPAYMOD) ORDHEAD
INNER JOIN
(SELECT NUMORD,NUMROW FROM T106ORDROW WHERE
CODUSR = RL_T106.CODUSR AND CODART = RL_T106.CODART AND CODDIV = RL_T106.CODDIV
AND UMORD = RL_T106.UMORD AND UMINV = RL_T106.UMINV AND CODTYPROW = RL_T106.CODTYPROW ) ORDROWS
ON ORDHEAD.NUMORD = ORDROWS.NUMORD
INNER JOIN
T101BENEFIT ORDBEN ON ORDROWS.NUMORD = ORDBEN.NUMORD AND ORDROWS.NUMROW = ORDBEN.NUMROW
GROUP BY
CODSRC,CODBENCAUSE,CODBENSUBCAUSE; */

 

/* -- Row NOTES
-- EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
--VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
-- VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


-- Row Anomalies
-- EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
--VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
--VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
*/
--
VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
END LOOP;
VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
VL_COUNT_XOUT_T106_P := 0;

END IF;
--
EXCEPTION
WHEN OTHERS THEN
VL_STATUS := -1;
VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
VL_PROGR_D_T106,
SQLCODE,
VL_MESSAGE_H);

END; --- ord rows T106


-- if all records have been stored with success then it makes the commit
-- set DTETOHOST
IF VL_STATUS = 0 THEN
VL_INS_T100 := VL_INS_T100 + 1;
UPDATE T100ORDHEAD
SET DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
DTELCK = NULL,
IDSESSIONLCK = NULL,
CODUSRLCK = NULL --,
--NUMORDCUST = TRIM(NUMORD) || TRIM(CODUSR) 
WHERE
IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
AND CODEUSR = RL_T100.CODEUSR AND CODDIV = RL_T100.CODDIV AND TRUNC (DTEORD) = RL_T100.DTEORD
AND TRUNC(DTEDELIV) = RL_T100.DTEDELIV AND CODCUR = RL_T100.CODCUR AND CODPAYTRM = RL_T100.CODPAYTRM AND CODPAYMOD = RL_T100.CODPAYMOD
AND CODTYPORD = RL_T100.CODTYPORD

--RL_T100.NUMORD, RL_T100.CODEUSR , RL_T100.CODDIV, RL_T100.DTEORD , RL_T100.DTEDELIV
-- , RL_T100.CODCUR , RL_T100.CODPAYTRM , RL_T100.CODPAYMOD

/*NUMORD = REC_XOUT_T100.NUMORD
AND CODUSR = REC_XOUT_T100.CODUSR*/
;

COMMIT;
ELSE
ROLLBACK;
-- Release updated records
UPDATE T100ORDHEAD
SET DTELCK = NULL,
IDSESSIONLCK = NULL,
CODUSRLCK = NULL
WHERE NUMORD = REC_XOUT_T100.NUMORD
AND CODUSR = REC_XOUT_T100.CODUSR ;
COMMIT;

END IF;


END LOOP;

 

-- Close Logs
PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
VL_PROGR_D_TA443,
0,
VL_COUNT_XOUT_TA443,
VL_INS_TA443,
VL_COUNT_XOUT_TA443-VL_INS_TA443);
--
PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
VL_PROGR_D_TA441,
0,
VL_COUNT_XOUT_TA441,
VL_INS_TA441,
VL_COUNT_XOUT_TA441-VL_INS_TA441);
--
PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
VL_PROGR_D_T101,
0,
VL_COUNT_XOUT_T101,
VL_INS_T101,
VL_COUNT_XOUT_T101 - VL_INS_T101);
--
PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
VL_PROGR_D_T106,
0,
VL_COUNT_XOUT_T106,
VL_INS_T106,
VL_COUNT_XOUT_T106 - VL_INS_T106);
--
PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
VL_PROGR_D_T100,
0,
VL_COUNT_XOUT_T100,
VL_INS_T100,
VL_COUNT_XOUT_T100 - VL_INS_T100);

 

 

PO_MSG := VL_INS_T100||' Orders Exported';
PO_STATUS :=VL_INS_T100;


EXCEPTION WHEN EX_EXIT THEN

ROLLBACK;
VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
VL_PROGR_D_T100,
SQLCODE,
VL_MESSAGE_H);

PO_MSG := VL_MESSAGE_H;
PO_STATUS := -1;

WHEN OTHERS THEN

ROLLBACK;

BEGIN
-- Release updated records
UPDATE T100ORDHEAD
SET DTELCK = NULL,
IDSESSIONLCK = NULL,
CODUSRLCK = NULL
WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
COMMIT;


END;

VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
VL_PROGR_D_T100,
SQLCODE,
VL_MESSAGE_H);

PO_MSG := VL_MESSAGE_H;
PO_STATUS := VL_STATUS;

END EXP_T10X_CASH_ORDERS;

  
   --
   
   PROCEDURE EXP_T10X_FINANCISSUE_ORDER(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS 
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         *
        FROM  T100ORDHEAD
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY NUMORD, CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
        -- AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100_FINANCISSUE_ORDER_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) 
        --and  NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;

  VL_CODUSR    VARCHAR2(50) := ''; -- VIKAS
    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT FINACE ORDERS --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT FINACE ORDERS --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
          --   NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and -- VIKAS
   
            -- not in lock by user
            (T.NUMORD) IN
           ( SELECT Q.NUMORD
                FROM ZQEXP_T100_FINANCISSUE_ORDER_C Q 
               -- WHERE Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
dbms_output.put_line(VL_COUNT_XOUT_T100);

    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
   dbms_output.put_line('7925');
      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
         dbms_output.put_line('7940' || RL_T100.NUMORD);
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
   dbms_output.put_line('START' || RL_T100.NUMORD);
  SELECT MIN(T031.CODUSR) INTO VL_CODUSR FROM T031USERDIV T031 INNER JOIN T100ORDHEAD T100 ON
  T031.CODPARTY=T100.CODCUSTINV AND T100.CODDIV = T031.CODDIV 
  AND T100.NUMORD=RL_T100.NUMORD GROUP BY T100.NUMORD ;  --VIKAS
dbms_output.put_line('END');
      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        --REC_XOUT_T100.CODUSR :=RL_T100.CODUSR; 
        --REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR; VL_CODUSR
        REC_XOUT_T100.CODUSR :=VL_CODUSR; --VIKAS, NEED SALES MAN CODE INSTEAD OF THE hq USER CODE
        REC_XOUT_T100.CODEUSR :=VL_CODUSR; --VIKAS, NEED SALES MAN CODE INSTEAD OF THE hq USER CODE       
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.CODWHS;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                 
              --  REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.CODUSR :=VL_CODUSR; --VIKAS, NEED SALES MAN CODE INSTEAD OF THE hq USER CODE
                
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
          --  AND  CODUSR    = REC_XOUT_T100.CODUSR
      ;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
         -- AND CODUSR = REC_XOUT_T100.CODUSR 
     ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_FINANCISSUE_ORDER;
   
  
  
  PROCEDURE EXP_T10X_VAN_LOADIN(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         *
        FROM  T100ORDHEAD
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY NUMORD, CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
       AND CODTYPROW IN ('60','65')
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100ORDHEAD_VAN_LOADIN_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY )
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
  VL_SELLINGDAY DATE :=NULL; -- -- Vikas, only for orders b/w open day and close day
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT LOADIN--> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT LOADIN--> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

           --  t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                
            -- never exported or massive export
             and
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100ORDHEAD_VAN_LOADIN_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
        AND NVL(CODTYPORDCUST,0)!=numord -- vikas , dtetohost can't used  since invoice orders should  be sent again as cash and credit orders 
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;

    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
        VL_SELLINGDAY := null; -- Vikas, only for orders b/w open day and close day
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100

      SELECT TA030.DTEDAY INTO VL_SELLINGDAY FROM T100ORDHEAD T100, TA0300SELLINGDAY TA030 WHERE 
    T100.IDDAY=TA030.IDDAY AND T100.NUMORD=RL_T100.NUMORD; -- Vikas, only for orders b/w open day and close day
  
  
        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        -- DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.CODWHS;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

      REC_XOUT_T100.Z_DTE_SELINGDAY := VL_SELLINGDAY; -- Vikas, only for orders b/w open day and close day
    
    
        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
            --  DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    
      -- DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS, -- vikas , dtetohost can't used  since invoice orders should  be sent again as cash and credit orders                
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
         CODTYPORDCUST   = TRIM(NUMORD),
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_VAN_LOADIN;
  
  
  
  PROCEDURE EXP_T10X_ORDERS_80(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         *
        FROM  T100ORDHEAD
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY NUMORD, CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100_PRICEDDELIVERY_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY )
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                
            -- never exported or massive export
             and
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100_PRICEDDELIVERY_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.CODWHS;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_ORDERS_80;
  
  PROCEDURE EXP_T10X_EMPANDPERISH_ORDERS(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --

  


  CURSOR CL_T100 IS
     Select
  Max(T.NUMORD) NUMORD,
  MAX(T.CODUSR) CODUSR,    --LOGGED USER
  T.CODEUSR CODEUSR,   --SALESMN
  Max(T.CODTYPORD) CODTYPORD,
  --T.CODTYPORD CODTYPORD,
  T.CODDIV,
  TA030.DTEDAY DTEDAY, -- Vikas, only for orders b/w open day and close day
--TRUNC(T.DTEORD) DTEORD,
--TRUNC(T.DTEDELIV) DTEDELIV, --ORDER AND DELIVERY DATE WILL BE SAME
  MAX(T.CODPAYTRM) CODPAYTRM,
  MAX(T.CODPAYMOD) CODPAYMOD,
  MAX(T.CODSTATUS) CODSTATUS,
  MAX(UD.CODPARTY)  CODCUSTDELIV ,  --T.CODCUSTDELIV,
  MAX(T.CODCUR) CODCUR,
  Sum(T.GROSSAMOUNT) GROSSAMOUNT,
    Sum(T.NETAMOUNT) NETAMOUNT,
    Sum(T.TAXAMOUNT) TAXAMOUNT,
    Sum(T.VATAMOUNT) VATAMOUNT,
    Sum(T.INCREASEAMOUNT) INCREASEAMOUNT,
    Sum(T.DISCOUNTAMOUNT) DISCOUNTAMOUNT,
    Sum(T.GIFTAMOUNT) GIFTAMOUNT,
    MAX(T.CODWHS) CODWHS,
    Sum(T.TOTPALLETS) TOTPALLETS,
    Sum(T.RETURNAMOUNT) RETURNAMOUNT,
    MAX(UD.CODPARTY) CODCUSTINV
From T100ORDHEAD T
Inner Join T031USERDIV UD
On T.CODEUSR = UD.CODUSR
And T.CODDIV = UD.CODDIV
Inner Join TA0300SELLINGDAY TA030  -- Vikas, only for orders b/w open day and close day
ON T.IDDAY=TA030.IDDAY    
   WHERE T.IDSESSIONLCK IS NOT NULL AND T.IDSESSIONLCK = PI_SESSION_ID
   AND T.CODTYPORD IN ('70','80')   -- INVOICE AND DELIVERY ORDERS
   AND T.CODSTATUS IN ('11','6')  --INVOICED OR DELIVERED   
  --SETTLED IS CONSIDERED IN VIEW 
   Group By

    T.CODEUSR,    --CODEUSRIS THE SALES MAN
    T.CODDIV,
  TA030.DTEDAY   -- Vikas, only for orders b/w open day and close day
    --TRUNC(T.DTEDELIV),
    --T.CODCUR,
    --T.CODPAYTRM,
    --T.CODPAYMOD,
    --T.CODTYPORD,
    --UD.CODPARTY
    ;
    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER,  CI_CODEUSR VARCHAR2 ,CI_CODDIV VARCHAR2 ,
   CI_DTEDAY DATE,  -- Vikas, only for orders b/w open day and close day
   -- CI_DTEORD DATE, CI_DTEDELIV DATE,
   CI_CODCUR VARCHAR2 , CI_CODPAYTRM  VARCHAR2 , CI_CODPAYMOD VARCHAR2  ) IS
      SELECT
    MAX(CODUSR)  CODUSR,
    CI_NUMORD  NUMORD,
    CODART ,
    CI_CODDIV CODDIV ,
    UMORD ,
    SUM(QTYORD) QTYORD,
    UMINV ,
    SUM(QTYINV) QTYINV,
    CODTYPROW ,
  DTEDELIV,
    MAX(CODSTATUS) CODSTATUS,
    SUM(GROSSAMOUNT) GROSSAMOUNT,
    SUM(NETAMOUNT) NETAMOUNT,
    sum(DISCOUNTAMOUNT) DISCOUNTAMOUNT,
    SUM(GIFTAMOUNT) GIFTAMOUNT,
    MAX(GROSSARTAMOUNT) GROSSARTAMOUNT, -- UNIT PRICE 
    MAX(NETARTAMOUNT) NETARTAMOUNT, -- UNIT PRICE
    max(CODBENCAUSE) CODBENCAUSE,
    MAX(CODBENSUBCAUSE) CODBENSUBCAUSE

  FROM
    (SELECT NUMORD FROM T100ORDHEAD T100,TA0300SELLINGDAY TA030 WHERE  -- Vikas, only for orders b/w open day and close day
  T100.IDDAY=TA030.IDDAY AND   
  T100.IDSESSIONLCK IS NOT NULL AND T100.IDSESSIONLCK = PI_SESSION_ID
    AND CODEUSR = CI_CODEUSR AND T100.CODDIV = CI_CODDIV AND 
  TA030.DTEDAY=CI_DTEDAY    -- Vikas, only for orders b/w open day and close day
  --TRUNC (DTEORD) = CI_DTEORD
    --AND TRUNC(DTEDELIV) = CI_DTEDELIV 
    --AND CODCUR = CI_CODCUR 
    --AND CODPAYTRM = CI_CODPAYTRM
    --AND CODPAYMOD = CI_CODPAYMOD
 ) ORDHEAD
  INNER JOIN T106ORDROW T  ON T.NUMORD = ORDHEAD.NUMORD
  AND CODTYPROW IN ('32','33')

  GROUP BY

  --CODUSR ,
  CODART ,
  --CODDIV ,
  UMORD ,
  UMINV ,
  CODTYPROW,
  DTEDELIV
       ;


    -- -----------------------------------------
    -- Cursor on main Order table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100EMPTYANDPERISH_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) 
              --NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
    AND  CODTYPORDCUST IS NULL --- NVL(CODTYPORDCUST,0)!=numord -- sherry, dtetohost can't used  since invoice orders should  be sent again as cash and credit orders 
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting Perish And Empty ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    VL_NUMROW   NUMBER:= 0; -- Used to CREATE UNIQUE NUMROW IN ORDER ROWS FOR COSLIDATION
    VL_XOUT_ROWCOUNT NUMBER:= 0;

    num_total_rows NUMBER:= 50;
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT CASH ORDERS --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT CASH ORDERS --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
       WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)
    and
            -- never exported or massive export
             --NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
     -- CODTYPORDCUST IS NULL AND
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100EMPTYANDPERISH_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )   
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
dbms_output.put_line('t100 pROCESS cOUNT  :-  '||VL_COUNT_XOUT_T100 );

    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
  ---SHERRY IF ENTERED IN THIS LOOP HAS TO EXIT
    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100

        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        
        VL_XOUT_ROWCOUNT :=0;
        SELECT COUNT(*) INTO VL_XOUT_ROWCOUNT FROM T100ORDHEAD
        WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR ;
        
        --DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

  REC_XOUT_T100.NUMORD := RL_T100.NUMORD;
  REC_XOUT_T100.CODUSR := RL_T100.CODUSR;
  REC_XOUT_T100.CODEUSR := RL_T100.CODEUSR;
  REC_XOUT_T100.CODTYPORD := RL_T100.CODTYPORD;
  REC_XOUT_T100.CODPAYMOD := RL_T100.CODPAYMOD;
  REC_XOUT_T100.CODDIV := RL_T100.CODDIV;
  REC_XOUT_T100.DTEORD := RL_T100.DTEDAY;   -- Vikas, only for orders b/w open day and close day
  REC_XOUT_T100.DTEDELIV := RL_T100.DTEDAY;  -- Vikas, only for orders b/w open day and close day
  REC_XOUT_T100.CODCUSTDELIV := RL_T100.CODCUSTDELIV;
  REC_XOUT_T100.CODCUR := RL_T100.CODCUR;
  REC_XOUT_T100.GROSSAMOUNT := RL_T100.GROSSAMOUNT;
  REC_XOUT_T100.NETAMOUNT := RL_T100.NETAMOUNT;
  REC_XOUT_T100.TAXAMOUNT := RL_T100.TAXAMOUNT;
  REC_XOUT_T100.VATAMOUNT := RL_T100.VATAMOUNT;
  REC_XOUT_T100.INCREASEAMOUNT := RL_T100.INCREASEAMOUNT;
  REC_XOUT_T100.DISCOUNTAMOUNT := RL_T100.DISCOUNTAMOUNT;
  REC_XOUT_T100.GIFTAMOUNT := RL_T100.GIFTAMOUNT;
  REC_XOUT_T100.CODWHS := RL_T100.CODWHS;
  REC_XOUT_T100.TOTPALLETS := RL_T100.TOTPALLETS;
  REC_XOUT_T100.RETURNAMOUNT := RL_T100.RETURNAMOUNT;
  REC_XOUT_T100.CODCUSTINV := RL_T100.CODCUSTINV;
  REC_XOUT_T100.CODSTATUS := RL_T100.CODSTATUS;
  REC_XOUT_T100.Z_DTE_SELINGDAY := RL_T100.DTEDAY;

  REC_XOUT_T100.NUMORDHOST := '';  --'CS-' || RL_T100.NUMORDHOST;
    REC_XOUT_T100.NUMORDCUST := 'CS-' || TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODEUSR);--RL_T100.NUMORDCUST;


  REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

   IF VL_XOUT_ROWCOUNT =0 THEN 
        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
    END IF;

        -- Head Benefits
        --EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        --VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        --VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        --EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        --VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        --VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        --EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        --VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        --VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              --DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


    --(CI_NUMORD NUMBER,  CI_CODEUSR VARCHAR2 ,CI_CODDIV VARCHAR2 , CI_DTEORD DATE
    --, CI_DTEDELIV DATE, CI_CODCUR VARCHAR2 , CI_CODPAYTRM  VARCHAR2 , CI_CODPAYMOD VARCHAR2  )

        VL_NUMROW := 0;
              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODEUSR , RL_T100.CODDIV, -- RL_T100.DTEORD , RL_T100.DTEDELIV
              RL_T100.DTEDAY, RL_T100.CODCUR , RL_T100.CODPAYTRM , RL_T100.CODPAYMOD) LOOP -- Vikas, only for orders b/w open day and close day

        VL_NUMROW :=  VL_NUMROW  + 1;

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  VL_NUMROW ;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
    -----------------------------------------------------------------------------
                REC_XOUT_T106.CODUSR := RL_T106.CODUSR;
    REC_XOUT_T106.NUMORD := RL_T106.NUMORD;
    REC_XOUT_T106.NUMROW := VL_NUMROW ; --RL_T106.NUMROW;
    REC_XOUT_T106.CODART := RL_T106.CODART;
    REC_XOUT_T106.CODDIV := RL_T106.CODDIV;
    REC_XOUT_T106.UMORD := RL_T106.UMORD;
    REC_XOUT_T106.QTYORD := RL_T106.QTYORD;
    REC_XOUT_T106.UMINV := RL_T106.UMINV;
    REC_XOUT_T106.QTYINV := RL_T106.QTYINV;
    REC_XOUT_T106.CODTYPROW := RL_T106.CODTYPROW;
  REC_XOUT_T106.DTEDELIV := RL_T106.DTEDELIV; -- CHANGE REQUEST IMPLEMENTED  ON 28NOV 2016
    REC_XOUT_T106.CODSTATUS := RL_T106.CODSTATUS;
    REC_XOUT_T106.GROSSAMOUNT := RL_T106.GROSSAMOUNT;
    REC_XOUT_T106.NETAMOUNT := RL_T106.NETAMOUNT;
    REC_XOUT_T106.DISCOUNTAMOUNT := RL_T106.DISCOUNTAMOUNT;
    REC_XOUT_T106.GIFTAMOUNT := RL_T106.GIFTAMOUNT;
    REC_XOUT_T106.GROSSARTAMOUNT := RL_T106.GROSSARTAMOUNT;
    REC_XOUT_T106.NETARTAMOUNT := RL_T106.NETARTAMOUNT;
    REC_XOUT_T106.CODBENCAUSE := RL_T106.CODBENCAUSE;
    REC_XOUT_T106.CODBENSUBCAUSE := RL_T106.CODBENSUBCAUSE;


                -----------------------------------------------------------------------------
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;


                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                --EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                --VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                --VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;


    --REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
          --REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

    --order benefitsheader lavel wher numrow is zero
/*
    INSERT INTO XIN_T101BENEFIT (NUMORD,NUMROW,CODSRC,NUMBENEFIT,VALBEN,CODDIV,CODBENCAUSE,CODBENSUBCAUSE,CODUSR,SM1_DTEPROCESS, SM1_CODPROCESS)
    SELECT
    RL_T106.NUMORD, 0, CODSRC,1,SUM(VALBEN),RL_T106.CODDIV,CODBENCAUSE,CODBENSUBCAUSE,RL_T106.CODUSR,REC_XOUT_T100.SM1_DTEPROCESS,REC_XOUT_T100.SM1_CODPROCESS
    FROM
      (SELECT NUMORD FROM T100ORDHEAD   WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
      AND CODEUSR = RL_T100.CODEUSR AND CODDIV = RL_T100.CODDIV AND TRUNC (DTEORD) = RL_T100.DTEORD
      AND TRUNC(DTEDELIV) = RL_T100.DTEDELIV AND CODCUR = RL_T100.CODCUR
      AND CODPAYTRM = RL_T100.CODPAYTRM AND CODPAYMOD = RL_T100.CODPAYMOD) ORDHEAD
    INNER JOIN
      T101BENEFIT  ORDBEN ON ORDHEAD.NUMORD = ORDBEN.NUMORD
    WHERE
      ORDBEN.NUMROW = 0
    GROUP BY
      CODSRC,CODBENCAUSE,CODBENSUBCAUSE;
*/

/*
    INSERT INTO XIN_T101BENEFIT (NUMORD,NUMROW,CODSRC,NUMBENEFIT,VALBEN,CODDIV,CODBENCAUSE,CODBENSUBCAUSE,CODUSR,SM1_DTEPROCESS, SM1_CODPROCESS)
    SELECT
    RL_T106.NUMORD, VL_NUMROW, CODSRC,MIN(NUMBENEFIT),SUM(VALBEN),RL_T106.CODDIV,CODBENCAUSE,CODBENSUBCAUSE,RL_T106.CODUSR,REC_XOUT_T100.SM1_DTEPROCESS,REC_XOUT_T100.SM1_CODPROCESS
    FROM
      (SELECT NUMORD FROM T100ORDHEAD   WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
      AND CODEUSR = RL_T100.CODEUSR AND CODDIV = RL_T100.CODDIV AND TRUNC (DTEORD) = RL_T100.DTEORD
      AND TRUNC(DTEDELIV) = RL_T100.DTEDELIV AND CODCUR = RL_T100.CODCUR
      AND CODPAYTRM = RL_T100.CODPAYTRM AND CODPAYMOD = RL_T100.CODPAYMOD) ORDHEAD
    INNER JOIN
      (SELECT NUMORD,NUMROW FROM T106ORDROW WHERE
      CODUSR = RL_T106.CODUSR AND CODART = RL_T106.CODART AND CODDIV = RL_T106.CODDIV
      AND UMORD = RL_T106.UMORD AND UMINV = RL_T106.UMINV  AND CODTYPROW = RL_T106.CODTYPROW ) ORDROWS
      ON ORDHEAD.NUMORD = ORDROWS.NUMORD
    INNER JOIN
      T101BENEFIT  ORDBEN ON ORDROWS.NUMORD = ORDBEN.NUMORD AND ORDROWS.NUMROW = ORDBEN.NUMROW
    GROUP BY
      CODSRC,CODBENCAUSE,CODBENSUBCAUSE;
*/


              /*  -- Row NOTES
               -- EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                --VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
               -- VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
               -- EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                --VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                --VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
                */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106

  /* IF VL_NUMROW = 0 THEN  --NO CHILD ROWS FOUND MEANS NO EMPTIES AND PERISH
    DELETE FROM XOUT_T100ORDHEAD WHERE NUMORD    = REC_XOUT_T100.NUMORD AND CODSTATUS = 'B';
  END IF;  */

      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET
    Z_DTETOHOST_1 = REC_XOUT_T100.SM1_DTEPROCESS,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL
          WHERE 
      NUMORD IN (SELECT NUMORD FROM T100ORDHEAD T100 , TA0300SELLINGDAY TA030 WHERE
      T100.IDDAY=TA030.IDDAY AND 
      T100.IDSESSIONLCK IS NOT NULL AND T100.IDSESSIONLCK = PI_SESSION_ID
      AND T100.CODEUSR = RL_T100.CODEUSR AND T100.CODDIV = RL_T100.CODDIV AND 
      TA030.DTEDAY= RL_T100.DTEDAY )
        
        --AND TRUNC(DTEDELIV) = RL_T100.DTEDELIV
        --AND CODCUR = RL_T100.CODCUR
        --AND CODPAYTRM = RL_T100.CODPAYTRM
        --AND CODPAYMOD = RL_T100.CODPAYMOD
        --AND CODTYPORD = RL_T100.CODTYPORD

        --RL_T100.NUMORD, RL_T100.CODEUSR , RL_T100.CODDIV, RL_T100.DTEORD , RL_T100.DTEDELIV
        -- , RL_T100.CODCUR , RL_T100.CODPAYTRM , RL_T100.CODPAYMOD

        /*NUMORD    = REC_XOUT_T100.NUMORD
              AND  CODUSR    = REC_XOUT_T100.CODUSR*/
         ;
    COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE
    IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
    AND CODEUSR = REC_XOUT_T100.CODEUSR AND CODDIV = REC_XOUT_T100.CODDIV
    AND TRUNC (DTEORD) = REC_XOUT_T100.DTEORD
    --NUMORD = REC_XOUT_T100.NUMORD
            --AND CODEUSR = REC_XOUT_T100.CODEUSR 
    --AND CODDIV = REC_XOUT_T100.CODDIV
    ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_EMPANDPERISH_ORDERS;
/*============================================================================*\
  /* Name: EXP_T10X_CONS_ORDERS
     Source View Name  Used To Lock : ZQEXP_T100CONSORDER_C
     Exports SM1 tables:
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail
      •  T101BENEFIT - head and row discount
      •  TA4410NOTES - head and row notes
      •  TA4430ANOMALIES     - head and row anomalies
      •  TA4432ANOMDETAIL    - head and row anomaly details

      Staging Area (SSA) tables
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW
      •  XOUT_T101BENEFIT
      •  XOUT_TA4410NOTES
      •  XOUT_TA4430ANOMALIES
      •  XOUT_TA4432ANOMDETAIL

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  NO FILTER IS APPLIED ON ORDER STATUS IT HAS TO BE CUSTOMIZED
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

            Error handling:
            •  All Errors will be logged in T852/T854 SM1 log tables
            •  Error on record, header and all details are discarded

       Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                              PI_SESSION_ID       - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                              PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                              PI_MASSIVE_EXP_DATE:  NULL - normal export
                                                    NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                              PI_CODE_CHAR_A : division
     Author : Sherry
     Creation Date : 27 Jul 2015
    ============================================================================ */

/*============================================================================*\
  /* Name: EXP_T10X_CREDIT_ORDERS
     Source View Name  Used To Lock : ZQEXP_T100CREDITORDER_C
     Exports SM1 tables:
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail
      •  T101BENEFIT - head and row discount
      •  TA4410NOTES - head and row notes
      •  TA4430ANOMALIES     - head and row anomalies
      •  TA4432ANOMDETAIL    - head and row anomaly details

      Staging Area (SSA) tables
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW
      •  XOUT_T101BENEFIT
      •  XOUT_TA4410NOTES
      •  XOUT_TA4430ANOMALIES
      •  XOUT_TA4432ANOMDETAIL

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  NO FILTER IS APPLIED ON ORDER STATUS IT HAS TO BE CUSTOMIZED
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

            Error handling:
            •  All Errors will be logged in T852/T854 SM1 log tables
            •  Error on record, header and all details are discarded

       Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                              PI_SESSION_ID       - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                              PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                              PI_MASSIVE_EXP_DATE:  NULL - normal export
                                                    NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                              PI_CODE_CHAR_A : division
     Author : Sherry
     Creation Date : 27 Jul 2015
    ============================================================================ */


/*============================================================================*\
  /* Name: EXP_T10X_CASH_ORDERS (SUMMARISED)
     Source View Name  Used To Lock : ZQEXP_T100CREDITORDER_C
     Exports SM1 tables:
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail
      •  T101BENEFIT - head and row discount
      •  TA4410NOTES - head and row notes
      •  TA4430ANOMALIES     - head and row anomalies
      •  TA4432ANOMDETAIL    - head and row anomaly details

      Staging Area (SSA) tables
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW
      •  XOUT_T101BENEFIT
      •  XOUT_TA4410NOTES
      •  XOUT_TA4430ANOMALIES
      •  XOUT_TA4432ANOMDETAIL

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  NO FILTER IS APPLIED ON ORDER STATUS IT HAS TO BE CUSTOMIZED
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

            Error handling:
            •  All Errors will be logged in T852/T854 SM1 log tables
            •  Error on record, header and all details are discarded

       Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                              PI_SESSION_ID       - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                              PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                              PI_MASSIVE_EXP_DATE:  NULL - normal export
                                                    NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                              PI_CODE_CHAR_A : division
     Author : Sherry
     Creation Date : 26 Aug 2015
    ============================================================================ */


   --
   /*============================================================================*\
  /* Name: EXP_TA019X_SURVEY
     Exports SM1 tables:
        •  TA0191CUSTOMERSURVEY
        •  TA0192CUSTOMERSURVEYDET
        Into Staging Area (SSA) tables
        •  XOUT_TA0191CUSTOMERSURVEY
        •  XOUT_TA0192CUSTOMERSURVEY

        Before exporting it :
        •  cleans old records from XOUT_LOG table
        •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

        Export logic:
        •  exports all records not locked by SM1 User that have field TA0191.DTETOHOST set to NULL or lower than last modified data (TA0191.DTEMOD)
        •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
        •  deletes records on XOUT table already present that havn't been already read by ERP
        •  Inserts records into XOUT table from SM1 table
        •  Commits each TA0191.IDSURVEY block of information
        •  Set date TA0191.DTETOHOST into SM1 header table

      ---
      PAY ATTENTION !! PROCEDURES EXP_TA0191X_SURVEY AND EXP_TA0191_SURVEYTYPE CANNOT RUN BOTH IN THE SAME INSTALLATION AS THEY
                       DO UPDATE SAME FIELD TA0191.DTETOHOST. YOU NEED TO CHOOSE THE ONE YOU WANT TO USE BY YOUR CLIENT

      ---

      Error handling:
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  On Error all records with same IDSURVEY will be discarded

       Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID    - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'  wihout any check on DTETOHOST
                             PI_MASSIVE_EXP_DATE:  NULL - normal export (DTEMOD>DTETOHOST or DTETOHOST is null)
                                                   NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE without any check on DTETOHOST

                            PI_CODTYPSURVEY : SURVEY TYPE, if ALL then all surveys
     Outputparameters :     PO_MSG           - message of error if procedure exit with error
                            PO_STATUS        - 0 OK; -1 Error
     Author : Mariangela Bandiera
     Creation Date : 21 November 2012
     ----
     Updates :
     Mbandiera - 5/03/2013 - exclude QUESTIONNAIRE type from export

    ============================================================================ */

  PROCEDURE EXP_TA019X_SURVEY(PI_PROGR_H       IN NUMBER,
                              PI_SESSION_ID        IN NUMBER,
                              PI_DOCUMENTKEY      IN VARCHAR2,
                              PI_MASSIVE_EXP_DATE IN DATE,
                              PI_CODTYPSURVEY      IN VARCHAR2,
                              PO_MSG               OUT VARCHAR,
                              PO_STATUS            OUT NUMBER ) IS
    --
    -- Cursor on main survey table
    --
    CURSOR CL_TA0191 IS
      SELECT  T91.*
        FROM  TA0191CUSTOMERSURVEY T91
        WHERE T91.IDSESSIONLCK IS NOT NULL AND T91.IDSESSIONLCK = PI_SESSION_ID
          -- Attention DO NOT change this order
        ORDER BY T91.CODTYPSURVEY, T91.IDSURVEY ASC;


    CURSOR CL_TA0192(CI_IDSURVEY VARCHAR2) IS
      SELECT *
        FROM  TA0192CUSTOMERSURVEYDET
        WHERE IDSURVEY = CI_IDSURVEY;

    -- -----------------------------------------
    -- Cursor on main survey table where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_TA0191 IS
      SELECT IDSURVEY, CODTYPSURVEY, DTELCK, CODUSRLCK
        FROM  TA0191CUSTOMERSURVEY
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
          and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY IDSURVEY ASC;
    --
    VL_MESSAGE_H   VARCHAR2(4000) := 'Error while exporting SURVEYS TA091X';
    VL_MESSAGE_D   VARCHAR2(4000) := NULL;
    --
    VL_PROGR_D_TA0191    NUMBER := 0;
    VL_COUNT_XOUT_TA0191 NUMBER := 0;
    VL_INS_TA0191        NUMBER := 0;
    ---
    VL_PROGR_D_TA0192      NUMBER := 0;
    VL_COUNT_XOUT_TA0192   NUMBER := 0;
    VL_COUNT_XOUT_TA0192_P NUMBER := 0;
    VL_INS_TA0192          NUMBER := 0;
    VL_INS_TA0192_P        NUMBER := 0;
    --
    VL_SURTYPE      TA0191CUSTOMERSURVEY.CODTYPSURVEY%TYPE:=NVL(TRIM(UPPER(PI_CODTYPSURVEY)), 'ALL');
    --
    REC_XOUT_TA0191  XOUT_TA0191CUSTOMERSURV%ROWTYPE;
    REC_XOUT_TA0192  XOUT_TA0192CUSTOMERSURV%ROWTYPE;
    --
    VL_IDSURVEY_PREV     TA0191CUSTOMERSURVEY.IDSURVEY%TYPE:= '@';
    VL_STATUS NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_TA0191 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                  'SURVEY HEAD',
                                                  'EXPORT --> TA0191CUSTOMERSURVEY',
                                                   0,
                                                   NULL);


    VL_PROGR_D_TA0192 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                  'SURVEY DET',
                                                  'EXPORT --> TA0192CUSTOMERSURVEYDET',
                                                   0,
                                                   NULL);

    -- --------------------------------------------------------------
    -- Identifies records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'TA0191CUSTOMERSURVEY';
        UPDATE TA0191CUSTOMERSURVEY
        SET IDSESSIONLCK = PI_SESSION_ID,
            CODUSRLCK    = C_SYSUSR,
            DTELCK       = XSYSDATE
            WHERE not exists ( select null from T035LOGGEDUSERS T035 where T035.IDSESSION = NVL(IDSESSIONLCK, '@') AND T035.LASTCHECK > TRUNC(XSYSDATE)-1 ) AND
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
            AND (  VL_SURTYPE = 'ALL' OR CODTYPSURVEY = VL_SURTYPE )
            AND  CODTYPSURVEY NOT IN (SELECT CODTYPSURVEY FROM TA0184SURVEY WHERE CODTYPDETAIL='QUEST');-- NO QUEST types comes here;
        VL_COUNT_XOUT_TA0191 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table TA0191CUSTOMERSURVEY to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_TA0191 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'. IDSurvey='||R_LOCKED.IDSURVEY||'CodTypSurvey = '||R_LOCKED.CODTYPSURVEY||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_TA0191,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;

    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA0191, 'XOUT_TA0191CUSTOMERSURVEY', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA0192, 'XOUT_TA0192CUSTOMERSURVEY', VL_STATUS);
     -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA0191, 'XOUT_TA0191CUSTOMERSURVEY', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA0192, 'XOUT_TA0192CUSTOMERSURVEY', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- loop in main table TA0191CUSTOMERSURVEY
    -- --------------------------------------------------------------
    FOR RL_TA0191 IN CL_TA0191 LOOP
    BEGIN
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
      --
      VL_MESSAGE_H :=   'CodTypSurvey: '||RL_TA0191.CODTYPSURVEY||
                        'IdSurvey: '||RL_TA0191.IDSURVEY;


       -- Update dtetohost last idsurvey
       -- if all records have been stored with success then it makes the commit
       -- set DTETOHOST
       IF VL_STATUS = 0  AND VL_IDSURVEY_PREV<>'@' THEN
          VL_INS_TA0191 := VL_INS_TA0191 + 1;
          VL_INS_TA0192 := VL_INS_TA0192 + VL_INS_TA0192_P ;
          VL_INS_TA0192_P := 0;

         VL_MESSAGE_D := 'Update dtetohost';
          UPDATE TA0191CUSTOMERSURVEY
          SET    DTETOHOST = XSYSDATE
          WHERE  IDSURVEY  = VL_IDSURVEY_PREV ;

         COMMIT;
        ELSIF (VL_STATUS <> 0) THEN
         ROLLBACK;
        END IF;

        -- Release updated records
        VL_MESSAGE_D := 'Release lock';
        IF ( VL_IDSURVEY_PREV <> '@') THEN
          UPDATE TA0191CUSTOMERSURVEY
          SET       DTELCK          = NULL,
                    IDSESSIONLCK    = NULL,
                    CODUSRLCK       = NULL
           WHERE  IDSURVEY  = VL_IDSURVEY_PREV ;
          COMMIT;
        END IF;

       -- Delete XOUT with same idsurvey
       DELETE XOUT_TA0191CUSTOMERSURV WHERE IDSURVEY = RL_TA0191.IDSURVEY AND ERP_DTEPROCESS IS NULL;
       DELETE XOUT_TA0192CUSTOMERSURV WHERE IDSURVEY = RL_TA0191.IDSURVEY AND ERP_DTEPROCESS IS NULL;

       -- Inserts new head
          VL_MESSAGE_D := 'Insert Head ta0191';
          REC_XOUT_TA0191.IDSURVEY :=RL_TA0191.IDSURVEY;
          REC_XOUT_TA0191.CODPARTY :=RL_TA0191.CODPARTY;
          REC_XOUT_TA0191.CODUSR :=RL_TA0191.CODUSR;
          REC_XOUT_TA0191.CODTYPSURVEY :=RL_TA0191.CODTYPSURVEY;
          REC_XOUT_TA0191.DTEVISIT :=RL_TA0191.DTEVISIT;
          REC_XOUT_TA0191.HOURVISIT :=RL_TA0191.HOURVISIT;
          REC_XOUT_TA0191.HOURVISITTO :=RL_TA0191.HOURVISITTO;
          REC_XOUT_TA0191.DTEFROM :=RL_TA0191.DTEFROM;
          REC_XOUT_TA0191.DTETO :=RL_TA0191.DTETO;
          REC_XOUT_TA0191.IDMISSION :=RL_TA0191.IDMISSION;
          REC_XOUT_TA0191.CODSTATUS :=RL_TA0191.CODSTATUS;
          REC_XOUT_TA0191.CODPRIORITY :=RL_TA0191.CODPRIORITY;
          REC_XOUT_TA0191.DESHQNOTE :=RL_TA0191.DESHQNOTE;
          REC_XOUT_TA0191.DESNOTE :=RL_TA0191.DESNOTE;
          REC_XOUT_TA0191.REFDOCUMENTKEY :=RL_TA0191.REFDOCUMENTKEY;
          REC_XOUT_TA0191.CODUSRSUP :=RL_TA0191.CODUSRSUP;
          REC_XOUT_TA0191.CODDIV :=RL_TA0191.CODDIV;
          REC_XOUT_TA0191.CODANNCAUSE :=RL_TA0191.CODANNCAUSE;
          REC_XOUT_TA0191.CODSTRUCTURE :=RL_TA0191.CODSTRUCTURE;
          REC_XOUT_TA0191.DOCUMENTKEY :=RL_TA0191.DOCUMENTKEY;
          REC_XOUT_TA0191.FLGPRIVATE :=RL_TA0191.FLGPRIVATE;
          REC_XOUT_TA0191.CODTIMEAVAILABLE :=RL_TA0191.CODTIMEAVAILABLE;
          REC_XOUT_TA0191.DTETOSERVER :=RL_TA0191.DTETOSERVER;
          REC_XOUT_TA0191.DTETOCLIENT :=RL_TA0191.DTETOCLIENT;
          REC_XOUT_TA0191.DTECRE :=RL_TA0191.DTECRE;
          REC_XOUT_TA0191.CODUSRCRE :=RL_TA0191.CODUSRCRE;
          REC_XOUT_TA0191.DTEMOD :=RL_TA0191.DTEMOD;
          REC_XOUT_TA0191.CODUSRMOD :=RL_TA0191.CODUSRMOD;
          REC_XOUT_TA0191.DTELCK :=RL_TA0191.DTELCK;
          REC_XOUT_TA0191.CODUSRLCK :=RL_TA0191.CODUSRLCK;
          REC_XOUT_TA0191.IDSESSIONLCK :=RL_TA0191.IDSESSIONLCK;
          REC_XOUT_TA0191.FLGANN :=RL_TA0191.FLGANN;
          REC_XOUT_TA0191.SPENTTIME :=RL_TA0191.SPENTTIME;
          REC_XOUT_TA0191.FLGAUTOCREATED :=RL_TA0191.FLGAUTOCREATED;
          REC_XOUT_TA0191.CODUSRMODREAL :=RL_TA0191.CODUSRMODREAL;
          REC_XOUT_TA0191.CODUSRCREREAL :=RL_TA0191.CODUSRCREREAL;
          REC_XOUT_TA0191.MISSION_DTEVISIT :=RL_TA0191.MISSION_DTEVISIT;
          REC_XOUT_TA0191.MISSION_HOURVISIT :=RL_TA0191.MISSION_HOURVISIT;
          REC_XOUT_TA0191.MISSION_HOURVISITTO :=RL_TA0191.MISSION_HOURVISITTO;
          REC_XOUT_TA0191.IDQUESTIONNAIRE :=RL_TA0191.IDQUESTIONNAIRE;
          REC_XOUT_TA0191.CALCULATEDSPENTTIME :=RL_TA0191.CALCULATEDSPENTTIME;
          REC_XOUT_TA0191.DTETOHOST :=RL_TA0191.DTETOHOST;
          REC_XOUT_TA0191.DRIVETIME :=RL_TA0191.DRIVETIME;
          REC_XOUT_TA0191.NUMKM :=RL_TA0191.NUMKM;
          REC_XOUT_TA0191.FLGOBJECTIVE :=RL_TA0191.FLGOBJECTIVE;
          REC_XOUT_TA0191.GPSVALLATITUDE :=RL_TA0191.GPSVALLATITUDE;
          REC_XOUT_TA0191.GPSVALLONGITUDE :=RL_TA0191.GPSVALLONGITUDE;
          REC_XOUT_TA0191.IDVISIT :=RL_TA0191.IDVISIT;
          REC_XOUT_TA0191.PREPNOTE :=RL_TA0191.PREPNOTE;
          REC_XOUT_TA0191.FLGMODIFY :=RL_TA0191.FLGMODIFY;
          REC_XOUT_TA0191.IDRECURRENCE :=RL_TA0191.IDRECURRENCE;
          REC_XOUT_TA0191.RECURRENCENO :=RL_TA0191.RECURRENCENO;
          REC_XOUT_TA0191.CODUSRORIG :=RL_TA0191.CODUSRORIG;
          REC_XOUT_TA0191.CONTACTMODE :=RL_TA0191.CONTACTMODE;
          --
          REC_XOUT_TA0191.SM1_DTEPROCESS :=XSYSDATE;
          REC_XOUT_TA0191.SM1_CODPROCESS :=PI_PROGR_H;

          INSERT INTO XOUT_TA0191CUSTOMERSURV VALUES REC_XOUT_TA0191;

      IF ( VL_STATUS = 0) THEN
        BEGIN
        FOR RL_TA0192 IN CL_TA0192(RL_TA0191.IDSURVEY) LOOP
          -- DETAILS
          VL_MESSAGE_D := 'Insert detail ta0192';

              REC_XOUT_TA0192.IDSURVEY :=RL_TA0192.IDSURVEY;
              REC_XOUT_TA0192.CODART :=RL_TA0192.CODART;
              REC_XOUT_TA0192.CODDIV :=RL_TA0192.CODDIV;
              REC_XOUT_TA0192.CODLOCATION :=RL_TA0192.CODLOCATION;
              REC_XOUT_TA0192.CODEAN13 :=RL_TA0192.CODEAN13;
              REC_XOUT_TA0192.STRMEASURE1 :=RL_TA0192.STRMEASURE1;
              REC_XOUT_TA0192.STRMEASURE2 :=RL_TA0192.STRMEASURE2;
              REC_XOUT_TA0192.STRMEASURE3 :=RL_TA0192.STRMEASURE3;
              REC_XOUT_TA0192.STRMEASURE4 :=RL_TA0192.STRMEASURE4;
              REC_XOUT_TA0192.STRMEASURE5 :=RL_TA0192.STRMEASURE5;
              REC_XOUT_TA0192.STRMEASURE6 :=RL_TA0192.STRMEASURE6;
              REC_XOUT_TA0192.STRMEASURE7 :=RL_TA0192.STRMEASURE7;
              REC_XOUT_TA0192.STRMEASURE8 :=RL_TA0192.STRMEASURE8;
              REC_XOUT_TA0192.STRMEASURE9 :=RL_TA0192.STRMEASURE9;
              REC_XOUT_TA0192.STRMEASURE10 :=RL_TA0192.STRMEASURE10;
              REC_XOUT_TA0192.STRMEASURE11 :=RL_TA0192.STRMEASURE11;
              REC_XOUT_TA0192.STRMEASURE12 :=RL_TA0192.STRMEASURE12;
              REC_XOUT_TA0192.STRMEASURE13 :=RL_TA0192.STRMEASURE13;
              REC_XOUT_TA0192.STRMEASURE14 :=RL_TA0192.STRMEASURE14;
              REC_XOUT_TA0192.STRMEASURE15 :=RL_TA0192.STRMEASURE15;
              REC_XOUT_TA0192.STRMEASURE16 :=RL_TA0192.STRMEASURE16;
              REC_XOUT_TA0192.STRMEASURE17 :=RL_TA0192.STRMEASURE17;
              REC_XOUT_TA0192.STRMEASURE18 :=RL_TA0192.STRMEASURE18;
              REC_XOUT_TA0192.STRMEASURE19 :=RL_TA0192.STRMEASURE19;
              REC_XOUT_TA0192.STRMEASURE20 :=RL_TA0192.STRMEASURE20;
              REC_XOUT_TA0192.STRMEASURE21 :=RL_TA0192.STRMEASURE21;
              REC_XOUT_TA0192.STRMEASURE22 :=RL_TA0192.STRMEASURE22;
              REC_XOUT_TA0192.STRMEASURE23 :=RL_TA0192.STRMEASURE23;
              REC_XOUT_TA0192.STRMEASURE24 :=RL_TA0192.STRMEASURE24;
              REC_XOUT_TA0192.STRMEASURE25 :=RL_TA0192.STRMEASURE25;
              REC_XOUT_TA0192.STRMEASURE26 :=RL_TA0192.STRMEASURE26;
              REC_XOUT_TA0192.STRMEASURE27 :=RL_TA0192.STRMEASURE27;
              REC_XOUT_TA0192.STRMEASURE28 :=RL_TA0192.STRMEASURE28;
              REC_XOUT_TA0192.STRMEASURE29 :=RL_TA0192.STRMEASURE29;
              REC_XOUT_TA0192.STRMEASURE30 :=RL_TA0192.STRMEASURE30;
              REC_XOUT_TA0192.STRMEASURE31 :=RL_TA0192.STRMEASURE31;
              REC_XOUT_TA0192.STRMEASURE32 :=RL_TA0192.STRMEASURE32;
              REC_XOUT_TA0192.STRMEASURE33 :=RL_TA0192.STRMEASURE33;
              REC_XOUT_TA0192.STRMEASURE34 :=RL_TA0192.STRMEASURE34;
              REC_XOUT_TA0192.STRMEASURE35 :=RL_TA0192.STRMEASURE35;
              REC_XOUT_TA0192.STRMEASURE36 :=RL_TA0192.STRMEASURE36;
              REC_XOUT_TA0192.STRMEASURE37 :=RL_TA0192.STRMEASURE37;
              REC_XOUT_TA0192.STRMEASURE38 :=RL_TA0192.STRMEASURE38;
              REC_XOUT_TA0192.STRMEASURE39 :=RL_TA0192.STRMEASURE39;
              REC_XOUT_TA0192.STRMEASURE40 :=RL_TA0192.STRMEASURE40;
              REC_XOUT_TA0192.STRMEASURE41 :=RL_TA0192.STRMEASURE41;
              REC_XOUT_TA0192.STRMEASURE42 :=RL_TA0192.STRMEASURE42;
              REC_XOUT_TA0192.STRMEASURE43 :=RL_TA0192.STRMEASURE43;
              REC_XOUT_TA0192.STRMEASURE44 :=RL_TA0192.STRMEASURE44;
              REC_XOUT_TA0192.STRMEASURE45 :=RL_TA0192.STRMEASURE45;
              REC_XOUT_TA0192.STRMEASURE46 :=RL_TA0192.STRMEASURE46;
              REC_XOUT_TA0192.STRMEASURE47 :=RL_TA0192.STRMEASURE47;
              REC_XOUT_TA0192.STRMEASURE48 :=RL_TA0192.STRMEASURE48;
              REC_XOUT_TA0192.STRMEASURE49 :=RL_TA0192.STRMEASURE49;
              REC_XOUT_TA0192.STRMEASURE50 :=RL_TA0192.STRMEASURE50;
              REC_XOUT_TA0192.STRMEASURE51 :=RL_TA0192.STRMEASURE51;
              REC_XOUT_TA0192.STRMEASURE52 :=RL_TA0192.STRMEASURE52;
              REC_XOUT_TA0192.STRMEASURE53 :=RL_TA0192.STRMEASURE53;
              REC_XOUT_TA0192.STRMEASURE54 :=RL_TA0192.STRMEASURE54;
              REC_XOUT_TA0192.STRMEASURE55 :=RL_TA0192.STRMEASURE55;
              REC_XOUT_TA0192.STRMEASURE56 :=RL_TA0192.STRMEASURE56;
              REC_XOUT_TA0192.STRMEASURE57 :=RL_TA0192.STRMEASURE57;
              REC_XOUT_TA0192.STRMEASURE58 :=RL_TA0192.STRMEASURE58;
              REC_XOUT_TA0192.STRMEASURE59 :=RL_TA0192.STRMEASURE59;
              REC_XOUT_TA0192.STRMEASURE60 :=RL_TA0192.STRMEASURE60;
              REC_XOUT_TA0192.LNGMEASURE1 :=RL_TA0192.LNGMEASURE1;
              REC_XOUT_TA0192.LNGMEASURE2 :=RL_TA0192.LNGMEASURE2;
              REC_XOUT_TA0192.LNGMEASURE3 :=RL_TA0192.LNGMEASURE3;
              REC_XOUT_TA0192.LNGMEASURE4 :=RL_TA0192.LNGMEASURE4;
              REC_XOUT_TA0192.LNGMEASURE5 :=RL_TA0192.LNGMEASURE5;
              REC_XOUT_TA0192.LNGMEASURE6 :=RL_TA0192.LNGMEASURE6;
              REC_XOUT_TA0192.LNGMEASURE7 :=RL_TA0192.LNGMEASURE7;
              REC_XOUT_TA0192.LNGMEASURE8 :=RL_TA0192.LNGMEASURE8;
              REC_XOUT_TA0192.LNGMEASURE9 :=RL_TA0192.LNGMEASURE9;
              REC_XOUT_TA0192.LNGMEASURE10 :=RL_TA0192.LNGMEASURE10;
              REC_XOUT_TA0192.DBLMEASURE1 :=RL_TA0192.DBLMEASURE1;
              REC_XOUT_TA0192.DBLMEASURE2 :=RL_TA0192.DBLMEASURE2;
              REC_XOUT_TA0192.DBLMEASURE3 :=RL_TA0192.DBLMEASURE3;
              REC_XOUT_TA0192.DBLMEASURE4 :=RL_TA0192.DBLMEASURE4;
              REC_XOUT_TA0192.DBLMEASURE5 :=RL_TA0192.DBLMEASURE5;
              REC_XOUT_TA0192.DBLMEASURE6 :=RL_TA0192.DBLMEASURE6;
              REC_XOUT_TA0192.DBLMEASURE7 :=RL_TA0192.DBLMEASURE7;
              REC_XOUT_TA0192.DBLMEASURE8 :=RL_TA0192.DBLMEASURE8;
              REC_XOUT_TA0192.DBLMEASURE9 :=RL_TA0192.DBLMEASURE9;
              REC_XOUT_TA0192.DBLMEASURE10 :=RL_TA0192.DBLMEASURE10;
              REC_XOUT_TA0192.DTEMEASURE1 :=RL_TA0192.DTEMEASURE1;
              REC_XOUT_TA0192.DTEMEASURE2 :=RL_TA0192.DTEMEASURE2;
              REC_XOUT_TA0192.DTEMEASURE3 :=RL_TA0192.DTEMEASURE3;
              REC_XOUT_TA0192.DTEMEASURE4 :=RL_TA0192.DTEMEASURE4;
              REC_XOUT_TA0192.DTEMEASURE5 :=RL_TA0192.DTEMEASURE5;
              REC_XOUT_TA0192.DTEMEASURE6 :=RL_TA0192.DTEMEASURE6;
              REC_XOUT_TA0192.DTEMEASURE7 :=RL_TA0192.DTEMEASURE7;
              REC_XOUT_TA0192.DTEMEASURE8 :=RL_TA0192.DTEMEASURE8;
              REC_XOUT_TA0192.DTEMEASURE9 :=RL_TA0192.DTEMEASURE9;
              REC_XOUT_TA0192.DTEMEASURE10 :=RL_TA0192.DTEMEASURE10;
              REC_XOUT_TA0192.LNGMEASURE11 :=RL_TA0192.LNGMEASURE11;
              REC_XOUT_TA0192.LNGMEASURE12 :=RL_TA0192.LNGMEASURE12;
              REC_XOUT_TA0192.LNGMEASURE13 :=RL_TA0192.LNGMEASURE13;
              REC_XOUT_TA0192.LNGMEASURE14 :=RL_TA0192.LNGMEASURE14;
              REC_XOUT_TA0192.LNGMEASURE15 :=RL_TA0192.LNGMEASURE15;
              REC_XOUT_TA0192.LNGMEASURE16 :=RL_TA0192.LNGMEASURE16;
              REC_XOUT_TA0192.LNGMEASURE17 :=RL_TA0192.LNGMEASURE17;
              REC_XOUT_TA0192.LNGMEASURE18 :=RL_TA0192.LNGMEASURE18;
              REC_XOUT_TA0192.LNGMEASURE19 :=RL_TA0192.LNGMEASURE19;
              REC_XOUT_TA0192.LNGMEASURE20 :=RL_TA0192.LNGMEASURE20;
              REC_XOUT_TA0192.LNGMEASURE21 :=RL_TA0192.LNGMEASURE21;
              REC_XOUT_TA0192.LNGMEASURE22 :=RL_TA0192.LNGMEASURE22;
              REC_XOUT_TA0192.LNGMEASURE23 :=RL_TA0192.LNGMEASURE23;
              REC_XOUT_TA0192.LNGMEASURE24 :=RL_TA0192.LNGMEASURE24;
              REC_XOUT_TA0192.LNGMEASURE25 :=RL_TA0192.LNGMEASURE25;
              REC_XOUT_TA0192.LNGMEASURE26 :=RL_TA0192.LNGMEASURE26;
              REC_XOUT_TA0192.LNGMEASURE27 :=RL_TA0192.LNGMEASURE27;
              REC_XOUT_TA0192.LNGMEASURE28 :=RL_TA0192.LNGMEASURE28;
              REC_XOUT_TA0192.LNGMEASURE29 :=RL_TA0192.LNGMEASURE29;
              REC_XOUT_TA0192.LNGMEASURE30 :=RL_TA0192.LNGMEASURE30;
              REC_XOUT_TA0192.FLGMEASURE1 :=RL_TA0192.FLGMEASURE1;
              REC_XOUT_TA0192.FLGMEASURE2 :=RL_TA0192.FLGMEASURE2;
              REC_XOUT_TA0192.FLGMEASURE3 :=RL_TA0192.FLGMEASURE3;
              REC_XOUT_TA0192.FLGMEASURE4 :=RL_TA0192.FLGMEASURE4;
              REC_XOUT_TA0192.FLGMEASURE5 :=RL_TA0192.FLGMEASURE5;
              REC_XOUT_TA0192.FLGMEASURE6 :=RL_TA0192.FLGMEASURE6;
              REC_XOUT_TA0192.FLGMEASURE7 :=RL_TA0192.FLGMEASURE7;
              REC_XOUT_TA0192.FLGMEASURE8 :=RL_TA0192.FLGMEASURE8;
              REC_XOUT_TA0192.FLGMEASURE9 :=RL_TA0192.FLGMEASURE9;
              REC_XOUT_TA0192.FLGMEASURE10 :=RL_TA0192.FLGMEASURE10;
              --
              REC_XOUT_TA0192.SM1_DTEPROCESS := REC_XOUT_TA0191.SM1_DTEPROCESS;
              REC_XOUT_TA0192.SM1_CODPROCESS := REC_XOUT_TA0191.SM1_CODPROCESS;

              INSERT INTO XOUT_TA0192CUSTOMERSURv VALUES REC_XOUT_TA0192;

              VL_INS_TA0192_P := VL_INS_TA0192_P + 1;
              VL_COUNT_XOUT_TA0192_P := CL_TA0192%ROWCOUNT;
          END LOOP;  -- DETAILS
         EXCEPTION WHEN OTHERS THEN

            VL_STATUS := -1;

            VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H ||VL_MESSAGE_D , 1, 2000);
            PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_TA0192,
                                           SQLCODE,
                                           VL_MESSAGE_H);
          END;

      END IF;


     VL_COUNT_XOUT_TA0192 := VL_COUNT_XOUT_TA0192 + VL_COUNT_XOUT_TA0192_P;
     VL_COUNT_XOUT_TA0192_P := 0;




     EXCEPTION WHEN EX_EXIT THEN

        VL_STATUS := -1;

      WHEN OTHERS THEN

        VL_STATUS := -1;

        VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H ||VL_MESSAGE_D , 1, 2000);
        PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                       VL_PROGR_D_TA0191,
                                       SQLCODE,
                                       VL_MESSAGE_H);
      END;

     VL_IDSURVEY_PREV := RL_TA0191.IDSURVEY;

    END LOOP;
      IF VL_STATUS = 0  AND VL_IDSURVEY_PREV<>'@' THEN
          VL_INS_TA0191 := VL_INS_TA0191 + 1;
          VL_INS_TA0192 := VL_INS_TA0192 + VL_INS_TA0192_P ;

          VL_MESSAGE_D := 'Update dtetohost';
          UPDATE TA0191CUSTOMERSURVEY
          SET    DTETOHOST = XSYSDATE
          WHERE  IDSURVEY  = VL_IDSURVEY_PREV ;

         COMMIT;
        ELSIF (VL_STATUS <> 0) THEN
         ROLLBACK;
        END IF;

     -- Releases all records
    VL_MESSAGE_D := 'Release lock';
    UPDATE TA0191CUSTOMERSURVEY
    SET       DTELCK          = NULL,
              IDSESSIONLCK    = NULL,
              CODUSRLCK       = NULL
     WHERE  IDSESSIONLCK  = PI_SESSION_ID;

    COMMIT;


   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA0192,
                                      0,
                                      VL_COUNT_XOUT_TA0192,
                                      VL_INS_TA0192,
                                      VL_COUNT_XOUT_TA0192-VL_INS_TA0192);
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA0191,
                                      0,
                                      VL_COUNT_XOUT_TA0191,
                                      VL_INS_TA0191,
                                      VL_COUNT_XOUT_TA0191-VL_INS_TA0191);

    PO_MSG := VL_INS_TA0191||'/'||VL_COUNT_XOUT_TA0191||' Survey Exported';
    PO_STATUS :=VL_INS_TA0191;


  EXCEPTION WHEN OTHERS THEN

          ROLLBACK;

               -- Releases all records
              UPDATE TA0191CUSTOMERSURVEY
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
               WHERE  IDSESSIONLCK  = PI_SESSION_ID;

              COMMIT;



          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H ||VL_MESSAGE_D|| SQLERRM , 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_TA0191,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;
END;

 /*============================================================================*\
  /* Name: EXP_TA019X_SURVEYTYPE
     Exports SM1 tables:
      •  TA0191CUSTOMERSURVEY
      •  TA0192CUSTOMERSURVEYDET
      Into Staging Area (SSA) tables
      •  XOUT_<CODTYPSURVEY>

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field TA0191.DTETOHOST set to NULL or lower than last modified data (TA0191.DTEMOD)
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each TA0191.IDSURVEY block of information
      •  Set date TA0191.DTETOHOST into SM1 header table

      ---
      PAY ATTENTION !! PROCEDURES EXP_TA0191X_SURVEY AND EXP_TA0191_SURVEYTYPE CANNOT RUN BOTH IN THE SAME INSTALLATION AS THEY
                       DO UPDATE SAME FIELD TA0191.DTETOHOST. YOU NEED TO CHOOSE THE ONE YOU WANT TO USE BY YOUR CLIENT


     Error handling:
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  On Error all record with same IDSESSION will be discarded


       Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID    - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'  wihout any check on DTETOHOST
                             PI_MASSIVE_EXP_DATE:  NULL - normal export (DTEMOD>DTETOHOST or DTETOHOST is null)
                                                   NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE without any check on DTETOHOST

                            PI_CODTYPSURVEY : SURVEY TYPE, if ALL then all surveys (if ALL or null exports all surveys )
     Outputparameters :     PO_MSG           - message of error if procedure exit with error
                            PO_STATUS        - 0 OK; -1 Error
     Author : Mariangela Bandiera
     Creation Date : 21 November 2012
     ----
     Updates :
     Mbandiera - 5/03/2013 - exclude QUESTIONNAIRE type from export

    ============================================================================ */

  PROCEDURE EXP_TA019X_SURVEYTYPE(PI_PROGR_H       IN NUMBER,
                          PI_SESSION_ID        IN NUMBER,
                          PI_DOCUMENTKEY      IN VARCHAR2,
                          PI_MASSIVE_EXP_DATE IN DATE,
                          PI_CODTYPSURVEY      IN VARCHAR2,
                          PO_MSG               OUT VARCHAR,
                          PO_STATUS            OUT NUMBER ) IS
    --
    -- Cursor on main survey table
    --
    CURSOR CL_TA019X IS
      SELECT
         T91.IDSURVEY,
         T91.CODPARTY,
         T91.CODUSR,
         T91.CODTYPSURVEY,
         T91.DTEVISIT ,
         T91.HOURVISIT,
         T91.HOURVISITTO,
         T91.DTEFROM ,
         T91.DTETO   ,
         T91.IDMISSION ,
         T91.CODSTATUS ,
         T91.CALCULATEDSPENTTIME,
         T92.CODART,
         T92.CODDIV ,
         T92.CODLOCATION,
         T92.CODEAN13
        FROM  TA0191CUSTOMERSURVEY T91
        JOIN  TA0184SURVEY T84 ON ( T84.CODTYPSURVEY = T91.CODTYPSURVEY )
        JOIN  TA0192CUSTOMERSURVEYDET T92 ON  (T91.IDSURVEY = T92.IDSURVEY)
        WHERE
              T91.IDSESSIONLCK IS NOT NULL AND
              T91.IDSESSIONLCK = PI_SESSION_ID
          -- Attention DO NOT change this order
        ORDER BY T91.CODTYPSURVEY, T91.IDSURVEY ASC;


    -- -----------------------------------------
    -- Cursor on main survey table where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_TA0191 (CI_SURTYPE VARCHAR) IS
      SELECT T91.IDSURVEY, T91.CODTYPSURVEY, T91.DTELCK, T91.CODUSRLCK
        FROM  TA0191CUSTOMERSURVEY T91
        JOIN  TA0184SURVEY T84 ON ( T84.CODTYPSURVEY = T91.CODTYPSURVEY )
        WHERE T91.IDSESSIONLCK IS NOT NULL AND T91.IDSESSIONLCK != PI_SESSION_ID
         and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(T91.DTEMOD, T91.DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(T91.DTETOHOST, C_SM1_NULL_DATE))
         AND (  CI_SURTYPE = 'ALL' OR T91.CODTYPSURVEY = CI_SURTYPE )
         AND T84.CODTYPDETAIL !='QUEST'
        ORDER BY T91.IDSURVEY ASC;
    --
    VL_MESSAGE_H   VARCHAR2(4000) := 'Error while exporting SURVEYS TA091X';
    VL_MESSAGE_D   VARCHAR2(4000) := NULL;
    --
    VL_PROGR_D_TA0191    NUMBER := 0;
    VL_COUNT_XOUT_TA0191 NUMBER := 0;
    VL_INS_TA0191        NUMBER := 0;

    VL_XOUT_TAB    VARCHAR2(60);
    VL_XOUT_FIELDS_H VARCHAR2(4000) :=  'IDSURVEY,CODPARTY,CODUSR,CODTYPSURVEY,
                                        DTEVISIT,HOURVISIT,HOURVISITTO,DTEFROM,
                                        DTETO,IDMISSION,CODSTATUS,CALCULATEDSPENTTIME,
                                        CODART,CODDIV,CODLOCATION,CODEAN13'; -- Header

    VL_XOUT_FIELDS_T VARCHAR2(4000) :=  'SM1_DTEPROCESS,SM1_CODPROCESS'; -- Tail

    vl_MySql       VARCHAR2(4000);

    VL_MEAS_COD     VARCHAR2(4000);
    VL_MEAS_FIELDS  VARCHAR2(4000);
    VL_SURTYPE      TA0191CUSTOMERSURVEY.CODTYPSURVEY%TYPE:=NVL(TRIM(UPPER(PI_CODTYPSURVEY)), 'ALL');


    VL_CODTYPSURVEY_PREV TA0191CUSTOMERSURVEY.CODTYPSURVEY%TYPE:= '@';
    VL_IDSURVEY_PREV     TA0191CUSTOMERSURVEY.IDSURVEY%TYPE:= '@';
    VL_STATUS NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_TA0191 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                  'SURVEY HEAD',
                                                  'EXPORT --> TA0191CUSTOMERSURVEY',
                                                   0,
                                                   NULL);


    -- --------------------------------------------------------------
    -- Identifies records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'TA0191CUSTOMERSURVEY';
        UPDATE TA0191CUSTOMERSURVEY
        SET IDSESSIONLCK = PI_SESSION_ID,
            CODUSRLCK    = C_SYSUSR,
            DTELCK       = XSYSDATE
            WHERE not exists ( select null from T035LOGGEDUSERS T035 where T035.IDSESSION = NVL(IDSESSIONLCK, '0') AND T035.LASTCHECK > TRUNC(XSYSDATE)-1 ) AND
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
            AND (  VL_SURTYPE = 'ALL' OR CODTYPSURVEY = VL_SURTYPE )
            AND  CODTYPSURVEY NOT IN (SELECT CODTYPSURVEY FROM TA0184SURVEY WHERE CODTYPDETAIL='QUEST');-- NO QUEST types comes here;
        VL_COUNT_XOUT_TA0191 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table TA0191CUSTOMERSURVEY to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_TA0191(VL_SURTYPE) LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'. IDSurvey='||R_LOCKED.IDSURVEY||'CodTypSurvey = '||R_LOCKED.CODTYPSURVEY||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_TA0191,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table TA0191CUSTOMERSURVEY
    -- --------------------------------------------------------------
    FOR RL_TA019X IN CL_TA019X LOOP
    BEGIN
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
      --
      VL_MESSAGE_H :=   'CodTypSurvey: '||RL_TA019X.CODTYPSURVEY;

      -- ------------------------
      --- SURVEY TYPE IS CHANGED
      -- ------------------------
      IF (VL_CODTYPSURVEY_PREV <> RL_TA019X.CODTYPSURVEY ) THEN

      BEGIN
         -- reset status
         VL_STATUS := 0;

         -- Retrieved the xout name from the package that creates this type of xout
         VL_MESSAGE_D := 'Retrieving xout name';
         VL_XOUT_TAB := PKG_UTILS.fn_get_starea_tname('XOUT_A',RL_TA019X.CODTYPSURVEY);

         -- Clean old records in log table
         VL_MESSAGE_D := 'Cleaning up xout_log';
         P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA0191, VL_XOUT_TAB, VL_STATUS);
         IF ( VL_STATUS <> 0 ) THEN
            RAISE EX_EXIT;
         END IF;
         -- Moves records from staging area to log staging area
         VL_MESSAGE_D := 'Moving xout to log';
         P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA0191, VL_XOUT_TAB, VL_STATUS);
         IF ( VL_STATUS <> 0 ) THEN
            RAISE EX_EXIT;
         END IF;
         -- Init Measure lists
         VL_MESSAGE_D := 'Retrieving xout fields list';
         P_INIT_MEASURE_LIST (RL_TA019X.CODTYPSURVEY,  VL_MEAS_COD, VL_MEAS_FIELDS, VL_STATUS,  VL_MESSAGE_D);

         IF ( VL_STATUS <> 0 OR VL_MEAS_COD IS NULL OR VL_MEAS_FIELDS IS NULL) THEN
            RAISE EX_EXIT;
         END IF;

       EXCEPTION WHEN OTHERS THEN
          RAISE EX_EXIT;
       END;

      END IF;


      -- ------------------------
      --- SURVEY ID IS CHANGED
      -- ------------------------
      IF ( VL_IDSURVEY_PREV <> RL_TA019X.IDSURVEY AND VL_STATUS = 0) THEN

       -- Update dtetohost last idsurvey
       -- if all records have been stored with success then it makes the commit
       -- set DTETOHOST
       IF VL_STATUS = 0  AND VL_IDSURVEY_PREV<>'@' THEN
          VL_INS_TA0191 := VL_INS_TA0191 + 1;

          VL_MESSAGE_D := 'Update dtetohost';
          UPDATE TA0191CUSTOMERSURVEY
          SET    DTETOHOST = XSYSDATE
          WHERE  IDSURVEY  = VL_IDSURVEY_PREV ;

         COMMIT;
        ELSIF (VL_STATUS <> 0) THEN
         ROLLBACK;
        END IF;

        -- Release updated records
        VL_MESSAGE_D := 'Release lock';
        IF ( VL_IDSURVEY_PREV <> '@') THEN
          UPDATE TA0191CUSTOMERSURVEY
          SET       DTELCK          = NULL,
                    IDSESSIONLCK    = NULL,
                    CODUSRLCK       = NULL
           WHERE  IDSURVEY  = VL_IDSURVEY_PREV ;
          COMMIT;
        END IF;

       -- Delete XOUT with same idsurvey
        vl_MySql := 'Delete '||vl_xout_tab||' where idsurvey = '''||RL_TA019X.IDSURVEY||'''';
        VL_MESSAGE_D := vl_MySql;
        execute immediate (vl_MySql);


      END IF;

      IF ( VL_STATUS = 0) THEN
      -- Inserting new Survey Detail
      vl_MySql := ' Insert into '||VL_XOUT_TAB||'('||VL_XOUT_FIELDS_H||') VALUES ( '''||
                   RL_TA019X.IDSURVEY||''','''||
                   RL_TA019X.CODPARTY||''','''||
                   RL_TA019X.CODUSR||''','''||
                   RL_TA019X.CODTYPSURVEY||''',to_date('''||
                   RL_TA019X.DTEVISIT ||''','''||C_SM1_FORMAT_DATE||'''),to_date('''||
                   RL_TA019X.HOURVISIT||''','''||C_SM1_FORMAT_DATE||'''),to_date('''||
                   RL_TA019X.HOURVISITTO||''','''||C_SM1_FORMAT_DATE||'''),to_date('''||
                   RL_TA019X.DTEFROM ||''','''||C_SM1_FORMAT_DATE||'''),to_date('''||
                   RL_TA019X.DTETO   ||''','''||C_SM1_FORMAT_DATE||'''),'''||
                   RL_TA019X.IDMISSION ||''','''||
                   RL_TA019X.CODSTATUS ||''','||
                   RL_TA019X.CALCULATEDSPENTTIME||','''||
                   RL_TA019X.CODART||''','''||
                   RL_TA019X.CODDIV ||''','''||
                   RL_TA019X.CODLOCATION||''','''||
                   RL_TA019X.CODEAN13 ||''')' ;


       VL_MESSAGE_D := vl_MySql;
       execute immediate ( vl_MySql );

       -- Updating with measures
       vl_MySql := 'Update '||vl_xout_tab||' set ( '||VL_MEAS_COD||','||VL_XOUT_FIELDS_T||' ) = ( select '||VL_MEAS_FIELDS|| ', XSYSDATE,'||PI_PROGR_H||
                  ' from TA0192CUSTOMERSURVEYDET T
                   where T.IDSURVEY = '''    ||RL_TA019X.IDSURVEY ||
                  ''' and   T.CODART= '''      ||RL_TA019X.CODART ||
                  ''' and   T.CODDIV= '''      ||RL_TA019X.CODDIV ||
                  ''' and   T.CODLOCATION = '''||RL_TA019X.CODLOCATION||''')';

       VL_MESSAGE_D := vl_MySql;
       execute immediate ( vl_MySql );

      END IF;
     EXCEPTION WHEN EX_EXIT THEN

        VL_STATUS := -1;

      WHEN OTHERS THEN

        VL_STATUS := -1;

        VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H ||VL_MESSAGE_D , 1, 4000);
        PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                       VL_PROGR_D_TA0191,
                                       SQLCODE,
                                       VL_MESSAGE_H);
      END;


    VL_CODTYPSURVEY_PREV := RL_TA019X.CODTYPSURVEY;
    VL_IDSURVEY_PREV     := RL_TA019X.IDSURVEY;

    END LOOP;
    -- set dtetohost on last idsurvery
     IF VL_STATUS = 0 AND VL_IDSURVEY_PREV<>'@' THEN
          VL_INS_TA0191 := VL_INS_TA0191 + 1;

          VL_MESSAGE_D := 'Update dtetohost';
          UPDATE TA0191CUSTOMERSURVEY
          SET    DTETOHOST = XSYSDATE
          WHERE  IDSURVEY  = VL_IDSURVEY_PREV ;


         COMMIT;
        ELSE
         ROLLBACK;

     END IF;

     -- Releases all records
    VL_MESSAGE_D := 'Release lock';
    UPDATE TA0191CUSTOMERSURVEY
    SET       DTELCK          = NULL,
              IDSESSIONLCK    = NULL,
              CODUSRLCK       = NULL
     WHERE  IDSESSIONLCK  = PI_SESSION_ID;

    COMMIT;


   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA0191,
                                      0,
                                      VL_COUNT_XOUT_TA0191,
                                      VL_INS_TA0191,
                                      VL_COUNT_XOUT_TA0191-VL_INS_TA0191);

    PO_MSG := VL_INS_TA0191||'/'||VL_COUNT_XOUT_TA0191||' Survey Exported';
    PO_STATUS :=VL_INS_TA0191;


  EXCEPTION WHEN OTHERS THEN

          ROLLBACK;

               -- Releases all records
              UPDATE TA0191CUSTOMERSURVEY
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
               WHERE  IDSESSIONLCK  = PI_SESSION_ID;

              COMMIT;



          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H ||VL_MESSAGE_D|| SQLERRM , 1, 4000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_TA0191,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_TA019X_SURVEYTYPE;
  --
    /*============================================================================*\
  /* Name: EXP_TA50X_PROMO
        Exports SM1 tables:
      •  TA5000PROMOACTION          : Promo Head
      •  TA5002PROMOACTIONACTIVITIES: Promo Activities ( 1-n  to TA5000)
      •  TA5012PARTICIPANTS         :  Promotional Action Participants (1-n to TA5000)
      •  TA5014DELIVERYPOINTS        : Promotional Action Delivery points (1-n to TA5000)
      •  TA5020PRODUCTS             : Promo Products ( 1-n  to TA5000)
      •  TA5022PRODUCTACTIVITIES    : Promo Products Activities ( 1-n  to TA5020)
      •  TA5026PRODUCTDETAILS        : Product details (1-n to TA5050)
      Into Staging Area (SSA) tables
      •  XOUT_TA5000PROMOACTION
      •  XOUT_TA5002PROMOACTIONA
      •  XOUT_TA5012PARTICIPANTS
      •  XOUT_TA5014DELIVERYPOIN
      •  XOUT_TA5020PRODUCTS
      •  XOUT_TA5022PRODUCTACTIV
      •  XOUT_TA5026PRODUCTDETAILS

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field TA5000.DTETOHOST set to NULL or lower than last modified data (TA5000.DTEMOD)
      •  It locks all records to be export in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that hasn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each TA5000.IDACTION block of information
      •  Set date TA5000.DTETOHOST into SM1 header table

            Error handling:
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  On Error all record with same IDACTION will be discarded

       Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID    - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'  wihout any check on DTETOHOST
                             PI_MASSIVE_EXP_DATE:  NULL - normal export (DTEMOD>DTETOHOST or DTETOHOST is null)
                                                   NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE without any check on DTETOHOST


       Output parameters :  PO_MSG           - message of error if procedure exit with error
                                      PO_STATUS        - 0 OK; -1 Error

     Author : Ioana Vasilescu
     Creation Date : 04 February 2013
     ----
     Updates :
     -- 2014 01 27; 011: Mbandiera;  added tables TA5022; TA5012; TA5014; TA5026

    ============================================================================ */
  PROCEDURE EXP_TA50X_PROMO(PI_PROGR_H       IN NUMBER,
                          PI_SESSION_ID        IN NUMBER,
                          PI_DOCUMENTKEY      IN VARCHAR2,
                          PI_MASSIVE_EXP_DATE IN DATE,
                          PO_MSG               OUT VARCHAR,
                          PO_STATUS            OUT NUMBER ) IS

      -- -----------------------------------------
    -- Cursor on main Promotion table TA5000PROMOACTION
    -- -----------------------------------------
    CURSOR CL_TA5000 IS
      SELECT
          *
        FROM  TA5000PROMOACTION
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY IDACTION ASC;

    -- -------------------------------------
    -- Cursor on  TA5002PROMOACTIONACTIVITIES
    -- -------------------------------------
    CURSOR CL_TA5002(CI_IDACTION VARCHAR2) IS
      SELECT *
        FROM TA5002PROMOACTIONACTIVITIES
       WHERE IDACTION = CI_IDACTION;

    -- -------------------------------------
    -- Cursor on Promo Participants TA5012PARTICIPANTS
    -- -------------------------------------
    CURSOR CL_TA5012(CI_IDACTION VARCHAR2) IS
      SELECT *
        FROM TA5012PARTICIPANTS
       WHERE IDACTION = CI_IDACTION ;

    -- -------------------------------------
    -- Cursor on Promo Deliverypoint TA5014DELIVERYPOINTS
    -- -------------------------------------
    CURSOR CL_TA5014(CI_IDACTION VARCHAR2) IS
      SELECT *
        FROM TA5014DELIVERYPOINTS
       WHERE IDACTION = CI_IDACTION ;

    -- -------------------------------------
    -- Cursor on Products  TA5020PRODUCTS
    -- -------------------------------------
    CURSOR CL_TA5020(CI_IDACTION VARCHAR2) IS
      SELECT *
        FROM TA5020PRODUCTS
       WHERE IDACTION = CI_IDACTION ;


    -- -------------------------------------
    -- Cursor on Products Activities  TA5022PRODUCTACTIVITIES
    -- -------------------------------------
    CURSOR CL_TA5022(CI_IDACTION VARCHAR2) IS
      SELECT *
        FROM TA5022PRODUCTACTIVITIES
       WHERE IDACTION = CI_IDACTION ;


    -- -------------------------------------
    -- Cursor on Products Detail TA5026PRODUCTDETAILS
    -- -------------------------------------
    CURSOR CL_TA5026(CI_IDACTION VARCHAR2) IS
      SELECT *
        FROM TA5026PRODUCTDETAILS
       WHERE IDACTION = CI_IDACTION ;

    -- -----------------------------------------
    -- Cursor on main Promotion table TA5000PROMOACTION where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_TA5000 IS
      SELECT
          IDACTION,
          CODUSRLCK,
          DTELCK
        FROM  TA5000PROMOACTION
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY IDACTION ASC;

     --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting PROMOTIONS TA500X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_TA5000       NUMBER := 0;
    VL_COUNT_XOUT_TA5000    NUMBER := 0;
    VL_INS_TA5000           NUMBER := 0;
    --
    VL_PROGR_D_TA5002       NUMBER := 0;
    VL_COUNT_XOUT_TA5002    NUMBER := 0;
    VL_COUNT_XOUT_TA5002_P  NUMBER := 0;
    VL_INS_TA5002           NUMBER := 0;
    --
    VL_PROGR_D_TA5012       NUMBER := 0;
    VL_COUNT_XOUT_TA5012    NUMBER := 0;
    VL_COUNT_XOUT_TA5012_P  NUMBER := 0;
    VL_INS_TA5012           NUMBER := 0;
    --
    VL_PROGR_D_TA5014       NUMBER := 0;
    VL_COUNT_XOUT_TA5014    NUMBER := 0;
    VL_COUNT_XOUT_TA5014_P  NUMBER := 0;
    VL_INS_TA5014           NUMBER := 0;
    --
    VL_PROGR_D_TA5020       NUMBER := 0;
    VL_COUNT_XOUT_TA5020    NUMBER := 0;
    VL_COUNT_XOUT_TA5020_P  NUMBER := 0;
    VL_INS_TA5020           NUMBER := 0;
    --
    VL_PROGR_D_TA5022       NUMBER := 0;
    VL_COUNT_XOUT_TA5022    NUMBER := 0;
    VL_COUNT_XOUT_TA5022_P  NUMBER := 0;
    VL_INS_TA5022           NUMBER := 0;
    --
    VL_PROGR_D_TA5026       NUMBER := 0;
    VL_COUNT_XOUT_TA5026    NUMBER := 0;
    VL_COUNT_XOUT_TA5026_P  NUMBER := 0;
    VL_INS_TA5026           NUMBER := 0;
    --
    REC_XOUT_TA5000 XOUT_TA5000PROMOACTION%ROWTYPE   := NULL;
    REC_XOUT_TA5002 XOUT_TA5002PROMOACTIONA%ROWTYPE  := NULL;
    REC_XOUT_TA5012 XOUT_TA5012PARTICIPANTS%ROWTYPE  := NULL;
    REC_XOUT_TA5014 XOUT_TA5014DELIVERYPOIN%ROWTYPE  := NULL;
    REC_XOUT_TA5020 XOUT_TA5020PRODUCTS%ROWTYPE      := NULL;
    REC_XOUT_TA5022 XOUT_TA5022PRODUCTACTIV%ROWTYPE  := NULL;
    REC_XOUT_TA5026 XOUT_TA5026PRODUCTDETAI%ROWTYPE  := NULL;

    VL_STATUS  NUMBER:= 0;
    VL_STEP    NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --

   BEGIN
   VL_PROGR_D_TA5000 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'PROMO ACTION',
                                                'EXPORT --> TA5000PROMOACTION',
                                                 0,
                                                 NULL);
    --
    VL_PROGR_D_TA5002 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'PROMO ACTIVITIES',
                                                 'EXPORT --> TA5002PROMOACTIONA',
                                                  0,
                                                   NULL);
    --
    VL_PROGR_D_TA5012 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'PROMO PARTICIPANTS',
                                                 'EXPORT --> TA5012PARTICIPANTS',
                                                  0,
                                                   NULL);
   --
    VL_PROGR_D_TA5014 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'PROMO POD',
                                                 'EXPORT --> TA5014DELIVERYPOINTS',
                                                  0,
                                                   NULL);
    --
    VL_PROGR_D_TA5020 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'PRODUCTS',
                                                 'EXPORT --> TA5020PRODUCTS',
                                                  0,
                                                  NULL);
    --
    VL_PROGR_D_TA5022 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'PRODUCTS ACT',
                                                 'EXPORT --> TA5022PRODUCTACTIVITIES',
                                                  0,
                                                  NULL);
    --
    VL_PROGR_D_TA5026 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'PRODUCTS DET',
                                                 'EXPORT --> TA5026PRODUCTDETAILS',
                                                  0,
                                                  NULL);
     -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA5000, 'XOUT_TA5000PROMOACTION' , VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA5002, 'XOUT_TA5002PROMOACTIONA', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA5002, 'XOUT_TA5012PARTICIPANTS', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA5002, 'XOUT_TA5014DELIVERYPOIN', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA5020, 'XOUT_TA5020PRODUCTS'    , VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA5020, 'XOUT_TA5022PRODUCTACTIV', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA5026, 'XOUT_TA5026PRODUCTDETAI', VL_STATUS);

    --
    -- Moves already read by ERP records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA5000, 'XOUT_TA5000PROMOACTION' , VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA5002, 'XOUT_TA5002PROMOACTIONA', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
      P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA5002, 'XOUT_TA5012PARTICIPANTS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
      P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA5002, 'XOUT_TA5014DELIVERYPOIN', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA5020, 'XOUT_TA5020PRODUCTS'    , VL_STATUS);
      IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA5020, 'XOUT_TA5022PRODUCTACTIV' , VL_STATUS);
      IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
     END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA5002, 'XOUT_TA5026PRODUCTDETAI', VL_STATUS);
      IF ( VL_STATUS <> 0 ) THEN
        RAISE EX_EXIT;
      END IF;
    --
    -- --------------------------------------------------------------
    -- Identifies Header table to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED
    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'TA5000PROMOACTION';

        UPDATE TA5000PROMOACTION
        SET IDSESSIONLCK = PI_SESSION_ID,
            DTELCK         = XSYSDATE,
            CODUSRLCK      = C_SYSUSR
            WHERE not exists ( select null from T035LOGGEDUSERS T035 where T035.IDSESSION = NVL(IDSESSIONLCK, 0) AND T035.LASTCHECK > TRUNC(XSYSDATE)-1 ) AND
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE));

        VL_COUNT_XOUT_TA5000 := SQL%ROWCOUNT;

    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking Header Table: '||VL_MESSAGE_D||' '||SQLERRM;
      RAISE EX_EXIT;
    END;
     -- --------------------------------------------------------------
    -- loops locked records in main table TA5000 to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_TA5000 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.IDACTION='||R_LOCKED.IDACTION||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_TA5000,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


     -- --------------------------------------------------------------
    -- loop in main table TA5000PROMOACTION
    -- --------------------------------------------------------------
    FOR RL_TA5000 IN CL_TA5000 LOOP

      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;

      --
      VL_MESSAGE_H :=   'Promo: '||RL_TA5000.IDACTION;
      --
      BEGIN --- HEAD TA5000

        -- Delete already exported actions with same ID that havn't been read by ERP yet
        VL_MESSAGE_D := 'Delete XOUT_TA5000PROMOACTION ';
        DElETE XOUT_TA5000PROMOACTION WHERE IDACTION = RL_TA5000.IDACTION AND ERP_DTEPROCESS IS NULL;

        VL_MESSAGE_D := 'Insert XOUT_TA5000PROMOACTION ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table
        REC_XOUT_TA5000.IDACTION          :=RL_TA5000.IDACTION;
        REC_XOUT_TA5000.DESACTION         :=RL_TA5000.DESACTION;
        REC_XOUT_TA5000.CODDIV            :=RL_TA5000.CODDIV;
        REC_XOUT_TA5000.CODRESPONSIBLE    :=RL_TA5000.CODRESPONSIBLE;
        REC_XOUT_TA5000.CODCONTRACTOR     :=RL_TA5000.CODCONTRACTOR;
        REC_XOUT_TA5000.LEVCONTRACTOR     :=RL_TA5000.LEVCONTRACTOR;
        REC_XOUT_TA5000.TOTALPOTENTIAL    :=RL_TA5000.TOTALPOTENTIAL;
        REC_XOUT_TA5000.CODCOVERING       :=RL_TA5000.CODCOVERING;
        REC_XOUT_TA5000.DTESTARTSELLIN    :=RL_TA5000.DTESTARTSELLIN;
        REC_XOUT_TA5000.DTEENDSELLIN      :=RL_TA5000.DTEENDSELLIN;
        REC_XOUT_TA5000.DELTASELLIN       :=RL_TA5000.DELTASELLIN;
        REC_XOUT_TA5000.DTESTARTSELLOUT   :=RL_TA5000.DTESTARTSELLIN;
        REC_XOUT_TA5000.DTEENDSELLOUT     :=RL_TA5000.DTEENDSELLOUT;
        REC_XOUT_TA5000.DTEABORT          :=RL_TA5000.DTEABORT;
        REC_XOUT_TA5000.CODDEVELOPMENT    :=RL_TA5000.CODDEVELOPMENT;
        REC_XOUT_TA5000.CODCONTRACTUALMODE:=RL_TA5000.CODCONTRACTUALMODE;
        REC_XOUT_TA5000.LEVPARTICIPANTS   :=RL_TA5000.LEVPARTICIPANTS;
        REC_XOUT_TA5000.FLGPARTICIPANTSBLOCKED   :=RL_TA5000.FLGPARTICIPANTSBLOCKED;
        REC_XOUT_TA5000.FLGDELIVERPOINTSBLOCKED  :=RL_TA5000.FLGDELIVERPOINTSBLOCKED;
        REC_XOUT_TA5000.DELIVERYPOINTSFILTERSGROUPNAME  :=RL_TA5000.DELIVERYPOINTSFILTERSGROUPNAME;
        REC_XOUT_TA5000.IDWFMODEL          :=RL_TA5000.IDWFMODEL;
        REC_XOUT_TA5000.IDWFSTATE          :=RL_TA5000.IDWFSTATE;
        REC_XOUT_TA5000.PARENTIDACTION     :=RL_TA5000.PARENTIDACTION;
        REC_XOUT_TA5000.SOURCEIDACTION     :=RL_TA5000.SOURCEIDACTION;
        REC_XOUT_TA5000.CODUSRCOPY         :=RL_TA5000.CODUSRCOPY;
        REC_XOUT_TA5000.DTECRE             :=RL_TA5000.DTECRE;
        REC_XOUT_TA5000.CODUSRCRE          :=RL_TA5000.CODUSRCRE;
        REC_XOUT_TA5000.DTEMOD             :=RL_TA5000.DTEMOD;
        REC_XOUT_TA5000.CODUSRMOD          :=RL_TA5000.CODUSRMOD;
        REC_XOUT_TA5000.DTESTARTNEGOTIATION :=RL_TA5000.DTESTARTNEGOTIATION;
        REC_XOUT_TA5000.DTEENDNEGOTIATION   :=RL_TA5000.DTEENDNEGOTIATION;
        REC_XOUT_TA5000.ATTRIBUTE1          :=RL_TA5000.ATTRIBUTE1;
        REC_XOUT_TA5000.ATTRIBUTE2          :=RL_TA5000.ATTRIBUTE2;
        REC_XOUT_TA5000.ATTRIBUTE3          :=RL_TA5000.ATTRIBUTE3;
        REC_XOUT_TA5000.NUMATTRIBUTE1       :=RL_TA5000.NUMATTRIBUTE1;
        REC_XOUT_TA5000.NUMATTRIBUTE2       :=RL_TA5000.NUMATTRIBUTE2;
        REC_XOUT_TA5000.NUMATTRIBUTE3       :=RL_TA5000.NUMATTRIBUTE3;
        --
        REC_XOUT_TA5000.SM1_DTEPROCESS          :=XSYSDATE;
        REC_XOUT_TA5000.SM1_CODPROCESS          :=PI_PROGR_H;

        INSERT INTO XOUT_TA5000PROMOACTION VALUES REC_XOUT_TA5000;


       EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_TA5000,
                                           SQLCODE,
                                           VL_MESSAGE_H);
       END; -- HEAD TA5000
        -- -----------------------------------
        -- TA5002PROMOACTIONACTIVITIES
        -- -----------------------------------
        BEGIN
        --
        IF ( VL_STATUS = 0  ) THEN
              --  TA5002PROMOACTIONACTIVITIES

              VL_MESSAGE_D := 'Delete XOUT_TA5002PROMOACTIONA ';
              DELETE XOUT_TA5002PROMOACTIONA WHERE IDACTION = RL_TA5000.IDACTION AND ERP_DTEPROCESS IS NULL;

              FOR RL_TA5002 IN CL_TA5002(RL_TA5000.IDACTION) LOOP


               VL_MESSAGE_H := 'Action: '|| RL_TA5002.IDACTION || '/' ||
                               'Activity : '|| RL_TA5002.CODACTIVITY;

               VL_MESSAGE_D := 'Insert XOUT_TA5002PROMOACTIONA ';

                -- Here you can customize field elaboration
                -- the default is the xout has the same value of sm1 table
                REC_XOUT_TA5002.IDACTION :=RL_TA5002.IDACTION;
                REC_XOUT_TA5002.CODACTIVITY :=RL_TA5002.CODACTIVITY;
                REC_XOUT_TA5002.CONTRIBUTION1 :=RL_TA5002.CONTRIBUTION1;
                REC_XOUT_TA5002.CONTRIBUTION2 :=RL_TA5002.CONTRIBUTION2;
                REC_XOUT_TA5002.CONTRIBUTION3 :=RL_TA5002.CONTRIBUTION3;
                REC_XOUT_TA5002.REFERENCEAGENCY :=RL_TA5002.REFERENCEAGENCY;
                REC_XOUT_TA5002.ESTIMATEDCOST :=RL_TA5002.ESTIMATEDCOST;
                REC_XOUT_TA5002.STRMEASURE1 :=RL_TA5002.STRMEASURE1;
                REC_XOUT_TA5002.FLGMEASURE1 :=RL_TA5002.FLGMEASURE1;
                --
                REC_XOUT_TA5002.SM1_DTEPROCESS          :=XSYSDATE;
                REC_XOUT_TA5002.SM1_CODPROCESS          :=PI_PROGR_H;
                --
                INSERT INTO XOUT_TA5002PROMOACTIONA VALUES REC_XOUT_TA5002;

                VL_INS_TA5002 := VL_INS_TA5002 + 1;
                VL_COUNT_XOUT_TA5002_P := CL_TA5002%ROWCOUNT;


               END LOOP ;--TA5002
            VL_COUNT_XOUT_TA5002 := VL_COUNT_XOUT_TA5002 + VL_COUNT_XOUT_TA5002_P;
            VL_COUNT_XOUT_TA5002_P := 0;
            END IF;
           EXCEPTION WHEN OTHERS THEN
                VL_STATUS := -1;
                VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

                PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_TA5002,
                                           SQLCODE,
                                           VL_MESSAGE_H);
           END;


           --
           -- TA5012PARTICIPANTS
           --

           IF ( VL_STATUS = 0 ) THEN
           BEGIN
            VL_MESSAGE_D := 'Delete XOUT_TA5012PARTICIPANTS';
            DELETE XOUT_TA5012PARTICIPANTS WHERE IDACTION = RL_TA5000.IDACTION AND ERP_DTEPROCESS IS NULL;

            FOR RL_TA5012 IN CL_TA5012(RL_TA5000.IDACTION) LOOP

                 VL_MESSAGE_H := 'Action: '|| RL_TA5012.IDACTION || '/' ||
                                 'Participant : '|| RL_TA5012.CODPARTICIPANT ;

                VL_MESSAGE_D := 'Insert XOUT_TA5012PARTICIPANTS ';
                -- Here you can customize field elaboration
                -- the default is the xout has the same value of sm1 table

                REC_XOUT_TA5012.IDACTION            :=RL_TA5012.IDACTION;
                REC_XOUT_TA5012.CODPARTICIPANT      :=RL_TA5012.CODPARTICIPANT;
                REC_XOUT_TA5012.FLGINCLUSION        :=RL_TA5012.FLGINCLUSION;
                REC_XOUT_TA5012.CODLASTSAVEDSTATUS  :=RL_TA5012.CODLASTSAVEDSTATUS;

                --
                REC_XOUT_TA5012.SM1_DTEPROCESS          :=XSYSDATE;
                REC_XOUT_TA5012.SM1_CODPROCESS          :=PI_PROGR_H;
                --
                INSERT INTO XOUT_TA5012PARTICIPANTS VALUES REC_XOUT_TA5012;
                --
                VL_INS_TA5012 := VL_INS_TA5012 + 1;
                VL_COUNT_XOUT_TA5012_P := CL_TA5012%ROWCOUNT;

             END LOOP;--TA5012
             VL_COUNT_XOUT_TA5012 := VL_COUNT_XOUT_TA5012 + VL_COUNT_XOUT_TA5012_P;
             VL_COUNT_XOUT_TA5012_P := 0;
          EXCEPTION WHEN OTHERS THEN
                VL_STATUS := -1;
                VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);
                PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_TA5012,
                                           SQLCODE,
                                           VL_MESSAGE_H);
          END;
         END IF;

           --
           -- TA5014DELIVERYPOINTS
           --

           IF ( VL_STATUS = 0 ) THEN
           BEGIN
            VL_MESSAGE_D := 'Delete XOUT_TA5014DELIVERYPOIN ';
            DELETE XOUT_TA5014DELIVERYPOIN WHERE IDACTION = RL_TA5000.IDACTION AND ERP_DTEPROCESS IS NULL;

            FOR RL_TA5014 IN CL_TA5014(RL_TA5000.IDACTION) LOOP

                 VL_MESSAGE_H := 'Action: '|| RL_TA5014.IDACTION || '/' ||
                                 'DeliveryPoint : '|| RL_TA5014.CODDELIVERYPOINT ;

                VL_MESSAGE_D := 'Insert XOUT_TA5014DELIVERYPOIN ';
                -- Here you can customize field elaboration
                -- the default is the xout has the same value of sm1 table

                REC_XOUT_TA5014.IDACTION            :=RL_TA5014.IDACTION;
                REC_XOUT_TA5014.CODDELIVERYPOINT    :=RL_TA5014.CODDELIVERYPOINT;
                REC_XOUT_TA5014.FLGINCLUSION        :=RL_TA5014.FLGINCLUSION;
                REC_XOUT_TA5014.CODLASTSAVEDSTATUS  :=RL_TA5014.CODLASTSAVEDSTATUS;
                REC_XOUT_TA5014.DTESTART            :=RL_TA5014.DTESTART;
                REC_XOUT_TA5014.DTEEND              :=RL_TA5014.DTEEND;
                REC_XOUT_TA5014.CODNODE0            :=RL_TA5014.CODNODE0;
                REC_XOUT_TA5014.CODNODE1            :=RL_TA5014.CODNODE1;
                REC_XOUT_TA5014.CODNODE2            :=RL_TA5014.CODNODE2;
                REC_XOUT_TA5014.CODNODE3            :=RL_TA5014.CODNODE3;
                REC_XOUT_TA5014.CODNODE4            :=RL_TA5014.CODNODE4;
                REC_XOUT_TA5014.CODNODE5            :=RL_TA5014.CODNODE5;
                REC_XOUT_TA5014.CODNODE6            :=RL_TA5014.CODNODE6;
                REC_XOUT_TA5014.CODNODE7            :=RL_TA5014.CODNODE7;


                --
                REC_XOUT_TA5014.SM1_DTEPROCESS          :=XSYSDATE;
                REC_XOUT_TA5014.SM1_CODPROCESS          :=PI_PROGR_H;
                --
                INSERT INTO XOUT_TA5014DELIVERYPOIN VALUES REC_XOUT_TA5014;
                --
                VL_INS_TA5014 := VL_INS_TA5014 + 1;
                VL_COUNT_XOUT_TA5014_P := CL_TA5014%ROWCOUNT;

             END LOOP;--TA5014
             VL_COUNT_XOUT_TA5014 := VL_COUNT_XOUT_TA5014 + VL_COUNT_XOUT_TA5014_P;
             VL_COUNT_XOUT_TA5014_P := 0;
          EXCEPTION WHEN OTHERS THEN
                VL_STATUS := -1;
                VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);
                PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_TA5014,
                                           SQLCODE,
                                           VL_MESSAGE_H);
          END;
         END IF;
           --
           -- TA5020PRODUCTS
           --

           IF ( VL_STATUS = 0 ) THEN
           BEGIN
            VL_MESSAGE_D := 'Delete XOUT_TA5020PRODUCTS ';
            DELETE XOUT_TA5020PRODUCTS WHERE IDACTION = RL_TA5000.IDACTION AND ERP_DTEPROCESS IS NULL;

            FOR RL_TA5020 IN CL_TA5020(RL_TA5000.IDACTION) LOOP



                 VL_MESSAGE_H := 'Action: '|| RL_TA5020.IDACTION || '/' ||
                                 'Product : '|| RL_TA5020.CODPRODUCT || '/' ||
                                 'Level : '|| RL_TA5020.LEVPRODUCT;

                VL_MESSAGE_D := 'Insert XOUT_TA5020PRODUCTS ';
                -- Here you can customize field elaboration
                -- the default is the xout has the same value of sm1 table

                REC_XOUT_TA5020.IDACTION :=RL_TA5020.IDACTION;
                REC_XOUT_TA5020.CODPRODUCT :=RL_TA5020.CODPRODUCT;
                REC_XOUT_TA5020.LEVPRODUCT :=RL_TA5020.LEVPRODUCT;
            --    REC_XOUT_TA5020.CODCAUSE :=RL_TA5020.CODCAUSE;
                REC_XOUT_TA5020.QTYESTIMATED :=RL_TA5020.QTYESTIMATED;
                REC_XOUT_TA5020.QTYSIMULATED :=RL_TA5020.QTYSIMULATED;
                REC_XOUT_TA5020.QTYBASELINE :=RL_TA5020.QTYBASELINE;
                REC_XOUT_TA5020.QTYUPLIFT :=RL_TA5020.QTYUPLIFT;
                REC_XOUT_TA5020.DISCOUNTPERCENTAGE1 :=RL_TA5020.DISCOUNTPERCENTAGE1;
                REC_XOUT_TA5020.DISCOUNTPERCENTAGE2 :=RL_TA5020.DISCOUNTPERCENTAGE2;
                REC_XOUT_TA5020.DISCOUNTPERCENTAGE3 :=RL_TA5020.DISCOUNTPERCENTAGE3;
                REC_XOUT_TA5020.PIECEDISCOUNT1 :=RL_TA5020.PIECEDISCOUNT1;
                REC_XOUT_TA5020.PIECEDISCOUNT2 :=RL_TA5020.PIECEDISCOUNT2;
                REC_XOUT_TA5020.PIECEDISCOUNT3 :=RL_TA5020.PIECEDISCOUNT3;
                REC_XOUT_TA5020.GOODSDISCOUNTQTYTOBUY :=RL_TA5020.GOODSDISCOUNTQTYTOBUY;
                REC_XOUT_TA5020.GOODSDISCOUNTQTYGIFT :=RL_TA5020.GOODSDISCOUNTQTYGIFT;
                REC_XOUT_TA5020.GOODSDISCOUNTUM :=RL_TA5020.GOODSDISCOUNTUM;
                REC_XOUT_TA5020.FREEDISCOUNTQTYTOBUY :=RL_TA5020.FREEDISCOUNTQTYTOBUY;
                REC_XOUT_TA5020.FREEDISCOUNTUM :=RL_TA5020.FREEDISCOUNTUM;
                REC_XOUT_TA5020.FREEDISCOUNTQTYGIFT :=RL_TA5020.FREEDISCOUNTQTYGIFT;
                REC_XOUT_TA5020.FREEDISCOUNTGIFTUM :=RL_TA5020.FREEDISCOUNTGIFTUM;
                REC_XOUT_TA5020.ESTIMATEDDISCOUNTPERCENTAGE1 :=RL_TA5020.ESTIMATEDDISCOUNTPERCENTAGE1;
                REC_XOUT_TA5020.ESTIMATEDDISCOUNTPERCENTAGE2 :=RL_TA5020.ESTIMATEDDISCOUNTPERCENTAGE2;
                REC_XOUT_TA5020.ESTIMATEDDISCOUNTPERCENTAGE3 :=RL_TA5020.ESTIMATEDDISCOUNTPERCENTAGE3;
                REC_XOUT_TA5020.ESTIMATEDPIECEDISCOUNT1 :=RL_TA5020.ESTIMATEDPIECEDISCOUNT1;
                REC_XOUT_TA5020.ESTIMATEDPIECEDISCOUNT2 :=RL_TA5020.ESTIMATEDPIECEDISCOUNT2;
                REC_XOUT_TA5020.ESTIMATEDPIECEDISCOUNT3 :=RL_TA5020.ESTIMATEDPIECEDISCOUNT3;
                REC_XOUT_TA5020.ESTIMATEDGOODSDISCOUNT :=RL_TA5020.ESTIMATEDGOODSDISCOUNT;
                REC_XOUT_TA5020.ESTIMATEDFREEDISCOUNT :=RL_TA5020.ESTIMATEDFREEDISCOUNT;
                REC_XOUT_TA5020.TOTALESTIMATEDDISCOUNT :=RL_TA5020.TOTALESTIMATEDDISCOUNT;
                REC_XOUT_TA5020.INCIDENCEDISCOUNTPERCENTAGE1 :=RL_TA5020.INCIDENCEDISCOUNTPERCENTAGE1;
                REC_XOUT_TA5020.INCIDENCEDISCOUNTPERCENTAGE2 :=RL_TA5020.INCIDENCEDISCOUNTPERCENTAGE2;
                REC_XOUT_TA5020.INCIDENCEDISCOUNTPERCENTAGE3 :=RL_TA5020.INCIDENCEDISCOUNTPERCENTAGE3;
                REC_XOUT_TA5020.INCIDENCEPIECEDISCOUNT1 :=RL_TA5020.INCIDENCEPIECEDISCOUNT1;
                REC_XOUT_TA5020.INCIDENCEPIECEDISCOUNT2 :=RL_TA5020.INCIDENCEPIECEDISCOUNT2;
                REC_XOUT_TA5020.INCIDENCEPIECEDISCOUNT3 :=RL_TA5020.INCIDENCEPIECEDISCOUNT3;
                REC_XOUT_TA5020.INCIDENCEGOODSDISCOUNT :=RL_TA5020.INCIDENCEGOODSDISCOUNT;
                REC_XOUT_TA5020.INCIDENCEFREEDISCOUNT :=RL_TA5020.INCIDENCEFREEDISCOUNT;
                REC_XOUT_TA5020.TOTALINCIDENCEDISCOUNT :=RL_TA5020.TOTALINCIDENCEDISCOUNT;
                REC_XOUT_TA5020.CONTRIBUTION1 :=RL_TA5020.CONTRIBUTION1;
                REC_XOUT_TA5020.CONTRIBUTION2 :=RL_TA5020.CONTRIBUTION2;
                REC_XOUT_TA5020.CONTRIBUTION3 :=RL_TA5020.CONTRIBUTION3;
                REC_XOUT_TA5020.ESTIMATEDCOST :=RL_TA5020.ESTIMATEDCOST;
                REC_XOUT_TA5020.PREPROMOPRICE :=RL_TA5020.PREPROMOPRICE;
                REC_XOUT_TA5020.FINALPRICE :=RL_TA5020.FINALPRICE;
                REC_XOUT_TA5020.NETTURNOVER :=RL_TA5020.NETTURNOVER;
                REC_XOUT_TA5020.TOTALESTIMATED :=RL_TA5020.TOTALESTIMATED;
                REC_XOUT_TA5020.TOTALINCIDENCE :=RL_TA5020.TOTALINCIDENCE;
                REC_XOUT_TA5020.SELLOUTPRICE :=RL_TA5020.SELLOUTPRICE;
                REC_XOUT_TA5020.SELLOUTDISCOUNTPERCENTAGE :=RL_TA5020.SELLOUTDISCOUNTPERCENTAGE;
                REC_XOUT_TA5020.FINALSELLOUTPRICE :=RL_TA5020.FINALSELLOUTPRICE;
                REC_XOUT_TA5020.SELLOUTNETTURNOVER :=RL_TA5020.SELLOUTNETTURNOVER;
                REC_XOUT_TA5020.ESTIMATEDSELLOUTDISCOUNT :=RL_TA5020.ESTIMATEDSELLOUTDISCOUNT;
                REC_XOUT_TA5020.TOTALESTIMATEDSELLOUT :=RL_TA5020.TOTALESTIMATEDSELLOUT;
                REC_XOUT_TA5020.TOTALINCIDENCESELLOUT :=RL_TA5020.TOTALINCIDENCESELLOUT;
                REC_XOUT_TA5020.NUMMEASURE1 :=RL_TA5020.NUMMEASURE1;
                REC_XOUT_TA5020.NUMMEASURE2 :=RL_TA5020.NUMMEASURE2;
                REC_XOUT_TA5020.NUMMEASURE3 :=RL_TA5020.NUMMEASURE3;
                REC_XOUT_TA5020.NUMMEASURE4 :=RL_TA5020.NUMMEASURE4;
                REC_XOUT_TA5020.NUMMEASURE5 :=RL_TA5020.NUMMEASURE5;
                REC_XOUT_TA5020.NUMMEASURE6 :=RL_TA5020.NUMMEASURE6;
                REC_XOUT_TA5020.NUMMEASURE7 :=RL_TA5020.NUMMEASURE7;
                REC_XOUT_TA5020.NUMMEASURE8 :=RL_TA5020.NUMMEASURE8;
                REC_XOUT_TA5020.NUMMEASURE9 :=RL_TA5020.NUMMEASURE9;
                REC_XOUT_TA5020.NUMMEASURE10 :=RL_TA5020.NUMMEASURE10;
                REC_XOUT_TA5020.STRMEASURE1 :=RL_TA5020.STRMEASURE1;
                REC_XOUT_TA5020.STRMEASURE2 :=RL_TA5020.STRMEASURE2;
                REC_XOUT_TA5020.STRMEASURE3 :=RL_TA5020.STRMEASURE3;
                REC_XOUT_TA5020.STRMEASURE4 :=RL_TA5020.STRMEASURE4;
                REC_XOUT_TA5020.STRMEASURE5 :=RL_TA5020.STRMEASURE5;
                REC_XOUT_TA5020.STRMEASURE6 :=RL_TA5020.STRMEASURE6;
                REC_XOUT_TA5020.STRMEASURE7 :=RL_TA5020.STRMEASURE7;
                REC_XOUT_TA5020.STRMEASURE8 :=RL_TA5020.STRMEASURE8;
                REC_XOUT_TA5020.STRMEASURE9 :=RL_TA5020.STRMEASURE9;
                REC_XOUT_TA5020.STRMEASURE10 :=RL_TA5020.STRMEASURE10;
                REC_XOUT_TA5020.DTEMEASURE1 :=RL_TA5020.DTEMEASURE1;
                REC_XOUT_TA5020.DTEMEASURE2 :=RL_TA5020.DTEMEASURE2;
                REC_XOUT_TA5020.DTEMEASURE3 :=RL_TA5020.DTEMEASURE3;
                REC_XOUT_TA5020.DTEMEASURE4 :=RL_TA5020.DTEMEASURE4;
                REC_XOUT_TA5020.DTEMEASURE5 :=RL_TA5020.DTEMEASURE5;
                REC_XOUT_TA5020.DTEMEASURE6 :=RL_TA5020.DTEMEASURE6;
                REC_XOUT_TA5020.DTEMEASURE7 :=RL_TA5020.DTEMEASURE7;
                REC_XOUT_TA5020.DTEMEASURE8 :=RL_TA5020.DTEMEASURE8;
                REC_XOUT_TA5020.DTEMEASURE9 :=RL_TA5020.DTEMEASURE9;
                REC_XOUT_TA5020.DTEMEASURE10 :=RL_TA5020.DTEMEASURE10;
                REC_XOUT_TA5020.NUMMEASURE11 :=RL_TA5020.NUMMEASURE11;
                REC_XOUT_TA5020.NUMMEASURE12 :=RL_TA5020.NUMMEASURE12;
                REC_XOUT_TA5020.NUMMEASURE13 :=RL_TA5020.NUMMEASURE13;
                REC_XOUT_TA5020.NUMMEASURE14 :=RL_TA5020.NUMMEASURE14;
                REC_XOUT_TA5020.NUMMEASURE15 :=RL_TA5020.NUMMEASURE15;
                REC_XOUT_TA5020.NUMMEASURE16 :=RL_TA5020.NUMMEASURE16;
                REC_XOUT_TA5020.NUMMEASURE17 :=RL_TA5020.NUMMEASURE17;
                REC_XOUT_TA5020.NUMMEASURE18 :=RL_TA5020.NUMMEASURE18;
                REC_XOUT_TA5020.NUMMEASURE19 :=RL_TA5020.NUMMEASURE19;
                REC_XOUT_TA5020.NUMMEASURE20 :=RL_TA5020.NUMMEASURE20;
                REC_XOUT_TA5020.FLGMEASURE1 :=RL_TA5020.FLGMEASURE1;
                REC_XOUT_TA5020.FLGMEASURE2 :=RL_TA5020.FLGMEASURE2;
                REC_XOUT_TA5020.FLGMEASURE3 :=RL_TA5020.FLGMEASURE3;
                REC_XOUT_TA5020.FLGMEASURE4 :=RL_TA5020.FLGMEASURE4;
                REC_XOUT_TA5020.FLGMEASURE5 :=RL_TA5020.FLGMEASURE5;
                REC_XOUT_TA5020.FLGMEASURE6 :=RL_TA5020.FLGMEASURE6;
                REC_XOUT_TA5020.FLGMEASURE7 :=RL_TA5020.FLGMEASURE7;
                REC_XOUT_TA5020.FLGMEASURE8 :=RL_TA5020.FLGMEASURE8;
                REC_XOUT_TA5020.FLGMEASURE9 :=RL_TA5020.FLGMEASURE9;
                REC_XOUT_TA5020.FLGMEASURE10 :=RL_TA5020.FLGMEASURE10;
                REC_XOUT_TA5020.FB :=RL_TA5020.FB;
                REC_XOUT_TA5020.SELLOUTPROMOPRICE :=RL_TA5020.SELLOUTPROMOPRICE;
                REC_XOUT_TA5020.CONTRIBUTION_RETAILER :=RL_TA5020.CONTRIBUTION_RETAILER;
                REC_XOUT_TA5020.DTETOHOST :=RL_TA5020.DTETOHOST;
                --
                REC_XOUT_TA5020.SM1_DTEPROCESS          :=XSYSDATE;
                REC_XOUT_TA5020.SM1_CODPROCESS          :=PI_PROGR_H;
                --
                INSERT INTO XOUT_TA5020PRODUCTS VALUES REC_XOUT_TA5020;
                --
                VL_INS_TA5020 := VL_INS_TA5020 + 1;
                VL_COUNT_XOUT_TA5020_P := CL_TA5020%ROWCOUNT;

             END LOOP;--TA5020
             VL_COUNT_XOUT_TA5020 := VL_COUNT_XOUT_TA5020 + VL_COUNT_XOUT_TA5020_P;
             VL_COUNT_XOUT_TA5020_P := 0;
          EXCEPTION WHEN OTHERS THEN
                VL_STATUS := -1;
                VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);
                PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_TA5020,
                                           SQLCODE,
                                           VL_MESSAGE_H);
          END;
         END IF;


           --
           -- TA5022PRODUCTACTIVITIES
           --

           IF ( VL_STATUS = 0 ) THEN
           BEGIN
            VL_MESSAGE_D := 'Delete XOUT_TA5022PRODUCTACTIV';
            DELETE XOUT_TA5022PRODUCTACTIV WHERE IDACTION = RL_TA5000.IDACTION AND ERP_DTEPROCESS IS NULL;

            FOR RL_TA5022 IN CL_TA5022(RL_TA5000.IDACTION) LOOP

                 VL_MESSAGE_H := 'Action: '|| RL_TA5022.IDACTION || '/' ||
                                 'Product : '|| RL_TA5022.CODPRODUCT || '/' ||
                                 'Level : '|| RL_TA5022.LEVPRODUCT|| '/' ||
                                 'Activity :'||RL_TA5022.CODACTIVITY;

                VL_MESSAGE_D := 'Insert XOUT_TA5022PRODUCTACTIV ';
                -- Here you can customize field elaboration
                -- the default is the xout has the same value of sm1 table

                REC_XOUT_TA5022.IDACTION    :=RL_TA5022.IDACTION;
                REC_XOUT_TA5022.CODPRODUCT  :=RL_TA5022.CODPRODUCT;
                REC_XOUT_TA5022.LEVPRODUCT  :=RL_TA5022.LEVPRODUCT;
                REC_XOUT_TA5022.CODDISPLAY  :=RL_TA5022.CODDISPLAY;
                REC_XOUT_TA5022.CODACTIVITY :=RL_TA5022.CODACTIVITY;
                --
                REC_XOUT_TA5022.SM1_DTEPROCESS          :=XSYSDATE;
                REC_XOUT_TA5022.SM1_CODPROCESS          :=PI_PROGR_H;
                --
                INSERT INTO XOUT_TA5022PRODUCTACTIV VALUES REC_XOUT_TA5022;
                --
                VL_INS_TA5022 := VL_INS_TA5022 + 1;
                VL_COUNT_XOUT_TA5022_P := CL_TA5022%ROWCOUNT;

             END LOOP;--TA5022
             VL_COUNT_XOUT_TA5022 := VL_COUNT_XOUT_TA5022 + VL_COUNT_XOUT_TA5022_P;
             VL_COUNT_XOUT_TA5022_P := 0;
          EXCEPTION WHEN OTHERS THEN
                VL_STATUS := -1;
                VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);
                PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_TA5022,
                                           SQLCODE,
                                           VL_MESSAGE_H);
          END;
         END IF;


           --
           -- TA5026PRODUCTDETAILS
           --

           IF ( VL_STATUS = 0 ) THEN
           BEGIN
            VL_MESSAGE_D := 'Delete XOUT_TA5026PRODUCTDETAI';
            DELETE XOUT_TA5026PRODUCTDETAI WHERE IDACTION = RL_TA5000.IDACTION AND ERP_DTEPROCESS IS NULL;

            FOR RL_TA5026 IN CL_TA5026(RL_TA5000.IDACTION) LOOP

                 VL_MESSAGE_H := 'Action: '|| RL_TA5026.IDACTION || '/' ||
                                 'Product : '|| RL_TA5026.CODPRODUCT || '/' ||
                                 'Level   : '|| RL_TA5026.LEVPRODUCT|| '/' ||
                                 'Display :'||RL_TA5026.CODDISPLAY;

                VL_MESSAGE_D := 'Insert XOUT_TA5026PRODUCTDETAI ';
                -- Here you can customize field elaboration
                -- the default is the xout has the same value of sm1 table

                REC_XOUT_TA5026.IDACTION    :=RL_TA5026.IDACTION;
                REC_XOUT_TA5026.CODPRODUCT  :=RL_TA5026.CODPRODUCT;
                REC_XOUT_TA5026.LEVPRODUCT  :=RL_TA5026.LEVPRODUCT;
                REC_XOUT_TA5026.CODDISPLAY  :=RL_TA5026.CODDISPLAY;
                REC_XOUT_TA5026.CODNODE0  :=RL_TA5026.CODNODE0;
                REC_XOUT_TA5026.CODNODE1  :=RL_TA5026.CODNODE1;
                REC_XOUT_TA5026.CODNODE2  :=RL_TA5026.CODNODE2;
                REC_XOUT_TA5026.CODNODE3  :=RL_TA5026.CODNODE3;
                REC_XOUT_TA5026.CODNODE4  :=RL_TA5026.CODNODE4;
                REC_XOUT_TA5026.CODNODE5  :=RL_TA5026.CODNODE5;
                REC_XOUT_TA5026.CODNODE6  :=RL_TA5026.CODNODE6;
                REC_XOUT_TA5026.CODNODE7  :=RL_TA5026.CODNODE7;
                REC_XOUT_TA5026.CODDIV  :=RL_TA5026.CODDIV;
                REC_XOUT_TA5026.FLGINCLUSION  :=RL_TA5026.FLGINCLUSION;
                --
                REC_XOUT_TA5026.SM1_DTEPROCESS          :=XSYSDATE;
                REC_XOUT_TA5026.SM1_CODPROCESS          :=PI_PROGR_H;
                --
                INSERT INTO XOUT_TA5026PRODUCTDETAI VALUES REC_XOUT_TA5026;
                --
                VL_INS_TA5026 := VL_INS_TA5026 + 1;
                VL_COUNT_XOUT_TA5026_P := CL_TA5026%ROWCOUNT;

             END LOOP;--TA5026
             VL_COUNT_XOUT_TA5026 := VL_COUNT_XOUT_TA5026 + VL_COUNT_XOUT_TA5026_P;
             VL_COUNT_XOUT_TA5026_P := 0;
          EXCEPTION WHEN OTHERS THEN
                VL_STATUS := -1;
                VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);
                PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_TA5026,
                                           SQLCODE,
                                           VL_MESSAGE_H);
          END;
         END IF;



      -- if all records have been stored with success then it makes the commit
      -- SET DTETOHOST
      IF VL_STATUS = 0 THEN

         UPDATE TA5000PROMOACTION
         SET    DTETOHOST = REC_XOUT_TA5000.SM1_DTEPROCESS,
                DTELCK          = NULL,
                IDSESSIONLCK    = NULL,
                CODUSRLCK       = NULL
         WHERE  IDACTION    = REC_XOUT_TA5000.IDACTION;
         VL_INS_TA5000 := VL_INS_TA5000 + 1;
         COMMIT;
      ELSE
        ROLLBACK;

        -- Release updated records
          UPDATE TA5000PROMOACTION
          SET       DTELCK          = NULL,
                    IDSESSIONLCK    = NULL,
                    CODUSRLCK       = NULL
          WHERE IDACTION = REC_XOUT_TA5000.IDACTION;

          COMMIT;

      END IF;


   END LOOP;--TA5000
   -- Close Logs


     --
   PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA5026,
                                      0,
                                      VL_COUNT_XOUT_TA5026,
                                      VL_INS_TA5026,
                                      VL_COUNT_XOUT_TA5026-VL_INS_TA5026);
    --
   PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA5020,
                                      0,
                                      VL_COUNT_XOUT_TA5020,
                                      VL_INS_TA5020,
                                      VL_COUNT_XOUT_TA5020-VL_INS_TA5020);
   --
   PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA5014,
                                      0,
                                      VL_COUNT_XOUT_TA5014,
                                      VL_INS_TA5014,
                                      VL_COUNT_XOUT_TA5014-VL_INS_TA5014);
   --
   PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA5012,
                                      0,
                                      VL_COUNT_XOUT_TA5012,
                                      VL_INS_TA5012,
                                      VL_COUNT_XOUT_TA5012-VL_INS_TA5012);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA5002,
                                      0,
                                      VL_COUNT_XOUT_TA5002,
                                      VL_INS_TA5002,
                                      VL_COUNT_XOUT_TA5002 - VL_INS_TA5002);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA5000,
                                      0,
                                      VL_COUNT_XOUT_TA5000,
                                      VL_INS_TA5000,
                                      VL_COUNT_XOUT_TA5000 - VL_INS_TA5000);


    PO_MSG    := VL_INS_TA5000||'/'||VL_COUNT_XOUT_TA5000||' Promo Exported';
    PO_STATUS := VL_INS_TA5000;


    --
  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_TA5000,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE TA5000PROMOACTION
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_TA5000,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

   END EXP_TA50X_PROMO;
    /*============================================================================*\
  /* Name: EXP_TA022X_PANELS
     Exports SM1 tables:
      ?  TA0220PANELS - panels main table
      ?  TA0222PANELSPOS  - panels details

      Staging Area (SSA) tables
      ?  XOUT_TA0220PANELS
      ?  XOUT_TA0222PANELSPOS

      Before exporting it :
      ?  cleans old records from XOUT_LOG table
      ?  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      ?  exports all records not locked by SM1 User that have field TA0220PANELS.DTETOHOST set to NULL or lower than last modified data (TA0220PANELS.DTEMOD)
      ?  NO FILTER IS APPLIED ON ORDER STATUS IT HAS TO BE CUSTOMIZED
      ?  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      ?  deletes records on XOUT table already present that havn't been already read by ERP
      ?  Inserts records into XOUT table from SM1 table
      ?  Commits each TA0220PANELS.CODPANEL block of information
      ?  Set date TA0220PANELS.DTETOHOST into SM1 header table

            Error handling:
            ?  All Errors will be logged in T852/T854 SM1 log tables
            ?  Error on record, header and all details are discarded

      Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                                      PI_SESSION_ID    - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                                      PO_STATUS        - 0 OK; -1 Error

     Author : Sergiu Ibanescu
     Creation Date : 28 February 2013
     ----
     Updates :


    ============================================================================ */

  PROCEDURE EXP_TA022X_PANELS(PI_PROGR_H   IN NUMBER,
                          PI_SESSION_ID    IN NUMBER,
                          PI_DOCUMENTKEY      IN VARCHAR2,
                          PI_MASSIVE_EXP_DATE IN DATE,
                          PO_MSG           OUT VARCHAR,
                          PO_STATUS        OUT NUMBER ) IS
     -- -----------------------------------------
    -- Cursor on Panel table TA0220PANELS
    -- -----------------------------------------
    CURSOR CL_TA0220 IS
      SELECT
      *
     FROM  TA0220PANELS
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY CODPANEL;

    -- -----------------------------------------
    -- Cursor on Panels pos TA0222PANELSPOS
    -- -----------------------------------------
    CURSOR CL_TA0222(CI_CODPANEL VARCHAR2) IS
      SELECT *
        FROM  TA0222PANELSPOS
        WHERE CODPANEL = CI_CODPANEL;


    -- -----------------------------------------
    -- Cursor on main Panel table TA0220PANELS where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_TA0220 IS
      SELECT
          CODPANEL,
          CODUSRLCK,
          DTELCK
        FROM  TA0220PANELS
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY CODPANEL ASC;
    --
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting Panel TA0220';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_TA0220     NUMBER := 0;
    VL_COUNT_XOUT_TA0220  NUMBER := 0;
    VL_INS_TA0220         NUMBER := 0;
    --
    VL_PROGR_D_TA0222       NUMBER := 0;
    VL_COUNT_XOUT_TA0222    NUMBER := 0;
    VL_INS_TA0222           NUMBER := 0;
    --
    REC_XOUT_TA0220 XOUT_TA0220PANELS%ROWTYPE    := NULL;
    REC_XOUT_TA0222 XOUT_TA0222PANELSPOS%ROWTYPE := NULL;

    VL_STATUS NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --

  BEGIN



    VL_PROGR_D_TA0220 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                       'PANELS',
                                       'EXPORT --> TA0220PANELS',
                                        0,
                                        NULL);
    VL_PROGR_D_TA0222 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                       'PANELS POS',
                                       'EXPORT --> TA0222PANELSPOS',
                                        0,
                                        NULL);



      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA0220, 'XOUT_TA0220PANELS', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA0222, 'XOUT_TA0222PANELSPOS', VL_STATUS);
    --
    -- Moves already read by ERP records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA0220, 'XOUT_TA0220PANELS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA0222, 'XOUT_TA0222PANELSPOS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies Records to be exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'TA0220PANELS';
        UPDATE TA0220PANELS
        SET IDSESSIONLCK  = PI_SESSION_ID,
            DTELCK         = XSYSDATE,
            CODUSRLCK      = C_SYSUSR
            WHERE not exists ( select null from T035LOGGEDUSERS T035 where T035.IDSESSION = NVL(IDSESSIONLCK, '@') AND T035.LASTCHECK > TRUNC(XSYSDATE)-1 ) AND
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE));
        VL_COUNT_XOUT_TA0220 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;

    END;

    -- --------------------------------------------------------------
    -- loops locked records in main table TA0220PANELS to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_TA0220 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.CODPANEL='||R_LOCKED.CODPANEL||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_TA0220,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;
    -- --------------------------------------------------------------
    -- loop in main table TA0220PANELS
    -- --------------------------------------------------------------
    FOR RL_TA0220 IN CL_TA0220 LOOP

      -- pings to t035 every 100 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 100) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;


      --
      VL_STATUS := 0;

      --
      VL_MESSAGE_H :=   'Panel: '||RL_TA0220.CODPANEL;
      --
      BEGIN --- HEAD

        VL_MESSAGE_D := 'Delete XOUT_TA0220PANELS ';
        DElETE XOUT_TA0220PANELS WHERE CODPANEL = RL_TA0220.CODPANEL AND ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_TA0220PANELS ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_TA0220.CODPANEL :=RL_TA0220.CODPANEL;
        REC_XOUT_TA0220.DESPANEL :=RL_TA0220.DESPANEL;
        REC_XOUT_TA0220.CODDIV :=RL_TA0220.CODDIV;
        REC_XOUT_TA0220.CODSTATUS:=RL_TA0220.CODSTATUS;
        REC_XOUT_TA0220.DTECRE:=RL_TA0220.DTECRE;
        REC_XOUT_TA0220.DTEMOD:=RL_TA0220.DTEMOD;
        REC_XOUT_TA0220.DTELCK:=RL_TA0220.DTELCK;
        REC_XOUT_TA0220.CODUSRCRE:=RL_TA0220.CODUSRCRE;
        REC_XOUT_TA0220.CODUSRMOD:=RL_TA0220.CODUSRMOD;
        REC_XOUT_TA0220.CODUSRLCK:=RL_TA0220.CODUSRLCK;
        REC_XOUT_TA0220.IDSESSIONLCK:=RL_TA0220.IDSESSIONLCK;
        REC_XOUT_TA0220.CODUSRCREREAL:=RL_TA0220.CODUSRCREREAL;
        REC_XOUT_TA0220.CODUSRMODREAL:=RL_TA0220.CODUSRMODREAL;
        REC_XOUT_TA0220.FLGANN:=RL_TA0220.FLGANN;
        REC_XOUT_TA0220.DTETOSERVER:=RL_TA0220.DTETOSERVER;
        REC_XOUT_TA0220.DTETOHOST:=RL_TA0220.DTETOHOST;
        REC_XOUT_TA0220.DOCUMENTKEY:=RL_TA0220.DOCUMENTKEY;
        --
        REC_XOUT_TA0220.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_TA0220.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_TA0220PANELS VALUES REC_XOUT_TA0220;


       EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_TA0220,
                                           SQLCODE,
                                           VL_MESSAGE_H);
       END; -- HEAD


       -- -----------------------------------
        -- TA0222PANELSPOS INFO
        -- -----------------------------------
        BEGIN
        --
        IF ( VL_STATUS = 0  ) THEN
              -- TA0222PANELSPOS
          VL_MESSAGE_D := 'Delete XOUT_TA0220PANELS ';
          DELETE XOUT_TA0222PANELSPOS WHERE CODPANEL = RL_TA0220.CODPANEL AND ERP_DTEPROCESS IS NULL;

          FOR RL_TA0222 IN CL_TA0222(RL_TA0220.CODPANEL) LOOP

                 VL_MESSAGE_H := 'Panels Info: '|| RL_TA0222.CODPANEL || '/' ||
                                                    RL_TA0222.IDDETAIL;

                  VL_MESSAGE_D := 'Format Conversion ';
                  VL_COUNT_XOUT_TA0222 := VL_COUNT_XOUT_TA0222 + 1;

                  REC_XOUT_TA0222.CODPANEL :=RL_TA0222.CODPANEL;
                  REC_XOUT_TA0222.IDDETAIL :=RL_TA0222.IDDETAIL;
                  REC_XOUT_TA0222.CODPARTY :=RL_TA0222.CODPARTY;
                  REC_XOUT_TA0222.CODDIV :=RL_TA0222.CODDIV;
                  REC_XOUT_TA0222.DTESTART :=RL_TA0222.DTESTART;
                  REC_XOUT_TA0222.DTEEND :=RL_TA0222.DTEEND;
                  REC_XOUT_TA0222.FLGANN :=RL_TA0222.FLGANN;
                  REC_XOUT_TA0222.FLGPRIMARY :=RL_TA0222.FLGPRIMARY;
                  --
                  REC_XOUT_TA0222.SM1_DTEPROCESS := REC_XOUT_TA0220.SM1_DTEPROCESS;
                  REC_XOUT_TA0222.SM1_CODPROCESS := REC_XOUT_TA0220.SM1_CODPROCESS;

                  INSERT INTO XOUT_TA0222PANELSPOS VALUES REC_XOUT_TA0222;

                  VL_INS_TA0222 := VL_INS_TA0222 + 1;
         END LOOP;   --TA0222PANELSPOS

       END IF;
       EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_TA0222,
                                           SQLCODE,
                                           VL_MESSAGE_H);

      END; -- TA0222PANELSPOS
      -- if all records have been stored with success then it makes the commit
      -- SET DTETOHOST
      IF VL_STATUS = 0 THEN

         UPDATE TA0220PANELS
         SET    DTETOHOST = REC_XOUT_TA0220.SM1_DTEPROCESS,
                DTELCK          = NULL,
                IDSESSIONLCK    = NULL,
                CODUSRLCK       = NULL
         WHERE  CODPANEL    = REC_XOUT_TA0220.CODPANEL;
         VL_INS_TA0220 := VL_INS_TA0220 + 1;
         COMMIT;
      ELSE
        ROLLBACK;
        -- Release updated records
          UPDATE TA0220PANELS
          SET       DTELCK          = NULL,
                    IDSESSIONLCK    = NULL,
                    CODUSRLCK       = NULL
          WHERE CODPANEL = REC_XOUT_TA0220.CODPANEL ;

          COMMIT;
      END IF;



    END LOOP;  -- TA0220PANELS


   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_TA0222,
                             0,
                             VL_COUNT_XOUT_TA0222,
                             VL_INS_TA0222,
                             VL_COUNT_XOUT_TA0222 - VL_INS_TA0222);

    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_TA0220,
                             0,
                             VL_COUNT_XOUT_TA0220,
                             VL_INS_TA0220,
                             VL_COUNT_XOUT_TA0220 - VL_INS_TA0220);


    PO_MSG    := VL_INS_TA0220||'/'||VL_COUNT_XOUT_TA0220||' Panels Exported';
    PO_STATUS := VL_INS_TA0220;


    --
  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       :=  SUBSTR (VL_MESSAGE_H ||' '||SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_TA0220,
                                         SQLCODE,
                                         VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;
         -- Release updated records
            UPDATE TA0220PANELS
            SET       DTELCK          = NULL,
                      IDSESSIONLCK    = NULL,
                      CODUSRLCK       = NULL
            WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
            COMMIT;

          VL_MESSAGE_H       :=  SUBSTR (VL_MESSAGE_H ||' '||SQLERRM, 1, 2000);

          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_TA0220,
                                         SQLCODE,
                                         VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;
  END EXP_TA022X_PANELS;

    /*============================================================================*\
  /* Name: EXP_QUESTIONNAIR
     Exports data from the following SM1 tables:
      ?  TA0191CUSTOMERSURVEY - only surveys of type questionnaire
      ?  TA0190MISSIONS - mission description
      ?  TA0200QUESTIONNAIR - questionnaire main table
      ?  TA0202QUESTIONS - questions main table
      ?  TA0204ANSWERS - table with answers for those questions with multiple answers
      ?  TA0206QUESTIONNAIREANSWERS - survey answers

      Staging Area (SSA) tables
      ?  XOUT_QUESTIONNAIR

        Before exporting it :
      ?  cleans old records from XOUT_LOG table
      ?  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      ?  exports all records not locked by SM1 User that have field TA0191CUSTOMERSURVEY.DTETOHOST set to NULL or lower than last modified data (TA0191CUSTOMERSURVEY.DTEMOD) - only questionnaire types
      ?  NO FILTER IS APPLIED ON ORDER STATUS IT HAS TO BE CUSTOMIZED
      ?  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      ?  deletes records on XOUT table already present that havn't been already read by ERP
      ?  Inserts records into XOUT table from SM1 table
      ?  Commits each TA0191CUSTOMERSURVEY.IDSURVEY block of information
      ?  Set date TA0191CUSTOMERSURVEY.DTETOHOST into SM1 header table

            Error handling:
            ?  All Errors will be logged in T852/T854 SM1 log tables
            ?  Error on record, header and all details are discarded

       Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID    - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'  wihout any check on DTETOHOST
                             PI_MASSIVE_EXP_DATE:  NULL - normal export (DTEMOD>DTETOHOST or DTETOHOST is null)
                                                   NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE without any check on DTETOHOST
       PO_STATUS        - 0 OK; -1 Error

     Author : Sergiu Ibanescu
     Creation Date : 05 March 2013
     ----
     Updates :
     -- 2013 10 29; 010: Mbandiera; TFS 27929: XOUT_QUESTIONNAIR field DESANSWER was populated for multiple choice questions only


    ============================================================================ */

  PROCEDURE EXP_QUESTIONNAIR(PI_PROGR_H   IN NUMBER,
                          PI_SESSION_ID    IN NUMBER,
                          PI_DOCUMENTKEY      IN VARCHAR2,
                          PI_MASSIVE_EXP_DATE IN DATE,
                          PO_MSG           OUT VARCHAR,
                          PO_STATUS        OUT NUMBER ) IS
    -- -----------------------------------------
    -- Cursor on table TA0191CUSTOMERSURVEY
    -- -----------------------------------------
    CURSOR CL_TA0191 IS
      SELECT
      TA0191.*, TA0190.DESMISSION
     FROM TA0191CUSTOMERSURVEY TA0191
     LEFT JOIN TA0190MISSIONS TA0190 ON ( TA0190.IDMISSION = TA0191.IDMISSION)
        WHERE TA0191.IDSESSIONLCK IS NOT NULL AND TA0191.IDSESSIONLCK = PI_SESSION_ID
        ORDER BY TA0191.IDSURVEY;

    -- -----------------------------------------
    -- Cursor on table TA0202QUESTIONS
    -- -----------------------------------------
    CURSOR CL_TA0202 (CI_IDQUESTIONNAIRE NUMBER) IS
      SELECT
      *
     FROM  TA0202QUESTIONS
        WHERE IDQUESTIONNAIRE=CI_IDQUESTIONNAIRE;

    -- -----------------------------------------
    -- Cursor on main survey table where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_TA0191 IS
      SELECT IDSURVEY, CODTYPSURVEY, DTELCK, CODUSRLCK
        FROM  TA0191CUSTOMERSURVEY
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        AND  CODTYPSURVEY IN (SELECT CODTYPSURVEY FROM TA0184SURVEY WHERE CODTYPDETAIL='QUEST')
        ORDER BY IDSURVEY ASC;


   --
    VL_MESSAGE_H   VARCHAR2(4000) := 'Error while exporting SURVEYS TA091X';
    VL_MESSAGE_D   VARCHAR2(4000) := NULL;
   --
    VL_PROGR_D_TA0191    NUMBER := 0;
    VL_COUNT_XOUT_TA0191 NUMBER := 0;
    VL_INS_TA0191        NUMBER := 0;

    VL_STATUS NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    REC_QUESTIONNAIR XOUT_QUESTIONNAIR%ROWTYPE := NULL;
    REC_TA0200       TA0200QUESTIONNAIR%ROWTYPE := NULL;
    --
    EX_EXIT  EXCEPTION;
    --
    vl_cod_multi_answer  XOUT_QUESTIONNAIR.CODANWSER%TYPE:=NULL;
    vl_des_multi_answer  XOUT_QUESTIONNAIR.DESANSWER%TYPE:=NULL;
    vl_des_one_answer  XOUT_QUESTIONNAIR.DESANSWER%TYPE:=NULL;
    vl_pos number:=0;
  BEGIN

    VL_PROGR_D_TA0191 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                  'QUESTIONNAIR HEAD',
                                                  'EXPORT --> TA0191CUSTOMERSURVEY',
                                                   0,
                                                   NULL);

    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA0191, 'XOUT_QUESTIONNAIR', VL_STATUS);
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA0191, 'XOUT_QUESTIONNAIR', VL_STATUS);

    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    -- --------------------------------------------------------------
    -- Identifies records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED . STATUS VALUES, DATE ETC...

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'TA0191CUSTOMERSURVEY';
        UPDATE TA0191CUSTOMERSURVEY
        SET IDSESSIONLCK = PI_SESSION_ID,
            CODUSRLCK    = C_SYSUSR,
            DTELCK       = XSYSDATE
            WHERE not exists ( select null from T035LOGGEDUSERS T035 where T035.IDSESSION = NVL(IDSESSIONLCK, '@') AND T035.LASTCHECK > TRUNC(XSYSDATE)-1 ) AND
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
            AND  CODTYPSURVEY IN (SELECT CODTYPSURVEY FROM TA0184SURVEY WHERE CODTYPDETAIL='QUEST')
            AND NVL(IDQUESTIONNAIRE, 0) <> 0 ;--Only QUEST types comes here
        VL_COUNT_XOUT_TA0191 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table TA0191CUSTOMERSURVEY to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_TA0191 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'. IDSurvey='||R_LOCKED.IDSURVEY||'CodTypSurvey = '||R_LOCKED.CODTYPSURVEY||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_TA0191,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    END LOOP;

    -- --------------------------------------------------------------
    -- loop in main table TA0191CUSTOMERSURVEY
    -- --------------------------------------------------------------
    FOR RL_TA019 IN CL_TA0191 LOOP
    BEGIN
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
      --reset the status and the row values
      VL_STATUS := 0;
      REC_QUESTIONNAIR := NULL;
      --
      VL_MESSAGE_H :=  'IdSurvey: '||RL_TA019.IDSURVEY ||  'CodTypSurvey: '||RL_TA019.CODTYPSURVEY;

      -- Delete XOUT with same idsurvey
      VL_MESSAGE_D := 'Delete XOUT_QUESTIONNAIR';
      DELETE XOUT_QUESTIONNAIR  WHERE IDSURVEY = RL_TA019.IDSURVEY AND ERP_DTEPROCESS IS NULL;

      VL_MESSAGE_D := 'Insert Head ta0191';
      REC_QUESTIONNAIR.IDSURVEY := RL_TA019.IDSURVEY;
      REC_QUESTIONNAIR.CODPARTY := RL_TA019.CODPARTY;
      REC_QUESTIONNAIR.CODUSR := RL_TA019.CODUSR;
      REC_QUESTIONNAIR.CODTYPSURVEY := RL_TA019.CODTYPSURVEY;
      REC_QUESTIONNAIR.DTEVISIT := RL_TA019.DTEVISIT;
      REC_QUESTIONNAIR.HOURVISIT := RL_TA019.HOURVISIT;
      REC_QUESTIONNAIR.HOURVISITTO := RL_TA019.HOURVISITTO;
      REC_QUESTIONNAIR.DTEFROM := RL_TA019.DTEFROM;
      REC_QUESTIONNAIR.DTETO := RL_TA019.DTETO;
      REC_QUESTIONNAIR.IDMISSION := RL_TA019.IDMISSION;
      REC_QUESTIONNAIR.CODSTATUS := RL_TA019.CODSTATUS;
      REC_QUESTIONNAIR.CALCULATEDSPENTTIME := RL_TA019.CALCULATEDSPENTTIME;
      REC_QUESTIONNAIR.IDQUESTIONNAIRE := RL_TA019.IDQUESTIONNAIRE;
      REC_QUESTIONNAIR.CODDIV := RL_TA019.CODDIV;
      REC_QUESTIONNAIR.DESMISSION := RL_TA019.DESMISSION;
      --
      REC_QUESTIONNAIR.SM1_DTEPROCESS := XSYSDATE;
      REC_QUESTIONNAIR.SM1_CODPROCESS := PI_PROGR_H;

      --if no questionnaire - then throw exception and move to the next record
      VL_MESSAGE_D := 'Questionnaire not found: '||RL_TA019.IDQUESTIONNAIRE;
      SELECT * INTO REC_TA0200 FROM TA0200QUESTIONNAIR
                WHERE IDQUESTIONNAIRE = RL_TA019.IDQUESTIONNAIRE;

      REC_QUESTIONNAIR.DESQUESTIONNAIRE := REC_TA0200.DESQUESTIONNAIRE;
      REC_QUESTIONNAIR.DTEFROM_QUEST    := REC_TA0200.DTEFROM;
      REC_QUESTIONNAIR.DTETO_QUEST      := REC_TA0200.DTETO;
      REC_QUESTIONNAIR.CODSTATUS_QUEST  := REC_TA0200.CODSTATUS;

      --Loop through TA0202QUESTIONS
      FOR RL_TA0202 IN CL_TA0202(RL_TA019.IDQUESTIONNAIRE) LOOP
      BEGIN
          vl_message_d := ' IDQUESTIONNAIRE: ' || rl_ta019.idquestionnaire || ' IDQUESTION: ' || rl_ta0202.idquestion;
                  rec_questionnair.idquestion := rl_ta0202.idquestion;
                  rec_questionnair.numquestion := rl_ta0202.numquestion;
                  rec_questionnair.numsubquestion := rl_ta0202.numsubquestion;
                  rec_questionnair.desquestion := rl_ta0202.desquestion;
                  rec_questionnair.codtypeanswer := rl_ta0202.codtypeanswer;
                  --it is possible that the question has not been answered
                  --in this case - move forward silently
                  BEGIN
                     SELECT  d.codanswer,
                             d.dteanswer,
                             d.freeanswer,
                             d.numanswer,
                             h.desanswer,
                             h.flgallowfreetext
                       INTO
                          rec_questionnair.codanwser,
                          rec_questionnair.dteanswer,
                          rec_questionnair.freeanswer,
                          rec_questionnair.numanswer,
                          rec_questionnair.desanswer,
                          rec_questionnair.flgallowfreetext
                       FROM ta0206questionnaireanswers d
                       LEFT JOIN ta0204answers h on d.idquestionnaire = h.idquestionnaire AND
                                                    d.idquestion = h.idquestion AND
                                                    d.codanswer = h.codanwser

                      WHERE d.idsurvey        = rl_ta019.idsurvey
                        AND d.idquestionnaire = rl_ta0202.idquestionnaire
                        AND d.idquestion      = rl_ta0202.idquestion;


                  EXCEPTION
                     WHEN no_data_found THEN
                        rec_questionnair.codanwser := NULL;
                        rec_questionnair.dteanswer := NULL;
                        rec_questionnair.freeanswer := NULL;
                        rec_questionnair.numanswer := NULL;
                        rec_questionnair.desanswer := NULL;
                        rec_questionnair.flgallowfreetext := NULL;
                  END;

         -- 2013 10 29; 010: Mbandiera; TFS 27929:
         --Get the ANSWERS if multiple choice
         --Only if question has been answered - otherwise move forward silently
          IF(RL_TA0202.CODTYPEANSWER = 'MULTI' AND instr(REC_QUESTIONNAIR.CODANWSER, ';') > 0) THEN
            vl_cod_multi_answer := REC_QUESTIONNAIR.CODANWSER;
            vl_des_multi_answer := null;

           WHILE vl_cod_multi_answer IS NOT NULL LOOP
                vl_pos := instr(vl_cod_multi_answer, ';');
                BEGIN
                 IF vl_pos > 0 THEN
                     SELECT  desanswer INTO vl_des_one_answer FROM  TA0204ANSWERS
                      WHERE IDQUESTIONNAIRE=RL_TA019.IDQUESTIONNAIRE AND
                            IDQUESTION=RL_TA0202.IDQUESTION AND
                            CODANWSER=substr(vl_cod_multi_answer, 1, vl_pos - 1);

                            vl_cod_multi_answer := substr(vl_cod_multi_answer, vl_pos + 1);
                 ELSE
                      SELECT desanswer INTO vl_des_one_answer FROM  TA0204ANSWERS
                      WHERE IDQUESTIONNAIRE=RL_TA019.IDQUESTIONNAIRE AND
                            IDQUESTION=RL_TA0202.IDQUESTION AND
                            CODANWSER= vl_cod_multi_answer;

                            vl_cod_multi_answer := null;
                END IF;

                if vl_des_multi_answer is null then
                   vl_des_multi_answer := substr(vl_des_one_answer, 1, 255);
                else
                  vl_des_multi_answer := substr(vl_des_multi_answer||';'||vl_des_one_answer, 1, 255);
                end if;

                EXCEPTION WHEN NO_DATA_FOUND THEN
                   vl_cod_multi_answer := null;
                   NULL; --just move silently
                END;
           END LOOP;


           REC_QUESTIONNAIR.DESANSWER :=vl_des_multi_answer;

         END IF;

         --do the insert
         VL_MESSAGE_D := ' INSERT INTO  XOUT_QUESTIONNAIR';
         INSERT INTO XOUT_QUESTIONNAIR VALUES REC_QUESTIONNAIR;

      EXCEPTION -- this is the exception of RL_TA0202 loop
         WHEN OTHERS THEN

         VL_STATUS := -1;

         VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H ||VL_MESSAGE_D , 1, 4000);
         PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                       VL_PROGR_D_TA0191,
                                       SQLCODE,
                                       VL_MESSAGE_H);
      END;
      END LOOP;

     -- makes the commit if everything is OK
     -- SET DTETOHOST
     IF(VL_STATUS = 0) THEN
       UPDATE TA0191CUSTOMERSURVEY
       SET    DTETOHOST = REC_QUESTIONNAIR.SM1_DTEPROCESS
       WHERE  CODUSR    = REC_QUESTIONNAIR.CODUSR;
       VL_INS_TA0191 := VL_INS_TA0191 + 1;
       COMMIT;
     ELSE
       ROLLBACK;
     END IF;

    EXCEPTION --There is the exception of the TA019 loop
      WHEN OTHERS THEN

        VL_STATUS := -1;

        VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H ||VL_MESSAGE_D , 1, 4000);
        PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                       VL_PROGR_D_TA0191,
                                       SQLCODE,
                                       VL_MESSAGE_H);
     END;
    END LOOP;

       -- Releases all records
    VL_MESSAGE_D := 'Release lock';
    UPDATE TA0191CUSTOMERSURVEY
    SET       DTELCK          = NULL,
              IDSESSIONLCK    = NULL,
              CODUSRLCK       = NULL
     WHERE  IDSESSIONLCK  = PI_SESSION_ID;

    COMMIT;


   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA0191,
                                      0,
                                      VL_COUNT_XOUT_TA0191,
                                      VL_INS_TA0191,
                                      VL_COUNT_XOUT_TA0191-VL_INS_TA0191);

    PO_MSG := VL_INS_TA0191||'/'||VL_COUNT_XOUT_TA0191||' Survey Exported';
    PO_STATUS :=VL_INS_TA0191;

  EXCEPTION WHEN OTHERS THEN --Main exception

          ROLLBACK;

               -- Releases all records
              UPDATE TA0191CUSTOMERSURVEY
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
               WHERE  IDSESSIONLCK  = PI_SESSION_ID;

              COMMIT;


          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H ||VL_MESSAGE_D|| SQLERRM , 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_TA0191,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;
  END EXP_QUESTIONNAIR;


 /*============================================================================*\
  /* Name: EXP_T10X_ORDERS
     Exports SM1 tables:
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail
      •  T101BENEFIT - head and row discount
      •  TA4410NOTES - head and row notes
      •  TA4430ANOMALIES     - head and row anomalies
      •  TA4432ANOMDETAIL    - head and row anomaly details

      Staging Area (SSA) tables
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW
      •  XOUT_T101BENEFIT
      •  XOUT_TA4410NOTES
      •  XOUT_TA4430ANOMALIES
      •  XOUT_TA4432ANOMDETAIL

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  NO FILTER IS APPLIED ON ORDER STATUS IT HAS TO BE CUSTOMIZED
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

            Error handling:
            •  All Errors will be logged in T852/T854 SM1 log tables
            •  Error on record, header and all details are discarded

       Input parameters :     PI_PROGR_H - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                              PI_SESSION_ID       - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                              PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                              PI_MASSIVE_EXP_DATE:  NULL - normal export
                                                    NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                              PI_CODE_CHAR_A : division
     Author : Mariangela Bandiera
     Creation Date : 21 November 2012
     ----
     Updates :
      -- 2014 10 17; 013: Mbandiera; tfs 32462; ORDERS; Exportable orders read in external view QEXP_T100ORDHEAD
      --                                                Added division as input parameter (used PI_CODE_CHAR_A)


    ============================================================================ */
  PROCEDURE EXP_T10X_VANREQUEST_50(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         T.*,UD.Codwhsdeliv
        FROM  T100ORDHEAD T
  Inner Join T031USERDIV UD
      On T.CODEUSR = UD.CODUSR
      And T.CODDIV = UD.CODDIV

        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY T.NUMORD, t.CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100VANLOADREQ_50_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
             NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100VANLOADREQ_50_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.Codwhsdeliv;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_VANREQUEST_50;
  
  
  PROCEDURE EXP_T10X_VANREQUEST_51(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         T.*,UD.Codwhsdeliv
        FROM  T100ORDHEAD T
  Inner Join T031USERDIV UD
      On T.CODEUSR = UD.CODUSR
      And T.CODDIV = UD.CODDIV

        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY T.NUMORD, t.CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100VANLOADREQ_51_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
             NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and
            -- not in lock by user
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100VANLOADREQ_51_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.Codwhsdeliv;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_VANREQUEST_51;
  
  
  
  
  
  
  PROCEDURE EXP_T10X_VANREQUEST_DDF_50(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         T.*,UD.Codwhsdeliv
        FROM  T100ORDHEAD T
  Inner Join T031USERDIV UD
      On T.CODEUSR = UD.CODUSR
      And T.CODDIV = UD.CODDIV

        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY T.NUMORD, t.CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100VANLOADREQ_DDF_50_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
             NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and
            -- not in lock by user
      NVL(T.CODTYPORDCUST,0)=0 AND 
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100VANLOADREQ_DDF_50_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.Codwhsdeliv;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    --DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
         CODTYPORDCUST   = NUMORD,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_VANREQUEST_DDF_50;
  
  
  
  PROCEDURE EXP_T10X_VANREQUEST_DDF_51(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         T.*,UD.Codwhsdeliv
        FROM  T100ORDHEAD T
  Inner Join T031USERDIV UD
      On T.CODEUSR = UD.CODUSR
      And T.CODDIV = UD.CODDIV

        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY T.NUMORD, t.CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100VANLOADREQ_DDF_51_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
             NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and
            -- not in lock by user
      NVL(T.CODTYPORDCUST,0)=0 AND 
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100VANLOADREQ_DDF_51_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.Codwhsdeliv;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    --DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
         CODTYPORDCUST   = NUMORD,  
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_VANREQUEST_DDF_51;
  
  
    /*============================================================================*/
  /*       EXP_T10X_VANREQUEST_DFI_50 for exporting data                                   */

  /*    

CREATED BY : DCODE | Vikas
   */
  /*============================================================================*/


PROCEDURE EXP_T10X_VANREQUEST_DFI_50(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         T.*,UD.Codwhsdeliv
        FROM  T100ORDHEAD T
  Inner Join T031USERDIV UD
      On T.CODEUSR = UD.CODUSR
      And T.CODDIV = UD.CODDIV

        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY T.NUMORD, t.CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100VANLOADREQ_DFI_50_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
      DBMS_OUTPUT.PUT_LINE('start of locking');
     
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
             NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and
            -- not in lock by user
      NVL(T.CODTYPORDCUST,0)=0 AND 
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100VANLOADREQ_DFI_50_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
      DBMS_OUTPUT.PUT_LINE('updated ' || VL_COUNT_XOUT_T100 || 'orders');

    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
     DBMS_OUTPUT.PUT_LINE('cl_locked');
     
      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
DBMS_OUTPUT.PUT_LINE('cl_locked LOOP ended ');
    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

DBMS_OUTPUT.PUT_LINE('delted xout');
        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.Codwhsdeliv;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
dbms_output.put_line('inserted into xout');
        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        dbms_output.put_line('Starting inserting into xou_t106');
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
        dbms_output.put_line('Starting deleting' ||  RL_T100.NUMORD || ' from xout_t106');
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;
       dbms_output.put_line('Deleted' ||  RL_T100.NUMORD || ' from xout_t106');
              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP
       dbms_output.put_line('Starting RL_T106 for loop');
                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;
       dbms_output.put_line('Values of ' ||  RL_T100.NUMORD || ' assigned to REC_XOUT_T106');
      
                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;
       dbms_output.put_line('Inserted' ||  RL_T100.NUMORD || ' to xout_t106');
                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    --DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
         CODTYPORDCUST   = NUMORD,
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;
       dbms_output.put_line('marked t100 as exported');
         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        dbms_output.put_line('Released t100');
          
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;
        dbms_output.put_line('Procedure End');
  END EXP_T10X_VANREQUEST_DFI_50;


  /*============================================================================*/
  /*       EXP_T10X_VANREQUEST_DFI_51 for exporting data                                   */

  /*    

            CREATED BY : DCODE | Vikas
   */
  /*============================================================================*/




PROCEDURE EXP_T10X_VANREQUEST_DFI_51(PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT
         T.*,UD.Codwhsdeliv
        FROM  T100ORDHEAD T
  Inner Join T031USERDIV UD
      On T.CODEUSR = UD.CODUSR
      And T.CODDIV = UD.CODDIV

        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK = PI_SESSION_ID
        ORDER BY T.NUMORD, t.CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT *
        FROM T106ORDROW
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR
--         AND CODSTATUS = C_T106_STATUS_OK
       ;


    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM  ZQEXP_T100VANLOADREQ_DFI_51_C
        WHERE IDSESSIONLCK IS NOT NULL AND IDSESSIONLCK != PI_SESSION_ID
        and
              DOCUMENTKEY = nvl( PI_DOCUMENTKEY, DOCUMENTKEY ) and
              NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
        ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106    NUMBER := 0;
    VL_COUNT_XOUT_T106 NUMBER := 0;
    VL_COUNT_XOUT_T106_P  NUMBER := 0;
    VL_INS_T106        NUMBER := 0;
    --
    VL_PROGR_D_T101    NUMBER := 0;
    VL_COUNT_XOUT_T101 NUMBER := 0;
    VL_COUNT_XOUT_T101_P NUMBER := 0;
    VL_INS_T101        NUMBER := 0;
    VL_INS_T101_P      NUMBER := 0;
     --
    VL_PROGR_D_TA441    NUMBER := 0;
    VL_COUNT_XOUT_TA441      NUMBER := 0;
    VL_COUNT_XOUT_TA441_P    NUMBER := 0;
    VL_INS_TA441        NUMBER := 0;
    VL_INS_TA441_P      NUMBER := 0;
     --
    VL_PROGR_D_TA443    NUMBER := 0;
    VL_COUNT_XOUT_TA443      NUMBER := 0;
    VL_COUNT_XOUT_TA443_P    NUMBER := 0;
    VL_INS_TA443        NUMBER := 0;
    VL_INS_TA443_P      NUMBER := 0;

    REC_XOUT_T100   XOUT_T100ORDHEAD%ROWTYPE       := NULL;
    REC_XOUT_T106   XOUT_T106ORDROW%ROWTYPE        := NULL;


    VL_STATUS NUMBER:= 0;
    VL_ST_T101   NUMBER:= 0;
    VL_ST_TA441 NUMBER:= 0;
    VL_ST_TA443 NUMBER:= 0;
    VL_STEP   NUMBER:= 0; -- Used to ping t035
    --
    EX_EXIT  EXCEPTION;
    --
  BEGIN


    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORDER HEAD',
                                                     'EXPORT --> T100ORDHEAD',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> T106ORDROW',
                                                      0,
                                                      NULL);

    --
    VL_PROGR_D_T101 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'BENEFIT',
                                                     'EXPORT --> T101BENEFIT',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA441 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ORD NOTES',
                                                     'EXPORT --> TA4410NOTES',
                                                      0,
                                                      NULL);
    --
    VL_PROGR_D_TA443 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ANOMALIES',
                                                     'EXPORT --> TA4430ANOMALIES',
                                                      0,
                                                      NULL);

      -- Clean old records in log table
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    P_XOUT_CLEANUP_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T100, 'XOUT_T100ORDHEAD', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T106, 'XOUT_T106ORDROW', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_T101, 'XOUT_T101BENEFIT', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA441, 'XOUT_TA4410NOTES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4430ANOMALIES', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG (PI_PROGR_H, VL_PROGR_D_TA443, 'XOUT_TA4432ANOMDETAILS', VL_STATUS);
    IF ( VL_STATUS <> 0 ) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
        VL_MESSAGE_D := 'T100ORDHEAD';
        UPDATE T100ORDHEAD T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE

            t.DOCUMENTKEY = nvl( PI_DOCUMENTKEY, T.DOCUMENTKEY ) and
            T.CODDIV = nvl(PI_CODDIV, T.coddiv)                and
            -- never exported or massive export
             NVL(DTEMOD,DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE)) and
            -- not in lock by user
      NVL(T.CODTYPORDCUST,0)=0 AND 
            (T.NUMORD , T.CODUSR, T.CODDIV ) IN
           ( SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100VANLOADREQ_DFI_51_C Q WHERE
                Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE,Q.DTEMOD)
           )
           ;
        VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;


    COMMIT;
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      VL_MESSAGE_H := 'Error while Locking: '||VL_MESSAGE_D;
      RAISE EX_EXIT;
    END;



     -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP

      VL_MESSAGE_H :='Unable to Export '||VL_MESSAGE_D||'.Numord='||R_LOCKED.NUMORD||'Codusr = '||R_LOCKED.CODUSR||' Record locked by user '||R_LOCKED.CODUSRLCK||' since '||to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);

    END LOOP;


    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF ( MOD(VL_STEP, 1000) = 0 ) THEN
         PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;

      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H :=   'Order: '||RL_T100.NUMORD || '/' ||
                        RL_T100.CODUSR;
      --
      BEGIN --- HEAD T100


        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;


        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table

        REC_XOUT_T100.NUMORD :=RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR :=RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR :=RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD :=RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS :=RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV :=RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE :=RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD :=RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV :=RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV :=RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA :=RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM :=RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD :=RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV :=RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT :=RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV :=RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST :=RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR :=RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF :=RL_T100.NUMORD;-- RL_T100.NUMORDREF;
        REC_XOUT_T100.NUMORDHOST :=RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST :=TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);--RL_T100.NUMORDCUST; -- Added by Fowza.
        REC_XOUT_T100.DTEORDCUST :=RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT :=RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS :=RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP :=RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV :=RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT :=RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID :=RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT :=RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT :=RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS :=RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT :=RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT :=RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT :=RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER :=RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST :=RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT :=RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT :=RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT :=RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT :=RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT :=RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT :=RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT :=RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE :=RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD :=RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK :=RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK :=RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD :=RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN :=RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL :=RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB :=RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI :=RL_T100.CODABI;
        REC_XOUT_T100.CODCAB :=RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN :=RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA :=RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR :=RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC :=RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV :=RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT :=RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV :=RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT :=RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT :=RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN :=RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED :=RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED :=RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK :=RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS :=RL_T100.Codwhsdeliv;
        REC_XOUT_T100.CODSHIPPER :=RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP :=RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN :=RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE :=RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE :=RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO :=RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE :=RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN :=RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV :=RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST :=RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3 :=RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO :=RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN :=RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2 :=RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO :=RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN :=RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX :=RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4 :=RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2 :=RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI :=RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI :=RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI :=RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI :=RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6 :=RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV :=RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC :=RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN :=RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE :=RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT :=RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS :=RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT :=RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC :=RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV :=RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY :=RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5 :=RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL :=RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL :=RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY :=RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE :=RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI :=RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI :=RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE :=RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2 :=RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3 :=RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4 :=RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5 :=RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;

        -- Head Benefits
        EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T100.NUMORD, RL_T100.CODUSR, 0, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
        VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
        VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

        -- Head NOTES
        EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P, VL_COUNT_XOUT_TA441_P );
        VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
        VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;

        -- Head Anomalies
        EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T100.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
        VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
        VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;


        EXCEPTION WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                           VL_PROGR_D_T100,
                                           SQLCODE,
                                           VL_MESSAGE_H);
        END; -- HEAD T100

        BEGIN -- ORDER ROWS T106
        --
        IF ( VL_STATUS = 0  ) THEN
              -- Unit Measure data
              VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
              DElETE XOUT_T106ORDROW WHERE NUMORD = RL_T100.NUMORD AND CODUSR = RL_T100.CODUSR AND  ERP_DTEPROCESS IS NULL;

              FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP

                VL_MESSAGE_H := 'Ord Row '|| RL_T106.NUMORD|| '/' ||
                                  RL_T106.CODUSR || '/' ||
                                  RL_T106.NUMROW;


                 VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
                -- Here you can customize field elaboration
                 -- the default is the xout has the same value of sm1 table
                REC_XOUT_T106.CODUSR :=RL_T106.CODUSR;
                REC_XOUT_T106.NUMORD :=RL_T106.NUMORD;
                REC_XOUT_T106.NUMROW :=RL_T106.NUMROW;
                REC_XOUT_T106.CODART :=RL_T106.CODART;
                REC_XOUT_T106.CODDIV :=RL_T106.CODDIV;
                REC_XOUT_T106.UMORD :=RL_T106.UMORD;
                REC_XOUT_T106.DESART :=RL_T106.DESART;
                REC_XOUT_T106.QTYORD :=RL_T106.QTYORD;
                REC_XOUT_T106.QTYBCKORD :=RL_T106.QTYBCKORD;
                REC_XOUT_T106.QTYANN :=RL_T106.QTYANN;
                REC_XOUT_T106.QTYDEL :=RL_T106.QTYDEL;
                REC_XOUT_T106.UMINV :=RL_T106.UMINV;
                REC_XOUT_T106.QTYINV :=RL_T106.QTYINV;
                REC_XOUT_T106.CODTYPROW :=RL_T106.CODTYPROW;
                REC_XOUT_T106.CODLIST :=RL_T106.CODLIST;
                REC_XOUT_T106.DTEDELIV :=RL_T106.DTEDELIV;
                REC_XOUT_T106.DTEPROPDELIV :=RL_T106.DTEPROPDELIV;
                REC_XOUT_T106.CODSTATUS :=RL_T106.CODSTATUS;
                REC_XOUT_T106.CODSHIPPER :=RL_T106.CODSHIPPER;
                REC_XOUT_T106.OBJID :=RL_T106.OBJID;
                REC_XOUT_T106.NUMDOCREF :=RL_T106.NUMDOCREF;
                REC_XOUT_T106.DTEDOCREF :=RL_T106.DTEDOCREF;
                REC_XOUT_T106.GROSSAMOUNT :=RL_T106.GROSSAMOUNT;
                REC_XOUT_T106.NUMINV :=RL_T106.NUMINV;
                REC_XOUT_T106.NETAMOUNT :=RL_T106.NETAMOUNT;
                REC_XOUT_T106.DTEINV :=RL_T106.DTEINV;
                REC_XOUT_T106.TAXAMOUNT :=RL_T106.TAXAMOUNT;
                REC_XOUT_T106.VATAMOUNT :=RL_T106.VATAMOUNT;
                REC_XOUT_T106.INCREASEAMOUNT :=RL_T106.INCREASEAMOUNT;
                REC_XOUT_T106.DISCOUNTAMOUNT :=RL_T106.DISCOUNTAMOUNT;
                REC_XOUT_T106.GIFTAMOUNT :=RL_T106.GIFTAMOUNT;
                REC_XOUT_T106.ENDUSERPRICE :=RL_T106.ENDUSERPRICE;
                REC_XOUT_T106.CODAZCAPP :=RL_T106.CODAZCAPP;
                REC_XOUT_T106.FLGEFFBCKORD :=RL_T106.FLGEFFBCKORD;
                REC_XOUT_T106.CODBCKORDCAUSE :=RL_T106.CODBCKORDCAUSE;
                REC_XOUT_T106.GROSSARTAMOUNT :=RL_T106.GROSSARTAMOUNT;
                REC_XOUT_T106.NETARTAMOUNT :=RL_T106.NETARTAMOUNT;
                REC_XOUT_T106.CODSRC :=RL_T106.CODSRC;
                REC_XOUT_T106.CODSRCREF :=RL_T106.CODSRCREF;
                REC_XOUT_T106.CODBENCAUSE :=RL_T106.CODBENCAUSE;
                REC_XOUT_T106.CODBENSUBCAUSE :=RL_T106.CODBENSUBCAUSE;
                REC_XOUT_T106.BENNOTE :=RL_T106.BENNOTE;
                REC_XOUT_T106.AZCTOAPPLY :=RL_T106.AZCTOAPPLY;
                REC_XOUT_T106.CODOPERATION :=RL_T106.CODOPERATION;
                REC_XOUT_T106.DISCOUNTAMOUNTOUTINV :=RL_T106.DISCOUNTAMOUNTOUTINV;
                REC_XOUT_T106.CODACCAPP :=RL_T106.CODACCAPP;
                REC_XOUT_T106.CODTYPROWCAUSE :=RL_T106.CODTYPROWCAUSE;
                REC_XOUT_T106.CODARTCUST :=RL_T106.CODARTCUST;
                REC_XOUT_T106.QTYRESO :=RL_T106.QTYRESO;
                REC_XOUT_T106.NUMORDRESO :=RL_T106.NUMORDRESO;
                REC_XOUT_T106.CODBLCCAUSE :=RL_T106.CODBLCCAUSE;
                REC_XOUT_T106.CODARTKITREF :=RL_T106.CODARTKITREF;
                REC_XOUT_T106.NUMROWKITREF :=RL_T106.NUMROWKITREF;
                REC_XOUT_T106.CODCAUSEKIT :=RL_T106.CODCAUSEKIT;
                REC_XOUT_T106.NETARTAMOUNTTEO :=RL_T106.NETARTAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTTEO :=RL_T106.NETAMOUNTTEO;
                REC_XOUT_T106.NETAMOUNTMIN :=RL_T106.NETAMOUNTMIN;
                REC_XOUT_T106.NETAMOUNTMAX :=RL_T106.NETAMOUNTMAX;
                REC_XOUT_T106.NETDIFF :=RL_T106.NETDIFF;
                REC_XOUT_T106.COD_ABBINAMENTO_KIT :=RL_T106.COD_ABBINAMENTO_KIT;
                REC_XOUT_T106.NUMROWORIG :=RL_T106.NUMROWORIG;
                REC_XOUT_T106.FLGFIRSTSON :=RL_T106.FLGFIRSTSON;
                REC_XOUT_T106.NETARTAMOUNTCUST :=RL_T106.NETARTAMOUNTCUST;
                REC_XOUT_T106.NETARTAMOUNTCUST2 :=RL_T106.NETARTAMOUNTCUST2;
                REC_XOUT_T106.GROSSARTAMOUNTCUST :=RL_T106.GROSSARTAMOUNTCUST;
                REC_XOUT_T106.NETAMOUNTCUST :=RL_T106.NETAMOUNTCUST;
                REC_XOUT_T106.QTYORDEDI :=RL_T106.QTYORDEDI;
                REC_XOUT_T106.CODEAN :=RL_T106.CODEAN;
                REC_XOUT_T106.UMORDEDI :=RL_T106.UMORDEDI;
                REC_XOUT_T106.NUMROWREF :=RL_T106.NUMROWREF;
                REC_XOUT_T106.FLGOMGPROMO :=RL_T106.FLGOMGPROMO;
                REC_XOUT_T106.GROSSARTAMOUNTORD :=RL_T106.GROSSARTAMOUNTORD;
                REC_XOUT_T106.GROSSARTAMOUNTDELTA :=RL_T106.GROSSARTAMOUNTDELTA;
                REC_XOUT_T106.FLGOMGDISCLIST :=RL_T106.FLGOMGDISCLIST;
                REC_XOUT_T106.CODCNVPDA :=RL_T106.CODCNVPDA;
                REC_XOUT_T106.DTEEVA :=RL_T106.DTEEVA;
                REC_XOUT_T106.CODPAYTRM :=RL_T106.CODPAYTRM;
                REC_XOUT_T106.CODPAYMOD :=RL_T106.CODPAYMOD;
                REC_XOUT_T106.NUMORDHOST :=RL_T106.NUMORDHOST;
                REC_XOUT_T106.NUMROWHOST :=RL_T106.NUMROWHOST;
                REC_XOUT_T106.CODMODSHIP :=RL_T106.CODMODSHIP;
                REC_XOUT_T106.CODMODDELIV :=RL_T106.CODMODDELIV;
                REC_XOUT_T106.CODWHS :=RL_T106.CODWHS;
                REC_XOUT_T106.DTEPRICE :=RL_T106.DTEPRICE;
                REC_XOUT_T106.DTEDELIVTO :=RL_T106.DTEDELIVTO;
                REC_XOUT_T106.CODROWGROUP :=RL_T106.CODROWGROUP;
                REC_XOUT_T106.NETAMOUNTGIFT :=RL_T106.NETAMOUNTGIFT;
                REC_XOUT_T106.NETARTAMOUNTEDI :=RL_T106.NETARTAMOUNTEDI;
                REC_XOUT_T106.GROSSARTAMOUNTEDI :=RL_T106.GROSSARTAMOUNTEDI;
                --
                REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
                REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;

                INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;

                VL_INS_T106 := VL_INS_T106 + 1;

                -- Row Benefits
                EXP_T101BENEFIT(PI_PROGR_H , VL_PROGR_D_T101, RL_T106.NUMORD, RL_T106.CODUSR, RL_T106.NUMROW, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_T101, VL_INS_T101_P, VL_COUNT_XOUT_T101_P );
                VL_INS_T101 := VL_INS_T101 + VL_INS_T101_P;
                VL_COUNT_XOUT_T101 := VL_COUNT_XOUT_T101 + VL_COUNT_XOUT_T101_P;

              /*  -- Row NOTES
                EXP_TA4410_NOTES(PI_PROGR_H , VL_PROGR_D_TA441, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA441, VL_INS_TA441_P,VL_COUNT_XOUT_TA441_P );
                VL_INS_TA441 := VL_INS_TA441 + VL_INS_TA441_P;
                VL_COUNT_XOUT_TA441 := VL_COUNT_XOUT_TA441 + VL_COUNT_XOUT_TA441_P;


                -- Row Anomalies
                EXP_TA443X_ANOMALIES(PI_PROGR_H , VL_PROGR_D_TA443, RL_T106.DOCUMENTKEY, REC_XOUT_T100.SM1_DTEPROCESS, VL_MESSAGE_D, VL_ST_TA443, VL_INS_TA443_P, VL_COUNT_XOUT_TA443_P );
                VL_INS_TA443 := VL_INS_TA443 + VL_INS_TA443_P;
                VL_COUNT_XOUT_TA443 := VL_COUNT_XOUT_TA443 + VL_COUNT_XOUT_TA443_P;
     */
                --
              VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
              END LOOP;
              VL_COUNT_XOUT_T106 := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
              VL_COUNT_XOUT_T106_P := 0;

        END IF;
          --
        EXCEPTION
          WHEN OTHERS THEN
             VL_STATUS := -1;
             VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

             PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                             VL_PROGR_D_T106,
                                             SQLCODE,
                                             VL_MESSAGE_H);

        END; --- ord rows T106


      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
          VL_INS_T100 := VL_INS_T100 + 1;
          UPDATE T100ORDHEAD
          SET    --DTETOHOST = REC_XOUT_T100.SM1_DTEPROCESS,
         CODTYPORDCUST   = NUMORD,  
                 DTELCK          = NULL,
                 IDSESSIONLCK    = NULL,
                 CODUSRLCK       = NULL,
                 NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR)
          WHERE  NUMORD    = REC_XOUT_T100.NUMORD
            AND  CODUSR    = REC_XOUT_T100.CODUSR;

         COMMIT;
      ELSE
        ROLLBACK;
         -- Release updated records
        UPDATE T100ORDHEAD
        SET       DTELCK          = NULL,
                  IDSESSIONLCK    = NULL,
                  CODUSRLCK       = NULL
        WHERE NUMORD = REC_XOUT_T100.NUMORD
          AND CODUSR = REC_XOUT_T100.CODUSR ;
        COMMIT;

      END IF;


    END LOOP;



   -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA443,
                                      0,
                                      VL_COUNT_XOUT_TA443,
                                      VL_INS_TA443,
                                      VL_COUNT_XOUT_TA443-VL_INS_TA443);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_TA441,
                                      0,
                                      VL_COUNT_XOUT_TA441,
                                      VL_INS_TA441,
                                      VL_COUNT_XOUT_TA441-VL_INS_TA441);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T101,
                                      0,
                                      VL_COUNT_XOUT_T101,
                                      VL_INS_T101,
                                      VL_COUNT_XOUT_T101 - VL_INS_T101);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T106,
                                      0,
                                      VL_COUNT_XOUT_T106,
                                      VL_INS_T106,
                                      VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                                      VL_PROGR_D_T100,
                                      0,
                                      VL_COUNT_XOUT_T100,
                                      VL_INS_T100,
                                      VL_COUNT_XOUT_T100 - VL_INS_T100);





    PO_MSG := VL_INS_T100||' Orders Exported';
    PO_STATUS :=VL_INS_T100;


  EXCEPTION WHEN EX_EXIT THEN

          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := -1;

   WHEN OTHERS THEN

          ROLLBACK;

          BEGIN
              -- Release updated records
              UPDATE T100ORDHEAD
              SET       DTELCK          = NULL,
                        IDSESSIONLCK    = NULL,
                        CODUSRLCK       = NULL
              WHERE CODUSRLCK = C_SYSUSR AND IDSESSIONLCK = PI_SESSION_ID;
              COMMIT;


          END;

          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                  VL_PROGR_D_T100,
                                                  SQLCODE,
                                                  VL_MESSAGE_H);

          PO_MSG := VL_MESSAGE_H;
          PO_STATUS := VL_STATUS;

  END EXP_T10X_VANREQUEST_DFI_51;
  
  
  /*============================================================================*/
  /*       EXP_SETTLEMENTCASH for exporting data                                   */

  /*    

CREATED BY : DCODE | Ganesh
   */
  /*============================================================================*/


PROCEDURE EXP_SETTLEMENTCASH (PI_PROGR_H          IN NUMBER,
                            PI_SESSION_ID       IN NUMBER,
                            PI_DOCUMENTKEY      IN VARCHAR2,
                            PI_MASSIVE_EXP_DATE IN DATE,
                            PI_CODDIV           IN VARCHAR2,
                            PO_MSG              OUT VARCHAR,
                            PO_STATUS           OUT NUMBER ) IS


    -- -----------------------------------------
    -- Cursor on Settlement HDR table Z_TA0400SETTLEMENT
    -- -----------------------------------------
    --
    -- Head Columns 
   
    CURSOR CL_TA0400HEAD IS

       SELECT 
            T1.CODUSR,
            T1.CODDIV,
            T2.CODUSR AS XOUTCODUSR,
            T1.VALBALANCE,
            T1.DTEMOD,
            T1.CODUSRLCK,
            T1.DTECRE,
            T1.DTELCK,
            T1.IDSESSIONLCK,
            T1.CODUSRMOD,
            T1.DOCUMENTKEY
         FROM Z_TA0400SETTLEMENT T1  FULL OUTER JOIN XOUT_Z_TA0400SETTLEMENT T2 
             ON T1.CODUSR=T2.CODUSR AND T1.CODDIV=T2.CODDIV
             WHERE T1.IDSESSIONLCK = PI_SESSION_ID 
             ORDER BY DTECRE ASC;
    

    -- Row Columns
    
    CURSOR CL_TA0400ROW IS
        SELECT * FROM z_TA0402SETTLEMENTDET DET 
        LEFT OUTER JOIN Z_SETT_MOVEMENT Z_DET ON DET.IDMOVEMENT=Z_DET.IDMOVEMENT_M
        WHERE  IDMOVEMENT_M IS  NULL ORDER BY CODUSR;
    

  
    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting benefit Z_TA0400SETTLEMENT|z_TA0402SETTLEMENTDET ';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
  
    REC_XOUT_TA0400HEAD   XOUT_Z_TA0400SETTLEMENT%ROWTYPE       := NULL;
    REC_XOUT_TA0400DET    XOUT_TA0402SETTLEMENTDET%ROWTYPE       := NULL;
    REC_Z_SETT_MOVEMENT    Z_SETT_MOVEMENT%ROWTYPE       := NULL;

    
     PI_SM1_DTEPROCESS NUMBER:=0;  
     VL_STATUS NUMBER:= 0;
     VL_INS    NUMBER:= 0;
     VL_COUNT  NUMBER:= 0;
     VL_COUNTDET NUMBER:= 0;
     PI_PROGR_D    NUMBER := 0;
     PO_INS NUMBER:=0;
    --
    EX_EXIT  EXCEPTION;
    
    --
      BEGIN


     UPDATE Z_TA0400SETTLEMENT T
        SET T.IDSESSIONLCK = PI_SESSION_ID,
            T.CODUSRLCK    = C_SYSUSR,
            T.DTELCK       = XSYSDATE
        WHERE
     T.IDSESSIONLCK IS NULL 
   ;

       COMMIT;


   

     dbms_output.put_line('SELECTTION 1 Z_TA0400SETTLEMENT' || PI_SESSION_ID  );
     dbms_output.put_line('SELECTTION 2 z_TA0402SETTLEMENTDET  ' );   
     PI_PROGR_D := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                     'ROWS',
                                                     'EXPORT --> Z_TA0400SETTLEMENT,z_TA0402SETTLEMENTDET',
                                                      0,
                                                      NULL);
    -- --------------------------------------------------------------
    -- loops Notes for DOCUMENT KEY IN INPUT
    -- --------------------------------------------------------------
  
 
    VL_MESSAGE_D := '';  
    VL_STATUS := 0;
   
     
  
      FOR RL_TA0400HEAD IN CL_TA0400HEAD LOOP
          
                  VL_COUNT := VL_COUNT + 1;

                  IF (RL_TA0400HEAD.XOUTCODUSR IS NULL) THEN 
                 
               -- dbms_output.put_line('VL_STATUS' || VL_STATUS );
           

               

                   -- dbms_output.put_line(VL_STATUS || 'inside Loop Header Insert'  );
                                           
                                 BEGIN      
                                      VL_MESSAGE_D := 'Insert XOUT_Z_TA0400SETTLEMENT';
                                      REC_XOUT_TA0400HEAD.CODUSR :=RL_TA0400HEAD.CODUSR;
                                      REC_XOUT_TA0400HEAD.CODDIV :=RL_TA0400HEAD.CODDIV;
                                      REC_XOUT_TA0400HEAD.VALBALANCE := RL_TA0400HEAD.VALBALANCE;
                                      REC_XOUT_TA0400HEAD.DTEMOD :=RL_TA0400HEAD.DTEMOD;
                                      REC_XOUT_TA0400HEAD.CODUSRLCK :=RL_TA0400HEAD.CODUSRLCK;
                                      REC_XOUT_TA0400HEAD.DTECRE :=RL_TA0400HEAD.DTECRE;
                                      REC_XOUT_TA0400HEAD.DTELCK :=RL_TA0400HEAD.DTELCK;
                                      REC_XOUT_TA0400HEAD.IDSESSIONLCK :=RL_TA0400HEAD.IDSESSIONLCK;
                                      REC_XOUT_TA0400HEAD.CODUSRMOD :=RL_TA0400HEAD.CODUSRMOD;
                                      REC_XOUT_TA0400HEAD.DOCUMENTKEY :=RL_TA0400HEAD.DOCUMENTKEY;
                                      REC_XOUT_TA0400HEAD.SM1_DTEPROCESS := XSYSDATE;
                                      REC_XOUT_TA0400HEAD.SM1_CODPROCESS := PI_PROGR_H;
                                      REC_XOUT_TA0400HEAD.ERP_STATUS := '0'; 
                                      REC_XOUT_TA0400HEAD.ERP_DTEPROCESS := XSYSDATE; 
                                  
                                
                                     VL_INS := VL_INS + 1;

                                      EXCEPTION WHEN OTHERS THEN

                                         VL_STATUS := -1;
                                         VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

                                         PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                                       PI_PROGR_D,
                                                                       SQLCODE,
                                                                       VL_MESSAGE_H);
                                                                       
                                                                     
  

                               END;
                      
                          --  dbms_output.put_line('INSERTED RL_TA0400HEAD' || VL_COUNT );
                 
                              INSERT INTO XOUT_Z_TA0400SETTLEMENT VALUES REC_XOUT_TA0400HEAD;
        
              ELSE 

                                  -- dbms_output.put_line('VL_STATUS' || VL_STATUS );
                         IF ( VL_STATUS = 0 ) THEN
                                           -- dbms_output.put_line(VL_STATUS || 'inside Loop Hear Update'  );
                                                  
                             BEGIN --HEAD  

                                            VL_MESSAGE_D := 'UPDATE XOUT_Z_TA0400SETTLEMENT SET';
                                            UPDATE XOUT_Z_TA0400SETTLEMENT   SET          
                                            CODUSR =RL_TA0400HEAD.CODUSR,
                                            CODDIV =RL_TA0400HEAD.CODDIV,
                                            VALBALANCE = RL_TA0400HEAD.VALBALANCE,
                                            DTEMOD =RL_TA0400HEAD.DTEMOD,
                                            CODUSRLCK =RL_TA0400HEAD.CODUSRLCK,
                                            DTECRE =RL_TA0400HEAD.DTECRE,
                                            DTELCK =RL_TA0400HEAD.DTELCK,
                                            IDSESSIONLCK =RL_TA0400HEAD.IDSESSIONLCK,
                                            CODUSRMOD =RL_TA0400HEAD.CODUSRMOD,
                                            DOCUMENTKEY =RL_TA0400HEAD.DOCUMENTKEY,
                                            SM1_DTEPROCESS = XSYSDATE,
                                            SM1_CODPROCESS = PI_PROGR_H,
                                            ERP_STATUS = '0',
                                            ERP_DTEPROCESS = XSYSDATE 
                                              WHERE 
                                            CODUSR =RL_TA0400HEAD.CODUSR AND CODDIV =RL_TA0400HEAD.CODDIV;

                                           VL_INS := VL_INS + 1;

                                               EXCEPTION WHEN OTHERS THEN
                                               VL_STATUS := -1;
                                               VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);
                                               PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                                             PI_PROGR_D,
                                                                             SQLCODE,
                                                                             VL_MESSAGE_H);
                                                 
                                                                                      
                                END;

                          END IF;  

                 END IF;  
           
       END LOOP;

   
      FOR RL_TA0400DET IN CL_TA0400ROW LOOP
                         --dbms_output.put_line('LOOPING RL_TA0400DET ROW' || VL_COUNT );
                       --     dbms_output.put_line('VL_STATUS' || VL_STATUS );
                            VL_COUNTDET := VL_COUNTDET + 1;
                IF(VL_STATUS=0) THEN
              
                             --  dbms_output.put_line(VL_STATUS || 'inside Loop'  );
                                      
                              BEGIN --HEAD
                                        REC_XOUT_TA0400DET.IDMOVEMENT:=RL_TA0400DET.IDMOVEMENT;
                                        REC_XOUT_TA0400DET.CODUSR:=RL_TA0400DET.CODUSR;
                                        REC_XOUT_TA0400DET.CODDIV:=RL_TA0400DET.CODDIV;
                                        REC_XOUT_TA0400DET.DTEMOVEMENT:=RL_TA0400DET.DTEMOVEMENT;
                                        REC_XOUT_TA0400DET.DTEDAY:=RL_TA0400DET.DTEDAY;
                                        REC_XOUT_TA0400DET.IDROUTE:=RL_TA0400DET.IDROUTE;
                                        REC_XOUT_TA0400DET.CODTYPMOV:=RL_TA0400DET.CODTYPMOV;
                                        REC_XOUT_TA0400DET.AMOUNT:=RL_TA0400DET.AMOUNT;
                                        REC_XOUT_TA0400DET.NOTE:=RL_TA0400DET.NOTE;
                                        REC_XOUT_TA0400DET.FLGANN:=RL_TA0400DET.FLGANN;
                                        --REC_XOUT_TA0400DET.Z_SETCLOSE=RL_TA0400DET. Z_SETCLOSE;                                        
                                        REC_XOUT_TA0400DET.SM1_DTEPROCESS := XSYSDATE;
                                        REC_XOUT_TA0400DET.SM1_CODPROCESS := PI_PROGR_H;
                                        REC_XOUT_TA0400DET.ERP_STATUS := '0'; 
                                        REC_XOUT_TA0400DET.ERP_DTEPROCESS := XSYSDATE;                                     
                                        REC_Z_SETT_MOVEMENT.IDMOVEMENT_M :=RL_TA0400DET.IDMOVEMENT;

                                        EXCEPTION WHEN OTHERS THEN

                                         VL_STATUS := -1;
                                         VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

                                         PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                                         PI_PROGR_D,
                                                         SQLCODE,
                                                         VL_MESSAGE_H);
                                                         
                                END ;                  
                               
                   END IF;
                  
                  INSERT INTO XOUT_TA0402SETTLEMENTDET VALUES REC_XOUT_TA0400DET;             
                  INSERT INTO Z_SETT_MOVEMENT VALUES REC_Z_SETT_MOVEMENT; 
                  

       END LOOP;
      
          
  
  IF(VL_STATUS = 0) THEN

  UPDATE Z_TA0400SETTLEMENT T
        SET T.IDSESSIONLCK = NULL,
            T.CODUSRLCK    = NULL,
            T.DTELCK       = NULL
        WHERE
     T.IDSESSIONLCK=PI_SESSION_ID;

     COMMIT;

       UPDATE XOUT_TA0402SETTLEMENTDET SET FLGANN ='-1' WHERE  IDMOVEMENT in
 (SELECT IDMOVEMENT FROM z_TA0402SETTLEMENTDET WHERE FLGANN ='-1');
 COMMIT;

      
    
  ELSE
 
  
  ROLLBACK;
        VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         PI_PROGR_D,
                                         SQLCODE,
                                         VL_MESSAGE_H);
         --dbms_output.put_line('INERTION FAILED RL_TA0400DET' || VL_COUNT );
  END IF;
     
  
    --
  EXCEPTION WHEN OTHERS THEN
          ROLLBACK;
          VL_MESSAGE_H       := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         PI_PROGR_D,
                                         SQLCODE,
                                         VL_MESSAGE_H);


       --   PO_MSG := VL_MESSAGE_H;
        --  PO_STATUS := VL_STATUS;
          
      

  END EXP_SETTLEMENTCASH;

  /*============================================================================*\
  /* 
     Name : EXP_T10X_VANREQUEST_SYG_50
     Exports SM1 tables :
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail

      Staging Area (SSA) tables :
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic :
      •  Exports vanload request order header and rows for division SYG
      •  Exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  Deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

      Error handling :
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  Error on record, header and all details are discarded

      Input parameters :     PI_PROGR_H:           unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID:        unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                             PI_MASSIVE_EXP_DATE:  NULL - normal export NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                             PI_CODE_CHAR_A:       division
  */
  /*============================================================================ */
  PROCEDURE EXP_T10X_VANREQUEST_SYG_50(PI_PROGR_H          IN NUMBER,
                                       PI_SESSION_ID       IN NUMBER,
                                       PI_DOCUMENTKEY      IN VARCHAR2,
                                       PI_MASSIVE_EXP_DATE IN DATE,
                                       PI_CODDIV           IN VARCHAR2,
                                       PO_MSG              OUT VARCHAR,
                                       PO_STATUS           OUT NUMBER) IS
    -- Cursor on main Order table
    CURSOR CL_T100 IS
      SELECT T.*, T031.CODWHSDELIV
        FROM T100ORDHEAD T
        
       INNER JOIN T031USERDIV T031
          On T.CODEUSR = T031.CODUSR
         And T.CODDIV = T031.CODDIV
      
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK = PI_SESSION_ID
       ORDER BY T.NUMORD,
                t.CODUSR;
       
    -- Rows
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT T106.*,
             T060.DESART || '/' || T060.DESART2 PRODUCTDES
        FROM T106ORDROW T106
        
        JOIN T060ARTICLE T060
          ON T060.CODART = T106.CODART
         AND T060.CODDIV = T106.CODDIV
        
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR;
         
    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD,
             CODUSR,
             DTELCK,
             CODUSRLCK
        FROM ZQEXP_T100VANLOADREQ_SYG_50_C
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK != PI_SESSION_ID
         and DOCUMENTKEY = nvl(PI_DOCUMENTKEY, DOCUMENTKEY)
         and NVL(DTEMOD, DTECRE) >
             NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
       ORDER BY NUMORD,
                CODUSR ASC;
    --
    VL_MESSAGE_H VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106      NUMBER := 0;
    VL_COUNT_XOUT_T106   NUMBER := 0;
    VL_COUNT_XOUT_T106_P NUMBER := 0;
    VL_INS_T106          NUMBER := 0;
    --
    REC_XOUT_T100 XOUT_T100ORDHEAD%ROWTYPE := NULL;
    REC_XOUT_T106 XOUT_T106ORDROW%ROWTYPE := NULL;

    VL_STATUS   NUMBER := 0;
    VL_STEP     NUMBER := 0; -- Used to ping t035
    --
    EX_EXIT EXCEPTION;
    --
  BEGIN

    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER HEAD',
                                                'EXPORT --> ORDER HEAD VANLOAD REQUEST (SYG)',
                                                0,
                                                NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER ROWS',
                                                'EXPORT --> ORDER ROW VANLOAD REQUEST (SYG)',
                                                0,
                                                NULL);

    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED
    -- --------------------------------------------------------------
    BEGIN
      
      VL_MESSAGE_D := 'T100ORDHEAD';
      UPDATE T100ORDHEAD T
         SET T.IDSESSIONLCK = PI_SESSION_ID,
             T.CODUSRLCK    = C_SYSUSR,
             T.DTELCK       = XSYSDATE
       WHERE t.DOCUMENTKEY = nvl(PI_DOCUMENTKEY, T.DOCUMENTKEY)
         AND T.CODDIV = nvl(PI_CODDIV, T.coddiv)
         AND NVL(DTEMOD, DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
         AND NVL(T.CODTYPORDCUST, 0) = 0
         AND (T.NUMORD, T.CODUSR, T.CODDIV) IN
             (SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100VANLOADREQ_SYG_50_C Q
               WHERE Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE, Q.DTEMOD));
               
      VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
      COMMIT;
      
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VL_MESSAGE_H := 'Error while Locking: ' || VL_MESSAGE_D;
        RAISE EX_EXIT;
    END;
    -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
    
      VL_MESSAGE_H := 'Unable to Export ' || VL_MESSAGE_D || '.Numord=' ||
                      R_LOCKED.NUMORD || 'Codusr = ' || R_LOCKED.CODUSR ||
                      ' Record locked by user ' || R_LOCKED.CODUSRLCK ||
                      ' since ' ||
                      to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);
    
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
    END LOOP;

    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF (MOD(VL_STEP, 1000) = 0) THEN
        PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H := 'Order: ' || RL_T100.NUMORD || '/' || RL_T100.CODUSR;
      --
      BEGIN
        
        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD
         WHERE NUMORD = RL_T100.NUMORD
           AND CODUSR = RL_T100.CODUSR
           AND ERP_DTEPROCESS IS NULL;
      
        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        REC_XOUT_T100.NUMORD               := RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR               := RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR              := RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD            := RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS            := RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV               := RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE          := RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD               := RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV             := RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV          := RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA               := RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM            := RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD            := RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV         := RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT           := RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV           := RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST              := RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR               := RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF            := RL_T100.NUMORD;
        REC_XOUT_T100.NUMORDHOST           := NULL;
        REC_XOUT_T100.NUMORDCUST           := TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);
        REC_XOUT_T100.DTEORDCUST           := RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT        := RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS           := RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP           := RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV          := RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT         := NVL(RL_T100.CODAGREEMENT,0);
        REC_XOUT_T100.DESAGREEMENT         := RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT            := RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS        := RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT               := NVL(RL_T100.DTEAUT, TO_DATE('12/30/1899','MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPAUT            := RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT               := RL_T100.DESAUT;
        REC_XOUT_T100.GROSSAMOUNT          := RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT            := RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT            := NVL(RL_T100.TAXAMOUNT,0);
        REC_XOUT_T100.VATAMOUNT            := RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT       := NVL(RL_T100.INCREASEAMOUNT,0);
        REC_XOUT_T100.DISCOUNTAMOUNT       := NVL(RL_T100.DISCOUNTAMOUNT,0);
        REC_XOUT_T100.GIFTAMOUNT           := NVL(RL_T100.GIFTAMOUNT,0);
        REC_XOUT_T100.CODUSRMOD            := RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN               := RL_T100.FLGANN;
        REC_XOUT_T100.CODABI               := RL_T100.CODABI;
        REC_XOUT_T100.CODCAB               := RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN               := RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA               := RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR              := RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC               := RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV               := RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT               := RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV               := RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT             := RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT           := RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN            := NVL(RL_T100.FLGRETURN,0);
        REC_XOUT_T100.FLGHOSTED            := NVL(RL_T100.FLGHOSTED,0);
        REC_XOUT_T100.FLGCONFIRMED         := NVL(RL_T100.FLGCONFIRMED,0);
        REC_XOUT_T100.CODWHS               := RL_T100.CODWHS;
        REC_XOUT_T100.CODWHSDELIV          := RL_T100.CODWHSDELIV;
        REC_XOUT_T100.CODSHIPPER           := RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP            := RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN            := RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE             := NVL(RL_T100.DTEPRICE, TO_DATE('12/30/1899','MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPSALE           := RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO        := NVL(RL_T100.FLGCHECKPROMO,0);
        REC_XOUT_T100.CODAGREETYPE         := RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN         := RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV := NVL(RL_T100.DISCOUNTAMOUNTOUTINV,0);
        REC_XOUT_T100.CODTYPORDCUST        := RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3              := RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO           := RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN               := RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2            := NVL(RL_T100.FLGUMORD2,0);
        REC_XOUT_T100.NETAMOUNTTEO         := NVL(RL_T100.NETAMOUNTTEO,0);
        REC_XOUT_T100.NETAMOUNTMIN         := NVL(RL_T100.NETAMOUNTMIN,0);
        REC_XOUT_T100.NETAMOUNTMAX         := NVL(RL_T100.NETAMOUNTMAX,0);
        REC_XOUT_T100.CODUSR4              := RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2              := RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI          := RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI        := RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI      := RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI         := RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6              := RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV               := RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC          := RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN              := RL_T100.CODIBAN;
        REC_XOUT_T100.BACKAMOUNT           := NVL(RL_T100.BACKAMOUNT,0);
        REC_XOUT_T100.TOTPALLETS           := RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT          := RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC                := RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV         := RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.CODUSR5              := RL_T100.CODUSR5;
        REC_XOUT_T100.IDSURVEY             := RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE          := RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI      := NVL(RL_T100.FLGPROCESSEDEDI,0);
        REC_XOUT_T100.FLGEDI               := NVL(RL_T100.FLGEDI,0);
        REC_XOUT_T100.NUMESENZIONE         := RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2            := RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3            := RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4            := RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5            := RL_T100.DTEDELIV5;
        REC_XOUT_T100.IDROUTE              := RL_T100.IDROUTE;
        REC_XOUT_T100.NUMDOC               := RL_T100.NUMDOC;
        REC_XOUT_T100.DTECLOSE             := RL_T100.DTECLOSE;
        REC_XOUT_T100.RETURNAMOUNT         := RL_T100.RETURNAMOUNT;
        REC_XOUT_T100.GPSVALLATITUDE       := RL_T100.GPSVALLATITUDE;
        REC_XOUT_T100.GPSVALLONGITUDE      := RL_T100.GPSVALLONGITUDE;
        REC_XOUT_T100.DTENEW               := RL_T100.DTENEW;
        REC_XOUT_T100.CALCULATEDSPENTTIME  := RL_T100.CALCULATEDSPENTTIME;
        REC_XOUT_T100.CODPRINCIPALUSR      := RL_T100.CODPRINCIPALUSR;
        REC_XOUT_T100.Z_FLGPICKINGDONE     := RL_T100.Z_FLGPICKINGDONE;
        REC_XOUT_T100.Z_FLGCREATEBACKORDER := RL_T100.Z_FLGCREATEBACKORDER;
        REC_XOUT_T100.Z_NUMFIRSTORDER      := RL_T100.Z_NUMFIRSTORDER;
        REC_XOUT_T100.DTECRE               := RL_T100.DTECRE;
        REC_XOUT_T100.SM1_CODPROCESS       := PI_PROGR_H;
        REC_XOUT_T100.SM1_STATUS           := RL_T100.SM1_STATUS;
        REC_XOUT_T100.SM1_DTEPROCESS       := XSYSDATE;
        REC_XOUT_T100.ERP_DOCREFERENCE     := RL_T100.ERP_DOCREFERENCE;
        REC_XOUT_T100.IDDAY                := RL_T100.IDDAY;
        REC_XOUT_T100.CODLOCATION          := RL_T100.CODLOCATION;
        REC_XOUT_T100.FLGPROCESSEDASSET    := NVL(RL_T100.FLGPROCESSEDASSET,0);
        REC_XOUT_T100.CODADDR              := RL_T100.CODADDR;
        -- Field is mandatory in XOUT_T100ORDHEAD_LOG
        REC_XOUT_T100.MOVED                := 0;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
      
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T100,
                                         SQLCODE,
                                         VL_MESSAGE_H);
      END;
      
      BEGIN
        
        IF (VL_STATUS = 0) THEN

          VL_MESSAGE_D := 'Delete XOUT_T106ORDROW ';
          DElETE XOUT_T106ORDROW
           WHERE NUMORD = RL_T100.NUMORD
             AND CODUSR = RL_T100.CODUSR
             AND ERP_DTEPROCESS IS NULL;
        
          FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP
          
            VL_MESSAGE_H := 'Ord Row ' || RL_T106.NUMORD || '/' || RL_T106.CODUSR || '/' || RL_T106.NUMROW;
          
            VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
            REC_XOUT_T106.CODUSR               := RL_T106.CODUSR;
            REC_XOUT_T106.NUMORD               := RL_T106.NUMORD;
            REC_XOUT_T106.NUMROW               := RL_T106.NUMROW;
            REC_XOUT_T106.CODART               := GET_PRODUCT_CODE(RL_T106.CODDIV , RL_T106.CODART);
            REC_XOUT_T106.CODDIV               := RL_T106.CODDIV;
            REC_XOUT_T106.UMORD                := RL_T106.UMORD;
            REC_XOUT_T106.DESART               := RL_T106.PRODUCTDES;
            REC_XOUT_T106.QTYORD               := RL_T106.QTYORD;
            REC_XOUT_T106.QTYBCKORD            := NVL(RL_T106.QTYBCKORD,0);
            REC_XOUT_T106.QTYANN               := RL_T106.QTYANN;
            REC_XOUT_T106.QTYDEL               := RL_T106.QTYDEL;
            REC_XOUT_T106.UMINV                := RL_T106.UMINV;
            REC_XOUT_T106.QTYINV               := RL_T106.QTYINV;
            REC_XOUT_T106.CODTYPROW            := RL_T106.CODTYPROW;
            REC_XOUT_T106.CODLIST              := RL_T106.CODLIST;
            REC_XOUT_T106.DTEDELIV             := RL_T106.DTEDELIV;
            REC_XOUT_T106.DTEPROPDELIV         := RL_T106.DTEPROPDELIV;
            REC_XOUT_T106.CODSTATUS            := NVL(RL_T106.CODSTATUS,1);
            REC_XOUT_T106.CODSHIPPER           := RL_T106.CODSHIPPER;
            REC_XOUT_T106.NUMDOCREF            := RL_T106.NUMDOCREF;
            REC_XOUT_T106.DTEDOCREF            := RL_T106.DTEDOCREF;
            REC_XOUT_T106.GROSSAMOUNT          := RL_T106.GROSSAMOUNT;
            REC_XOUT_T106.NUMINV               := RL_T106.NUMINV;
            REC_XOUT_T106.NETAMOUNT            := RL_T106.NETAMOUNT;
            REC_XOUT_T106.DTEINV               := RL_T106.DTEINV;
            REC_XOUT_T106.TAXAMOUNT            := RL_T106.TAXAMOUNT;
            REC_XOUT_T106.VATAMOUNT            := RL_T106.VATAMOUNT;
            REC_XOUT_T106.INCREASEAMOUNT       := RL_T106.INCREASEAMOUNT;
            REC_XOUT_T106.DISCOUNTAMOUNT       := RL_T106.DISCOUNTAMOUNT;
            REC_XOUT_T106.GIFTAMOUNT           := RL_T106.GIFTAMOUNT;
            REC_XOUT_T106.ENDUSERPRICE         := RL_T106.ENDUSERPRICE;
            REC_XOUT_T106.CODAZCAPP            := RL_T106.CODAZCAPP;
            REC_XOUT_T106.FLGEFFBCKORD         := RL_T106.FLGEFFBCKORD;
            REC_XOUT_T106.CODBCKORDCAUSE       := RL_T106.CODBCKORDCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNT       := RL_T106.GROSSARTAMOUNT;
            REC_XOUT_T106.NETARTAMOUNT         := RL_T106.NETARTAMOUNT;
            REC_XOUT_T106.CODSRC               := RL_T106.CODSRC;
            REC_XOUT_T106.CODSRCREF            := RL_T106.CODSRCREF;
            REC_XOUT_T106.CODBENCAUSE          := RL_T106.CODBENCAUSE;
            REC_XOUT_T106.CODBENSUBCAUSE       := RL_T106.CODBENSUBCAUSE;
            REC_XOUT_T106.BENNOTE              := RL_T106.BENNOTE;
            REC_XOUT_T106.AZCTOAPPLY           := RL_T106.AZCTOAPPLY;
            REC_XOUT_T106.CODOPERATION         := RL_T106.CODOPERATION;
            REC_XOUT_T106.DISCOUNTAMOUNTOUTINV := RL_T106.DISCOUNTAMOUNTOUTINV;
            REC_XOUT_T106.CODACCAPP            := RL_T106.CODACCAPP;
            REC_XOUT_T106.CODTYPROWCAUSE       := RL_T106.CODTYPROWCAUSE;
            REC_XOUT_T106.CODARTCUST           := RL_T106.CODARTCUST;
            REC_XOUT_T106.QTYRESO              := RL_T106.QTYRESO;
            REC_XOUT_T106.NUMORDRESO           := RL_T106.NUMORDRESO;
            REC_XOUT_T106.CODBLCCAUSE          := RL_T106.CODBLCCAUSE;
            REC_XOUT_T106.CODARTKITREF         := RL_T106.CODARTKITREF;
            REC_XOUT_T106.NUMROWKITREF         := RL_T106.NUMROWKITREF;
            REC_XOUT_T106.CODCAUSEKIT          := RL_T106.CODCAUSEKIT;
            REC_XOUT_T106.NETARTAMOUNTTEO      := RL_T106.NETARTAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTTEO         := RL_T106.NETAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTMIN         := RL_T106.NETAMOUNTMIN;
            REC_XOUT_T106.NETAMOUNTMAX         := RL_T106.NETAMOUNTMAX;
            REC_XOUT_T106.NETDIFF              := RL_T106.NETDIFF;
            REC_XOUT_T106.COD_ABBINAMENTO_KIT  := RL_T106.COD_ABBINAMENTO_KIT;
            REC_XOUT_T106.NUMROWORIG           := RL_T106.NUMROWORIG;
            REC_XOUT_T106.FLGFIRSTSON          := RL_T106.FLGFIRSTSON;
            REC_XOUT_T106.NETARTAMOUNTCUST     := RL_T106.NETARTAMOUNTCUST;
            REC_XOUT_T106.NETARTAMOUNTCUST2    := RL_T106.NETARTAMOUNTCUST2;
            REC_XOUT_T106.GROSSARTAMOUNTCUST   := RL_T106.GROSSARTAMOUNTCUST;
            REC_XOUT_T106.NETAMOUNTCUST        := RL_T106.NETAMOUNTCUST;
            REC_XOUT_T106.QTYORDEDI            := RL_T106.QTYORDEDI;
            REC_XOUT_T106.CODEAN               := RL_T106.CODEAN;
            REC_XOUT_T106.UMORDEDI             := RL_T106.UMORDEDI;
            REC_XOUT_T106.NUMROWREF            := RL_T106.NUMROWREF;
            REC_XOUT_T106.FLGOMGPROMO          := RL_T106.FLGOMGPROMO;
            REC_XOUT_T106.GROSSARTAMOUNTORD    := RL_T106.GROSSARTAMOUNTORD;
            REC_XOUT_T106.GROSSARTAMOUNTDELTA  := RL_T106.GROSSARTAMOUNTDELTA;
            REC_XOUT_T106.FLGOMGDISCLIST       := RL_T106.FLGOMGDISCLIST;
            REC_XOUT_T106.CODCNVPDA            := RL_T106.CODCNVPDA;
            REC_XOUT_T106.DTEEVA               := RL_T106.DTEEVA;
            REC_XOUT_T106.CODPAYTRM            := RL_T106.CODPAYTRM;
            REC_XOUT_T106.CODPAYMOD            := RL_T106.CODPAYMOD;
            REC_XOUT_T106.NUMORDHOST           := NULL;
            REC_XOUT_T106.NUMROWHOST           := NULL;
            REC_XOUT_T106.CODMODSHIP           := RL_T106.CODMODSHIP;
            REC_XOUT_T106.CODMODDELIV          := RL_T106.CODMODDELIV;
            REC_XOUT_T106.CODWHS               := RL_T106.CODWHS;
            -- REC_XOUT_T106.CODWHSDELIV          := RL_T106.CODWHSDELIV; Spool file considers data from header T100 table
            REC_XOUT_T106.DTEPRICE             := RL_T106.DTEPRICE;
            REC_XOUT_T106.DTEDELIVTO           := RL_T106.DTEDELIVTO;
            REC_XOUT_T106.CODROWGROUP          := RL_T106.CODROWGROUP;
            REC_XOUT_T106.NETAMOUNTGIFT        := RL_T106.NETAMOUNTGIFT;
            REC_XOUT_T106.NETARTAMOUNTEDI      := RL_T106.NETARTAMOUNTEDI;
            REC_XOUT_T106.GROSSARTAMOUNTEDI    := RL_T106.GROSSARTAMOUNTEDI;
            REC_XOUT_T106.QTYORDORIG           := RL_T106.QTYORDORIG;
            REC_XOUT_T106.QTYALLOCATED         := RL_T106.QTYALLOCATED;
            REC_XOUT_T106.RETURNAMOUNT         := RL_T106.RETURNAMOUNT;
            REC_XOUT_T106.NETARTAMOUNTUMORD    := RL_T106.NETARTAMOUNTUMORD;
            REC_XOUT_T106.CODQTYMODCAUSE       := RL_T106.CODQTYMODCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNTUMORD  := RL_T106.GROSSARTAMOUNTUMORD;
            REC_XOUT_T106.Z_DTEXPIRE           := RL_T106.Z_DTEXPIRE;
            -- REC_XOUT_T106.DTECRE            := RL_T106.DTECRE; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_CODPROCESS       := REC_XOUT_T100.SM1_CODPROCESS;
            -- REC_XOUT_T106.SM1_STATUS        := RL_T106.SM1_STATUS; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_DTEPROCESS       := REC_XOUT_T100.SM1_DTEPROCESS;
            -- REC_XOUT_T106.ERP_DOCREFERENCE  := RL_T106.ERP_DOCREFERENCE; Spool file considers data from header T100 table

            INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;
          
            VL_INS_T106 := VL_INS_T106 + 1;
            VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
            
          END LOOP;
          VL_COUNT_XOUT_T106   := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
          VL_COUNT_XOUT_T106_P := 0;
        
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T106,
                                         SQLCODE,
                                         VL_MESSAGE_H);
        
      END;
    
      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
        
        VL_INS_T100 := VL_INS_T100 + 1;
        UPDATE T100ORDHEAD
           SET CODTYPORDCUST = NUMORD,
               DTELCK        = NULL,
               IDSESSIONLCK  = NULL,
               CODUSRLCK     = NULL,
               NUMORDCUST    = TRIM(NUMORD) || TRIM(CODUSR),
               DTETOHOST     = XSYSDATE
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
        
      ELSE
        
        ROLLBACK;
        UPDATE T100ORDHEAD
           SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      END IF;
    END LOOP;
    COMMIT;

    -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T106,
                             0,
                             VL_COUNT_XOUT_T106,
                             VL_INS_T106,
                             VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T100,
                             0,
                             VL_COUNT_XOUT_T100,
                             VL_INS_T100,
                             VL_COUNT_XOUT_T100 - VL_INS_T100);

    PO_MSG    := VL_INS_T100 || ' Orders Exported';
    PO_STATUS := VL_INS_T100;

  EXCEPTION
    WHEN EX_EXIT THEN
    
      ROLLBACK;
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := -1;
    
    WHEN OTHERS THEN
      
      ROLLBACK;
      UPDATE T100ORDHEAD
         SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
       WHERE CODUSRLCK = C_SYSUSR
         AND IDSESSIONLCK = PI_SESSION_ID;
      COMMIT;
    
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := VL_STATUS;
    
  END EXP_T10X_VANREQUEST_SYG_50;

  /*============================================================================*\
  /* 
     Name : EXP_T10X_VANREQUEST_SYG_51
     Exports SM1 tables :
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail

      Staging Area (SSA) tables :
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic :
      •  Exports vanload integration order header and rows for division SYG
      •  Exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  Deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

      Error handling :
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  Error on record, header and all details are discarded

      Input parameters :     PI_PROGR_H:           unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID:        unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                             PI_MASSIVE_EXP_DATE:  NULL - normal export NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                             PI_CODE_CHAR_A:       division
  */
  /*============================================================================ */  
  PROCEDURE EXP_T10X_VANREQUEST_SYG_51(PI_PROGR_H          IN NUMBER,
                                       PI_SESSION_ID       IN NUMBER,
                                       PI_DOCUMENTKEY      IN VARCHAR2,
                                       PI_MASSIVE_EXP_DATE IN DATE,
                                       PI_CODDIV           IN VARCHAR2,
                                       PO_MSG              OUT VARCHAR,
                                       PO_STATUS           OUT NUMBER) IS
    -- Cursor on main Order table
    CURSOR CL_T100 IS
      SELECT T.*, UD.Codwhsdeliv
        FROM T100ORDHEAD T
        
       Inner Join T031USERDIV UD
          On T.CODEUSR = UD.CODUSR
         And T.CODDIV = UD.CODDIV
      
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK = PI_SESSION_ID
       ORDER BY T.NUMORD, t.CODUSR ASC;
       
    -- Rows
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT T106.*,
             T060.DESART || '/' || T060.DESART2 PRODUCTDES
        FROM T106ORDROW T106
        
        JOIN T060ARTICLE T060
          ON T060.CODART = T106.CODART
         AND T060.CODDIV = T106.CODDIV
        
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR;
         
    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM ZQEXP_T100VANLOADREQ_SYG_51_C
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK != PI_SESSION_ID
         and DOCUMENTKEY = nvl(PI_DOCUMENTKEY, DOCUMENTKEY)
         and NVL(DTEMOD, DTECRE) >
             NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
       ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106      NUMBER := 0;
    VL_COUNT_XOUT_T106   NUMBER := 0;
    VL_COUNT_XOUT_T106_P NUMBER := 0;
    VL_INS_T106          NUMBER := 0;
    --

    REC_XOUT_T100 XOUT_T100ORDHEAD%ROWTYPE := NULL;
    REC_XOUT_T106 XOUT_T106ORDROW%ROWTYPE := NULL;

    VL_STATUS   NUMBER := 0;
    VL_ST_T101  NUMBER := 0;
    VL_ST_TA441 NUMBER := 0;
    VL_ST_TA443 NUMBER := 0;
    VL_STEP     NUMBER := 0; -- Used to ping t035
    --
    EX_EXIT EXCEPTION;
    --
  BEGIN

    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER HEAD',
                                                'EXPORT --> ORDER HEAD VANLOAD INTEGRATION (SYG)',
                                                0,
                                                NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER ROWS',
                                                'EXPORT --> ORDER ROW VANLOAD INTEGRATION (SYG)',
                                                0,
                                                NULL);
    --
    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
      VL_MESSAGE_D := 'T100ORDHEAD';
      UPDATE T100ORDHEAD T
         SET T.IDSESSIONLCK = PI_SESSION_ID,
             T.CODUSRLCK    = C_SYSUSR,
             T.DTELCK       = XSYSDATE
       WHERE t.DOCUMENTKEY = nvl(PI_DOCUMENTKEY, T.DOCUMENTKEY)
       and T.CODDIV = nvl(PI_CODDIV, T.coddiv)
       and NVL(DTEMOD, DTECRE) > NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
       and NVL(T.CODTYPORDCUST, 0) = 0
       AND (T.NUMORD, T.CODUSR, T.CODDIV) IN (SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                                                FROM ZQEXP_T100VANLOADREQ_SYG_51_C Q
                                               WHERE Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE, Q.DTEMOD));
      VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VL_MESSAGE_H := 'Error while Locking: ' || VL_MESSAGE_D;
        RAISE EX_EXIT;
    END;
    -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
    
      VL_MESSAGE_H := 'Unable to Export ' || VL_MESSAGE_D || '.Numord=' ||
                      R_LOCKED.NUMORD || 'Codusr = ' || R_LOCKED.CODUSR ||
                      ' Record locked by user ' || R_LOCKED.CODUSRLCK ||
                      ' since ' ||
                      to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);
    
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
    END LOOP;
    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      VL_STEP := VL_STEP + 1;
      IF (MOD(VL_STEP, 1000) = 0) THEN
        PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H := 'Order: ' || RL_T100.NUMORD || '/' || RL_T100.CODUSR;
      --
      BEGIN
      
        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD
         WHERE NUMORD = RL_T100.NUMORD
           AND CODUSR = RL_T100.CODUSR
           AND ERP_DTEPROCESS IS NULL;
      
        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        REC_XOUT_T100.NUMORD               := RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR               := RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR              := RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD            := RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS            := RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV               := RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE          := RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD               := RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV             := RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV          := RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA               := RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM            := RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD            := RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV         := RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT           := RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV           := RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST              := RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR               := RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF            := RL_T100.NUMORD;
        REC_XOUT_T100.NUMORDHOST           := NULL;
        REC_XOUT_T100.NUMORDCUST           := TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);
        REC_XOUT_T100.DTEORDCUST           := RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT        := RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS           := RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP           := RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV          := RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT         := NVL(RL_T100.CODAGREEMENT,0);
        REC_XOUT_T100.DESAGREEMENT         := RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT            := RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS        := RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT               := NVL(RL_T100.DTEAUT, TO_DATE('12/30/1899','MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPAUT            := RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT               := RL_T100.DESAUT;
        REC_XOUT_T100.GROSSAMOUNT          := RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT            := RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT            := NVL(RL_T100.TAXAMOUNT,0);
        REC_XOUT_T100.VATAMOUNT            := RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT       := NVL(RL_T100.INCREASEAMOUNT,0);
        REC_XOUT_T100.DISCOUNTAMOUNT       := NVL(RL_T100.DISCOUNTAMOUNT,0);
        REC_XOUT_T100.GIFTAMOUNT           := NVL(RL_T100.GIFTAMOUNT,0);
        REC_XOUT_T100.CODUSRMOD            := RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN               := RL_T100.FLGANN;
        REC_XOUT_T100.CODABI               := RL_T100.CODABI;
        REC_XOUT_T100.CODCAB               := RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN               := RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA               := RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR              := RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC               := RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV               := RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT               := RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV               := RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT             := RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT           := RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN            := NVL(RL_T100.FLGRETURN,0);
        REC_XOUT_T100.FLGHOSTED            := NVL(RL_T100.FLGHOSTED,0);
        REC_XOUT_T100.FLGCONFIRMED         := NVL(RL_T100.FLGCONFIRMED,0);
        REC_XOUT_T100.CODWHS               := RL_T100.CODWHS;
        REC_XOUT_T100.CODWHSDELIV          := RL_T100.CODWHSDELIV;
        REC_XOUT_T100.CODSHIPPER           := RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP            := RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN            := RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE             := NVL(RL_T100.DTEPRICE, TO_DATE('12/30/1899','MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPSALE           := RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO        := NVL(RL_T100.FLGCHECKPROMO,0);
        REC_XOUT_T100.CODAGREETYPE         := RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN         := RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV := NVL(RL_T100.DISCOUNTAMOUNTOUTINV,0);
        REC_XOUT_T100.CODTYPORDCUST        := RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3              := RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO           := RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN               := RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2            := NVL(RL_T100.FLGUMORD2,0);
        REC_XOUT_T100.NETAMOUNTTEO         := NVL(RL_T100.NETAMOUNTTEO,0);
        REC_XOUT_T100.NETAMOUNTMIN         := NVL(RL_T100.NETAMOUNTMIN,0);
        REC_XOUT_T100.NETAMOUNTMAX         := NVL(RL_T100.NETAMOUNTMAX,0);
        REC_XOUT_T100.CODUSR4              := RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2              := RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI          := RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI        := RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI      := RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI         := RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6              := RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV               := RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC          := RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN              := RL_T100.CODIBAN;
        REC_XOUT_T100.BACKAMOUNT           := NVL(RL_T100.BACKAMOUNT,0);
        REC_XOUT_T100.TOTPALLETS           := RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT          := RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC                := RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV         := RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.CODUSR5              := RL_T100.CODUSR5;
        REC_XOUT_T100.IDSURVEY             := RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE          := RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI      := NVL(RL_T100.FLGPROCESSEDEDI,0);
        REC_XOUT_T100.FLGEDI               := NVL(RL_T100.FLGEDI,0);
        REC_XOUT_T100.NUMESENZIONE         := RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2            := RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3            := RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4            := RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5            := RL_T100.DTEDELIV5;
        REC_XOUT_T100.IDROUTE              := RL_T100.IDROUTE;
        REC_XOUT_T100.NUMDOC               := RL_T100.NUMDOC;
        REC_XOUT_T100.DTECLOSE             := RL_T100.DTECLOSE;
        REC_XOUT_T100.RETURNAMOUNT         := RL_T100.RETURNAMOUNT;
        REC_XOUT_T100.GPSVALLATITUDE       := RL_T100.GPSVALLATITUDE;
        REC_XOUT_T100.GPSVALLONGITUDE      := RL_T100.GPSVALLONGITUDE;
        REC_XOUT_T100.DTENEW               := RL_T100.DTENEW;
        REC_XOUT_T100.CALCULATEDSPENTTIME  := RL_T100.CALCULATEDSPENTTIME;
        REC_XOUT_T100.CODPRINCIPALUSR      := RL_T100.CODPRINCIPALUSR;
        REC_XOUT_T100.Z_FLGPICKINGDONE     := RL_T100.Z_FLGPICKINGDONE;
        REC_XOUT_T100.Z_FLGCREATEBACKORDER := RL_T100.Z_FLGCREATEBACKORDER;
        REC_XOUT_T100.Z_NUMFIRSTORDER      := RL_T100.Z_NUMFIRSTORDER;
        REC_XOUT_T100.DTECRE               := RL_T100.DTECRE;
        REC_XOUT_T100.SM1_CODPROCESS       := PI_PROGR_H;
        REC_XOUT_T100.SM1_STATUS           := RL_T100.SM1_STATUS;
        REC_XOUT_T100.SM1_DTEPROCESS       := XSYSDATE;
        REC_XOUT_T100.ERP_DOCREFERENCE     := RL_T100.ERP_DOCREFERENCE;
        REC_XOUT_T100.IDDAY                := RL_T100.IDDAY;
        REC_XOUT_T100.CODLOCATION          := RL_T100.CODLOCATION;
        REC_XOUT_T100.FLGPROCESSEDASSET    := NVL(RL_T100.FLGPROCESSEDASSET,0);
        REC_XOUT_T100.CODADDR              := RL_T100.CODADDR;
        -- Field is mandatory in XOUT_T100ORDHEAD_LOG
        REC_XOUT_T100.MOVED                := 0;

        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
      
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T100,
                                         SQLCODE,
                                         VL_MESSAGE_H);
      END; -- HEAD T100
    
      BEGIN
        
        IF (VL_STATUS = 0) THEN

          VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
          DElETE XOUT_T106ORDROW
           WHERE NUMORD = RL_T100.NUMORD
             AND CODUSR = RL_T100.CODUSR
             AND ERP_DTEPROCESS IS NULL;
        
          FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP
          
            VL_MESSAGE_H := 'Ord Row ' || RL_T106.NUMORD || '/' || RL_T106.CODUSR || '/' || RL_T106.NUMROW;
          
            VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
            REC_XOUT_T106.CODUSR               := RL_T106.CODUSR;
            REC_XOUT_T106.NUMORD               := RL_T106.NUMORD;
            REC_XOUT_T106.NUMROW               := RL_T106.NUMROW;
            REC_XOUT_T106.CODART               := GET_PRODUCT_CODE(RL_T106.CODDIV , RL_T106.CODART);
            REC_XOUT_T106.CODDIV               := RL_T106.CODDIV;
            REC_XOUT_T106.UMORD                := RL_T106.UMORD;
            REC_XOUT_T106.DESART               := RL_T106.PRODUCTDES;
            REC_XOUT_T106.QTYORD               := RL_T106.QTYORD;
            REC_XOUT_T106.QTYBCKORD            := NVL(RL_T106.QTYBCKORD,0);
            REC_XOUT_T106.QTYANN               := RL_T106.QTYANN;
            REC_XOUT_T106.QTYDEL               := RL_T106.QTYDEL;
            REC_XOUT_T106.UMINV                := RL_T106.UMINV;
            REC_XOUT_T106.QTYINV               := RL_T106.QTYINV;
            REC_XOUT_T106.CODTYPROW            := RL_T106.CODTYPROW;
            REC_XOUT_T106.CODLIST              := RL_T106.CODLIST;
            REC_XOUT_T106.DTEDELIV             := RL_T106.DTEDELIV;
            REC_XOUT_T106.DTEPROPDELIV         := RL_T106.DTEPROPDELIV;
            REC_XOUT_T106.CODSTATUS            := NVL(RL_T106.CODSTATUS,1);
            REC_XOUT_T106.CODSHIPPER           := RL_T106.CODSHIPPER;
            REC_XOUT_T106.NUMDOCREF            := RL_T106.NUMDOCREF;
            REC_XOUT_T106.DTEDOCREF            := RL_T106.DTEDOCREF;
            REC_XOUT_T106.GROSSAMOUNT          := RL_T106.GROSSAMOUNT;
            REC_XOUT_T106.NUMINV               := RL_T106.NUMINV;
            REC_XOUT_T106.NETAMOUNT            := RL_T106.NETAMOUNT;
            REC_XOUT_T106.DTEINV               := RL_T106.DTEINV;
            REC_XOUT_T106.TAXAMOUNT            := RL_T106.TAXAMOUNT;
            REC_XOUT_T106.VATAMOUNT            := RL_T106.VATAMOUNT;
            REC_XOUT_T106.INCREASEAMOUNT       := RL_T106.INCREASEAMOUNT;
            REC_XOUT_T106.DISCOUNTAMOUNT       := RL_T106.DISCOUNTAMOUNT;
            REC_XOUT_T106.GIFTAMOUNT           := RL_T106.GIFTAMOUNT;
            REC_XOUT_T106.ENDUSERPRICE         := RL_T106.ENDUSERPRICE;
            REC_XOUT_T106.CODAZCAPP            := RL_T106.CODAZCAPP;
            REC_XOUT_T106.FLGEFFBCKORD         := RL_T106.FLGEFFBCKORD;
            REC_XOUT_T106.CODBCKORDCAUSE       := RL_T106.CODBCKORDCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNT       := RL_T106.GROSSARTAMOUNT;
            REC_XOUT_T106.NETARTAMOUNT         := RL_T106.NETARTAMOUNT;
            REC_XOUT_T106.CODSRC               := RL_T106.CODSRC;
            REC_XOUT_T106.CODSRCREF            := RL_T106.CODSRCREF;
            REC_XOUT_T106.CODBENCAUSE          := RL_T106.CODBENCAUSE;
            REC_XOUT_T106.CODBENSUBCAUSE       := RL_T106.CODBENSUBCAUSE;
            REC_XOUT_T106.BENNOTE              := RL_T106.BENNOTE;
            REC_XOUT_T106.AZCTOAPPLY           := RL_T106.AZCTOAPPLY;
            REC_XOUT_T106.CODOPERATION         := RL_T106.CODOPERATION;
            REC_XOUT_T106.DISCOUNTAMOUNTOUTINV := RL_T106.DISCOUNTAMOUNTOUTINV;
            REC_XOUT_T106.CODACCAPP            := RL_T106.CODACCAPP;
            REC_XOUT_T106.CODTYPROWCAUSE       := RL_T106.CODTYPROWCAUSE;
            REC_XOUT_T106.CODARTCUST           := RL_T106.CODARTCUST;
            REC_XOUT_T106.QTYRESO              := RL_T106.QTYRESO;
            REC_XOUT_T106.NUMORDRESO           := RL_T106.NUMORDRESO;
            REC_XOUT_T106.CODBLCCAUSE          := RL_T106.CODBLCCAUSE;
            REC_XOUT_T106.CODARTKITREF         := RL_T106.CODARTKITREF;
            REC_XOUT_T106.NUMROWKITREF         := RL_T106.NUMROWKITREF;
            REC_XOUT_T106.CODCAUSEKIT          := RL_T106.CODCAUSEKIT;
            REC_XOUT_T106.NETARTAMOUNTTEO      := RL_T106.NETARTAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTTEO         := RL_T106.NETAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTMIN         := RL_T106.NETAMOUNTMIN;
            REC_XOUT_T106.NETAMOUNTMAX         := RL_T106.NETAMOUNTMAX;
            REC_XOUT_T106.NETDIFF              := RL_T106.NETDIFF;
            REC_XOUT_T106.COD_ABBINAMENTO_KIT  := RL_T106.COD_ABBINAMENTO_KIT;
            REC_XOUT_T106.NUMROWORIG           := RL_T106.NUMROWORIG;
            REC_XOUT_T106.FLGFIRSTSON          := RL_T106.FLGFIRSTSON;
            REC_XOUT_T106.NETARTAMOUNTCUST     := RL_T106.NETARTAMOUNTCUST;
            REC_XOUT_T106.NETARTAMOUNTCUST2    := RL_T106.NETARTAMOUNTCUST2;
            REC_XOUT_T106.GROSSARTAMOUNTCUST   := RL_T106.GROSSARTAMOUNTCUST;
            REC_XOUT_T106.NETAMOUNTCUST        := RL_T106.NETAMOUNTCUST;
            REC_XOUT_T106.QTYORDEDI            := RL_T106.QTYORDEDI;
            REC_XOUT_T106.CODEAN               := RL_T106.CODEAN;
            REC_XOUT_T106.UMORDEDI             := RL_T106.UMORDEDI;
            REC_XOUT_T106.NUMROWREF            := RL_T106.NUMROWREF;
            REC_XOUT_T106.FLGOMGPROMO          := RL_T106.FLGOMGPROMO;
            REC_XOUT_T106.GROSSARTAMOUNTORD    := RL_T106.GROSSARTAMOUNTORD;
            REC_XOUT_T106.GROSSARTAMOUNTDELTA  := RL_T106.GROSSARTAMOUNTDELTA;
            REC_XOUT_T106.FLGOMGDISCLIST       := RL_T106.FLGOMGDISCLIST;
            REC_XOUT_T106.CODCNVPDA            := RL_T106.CODCNVPDA;
            REC_XOUT_T106.DTEEVA               := RL_T106.DTEEVA;
            REC_XOUT_T106.CODPAYTRM            := RL_T106.CODPAYTRM;
            REC_XOUT_T106.CODPAYMOD            := RL_T106.CODPAYMOD;
            REC_XOUT_T106.NUMORDHOST           := NULL;
            REC_XOUT_T106.NUMROWHOST           := NULL;
            REC_XOUT_T106.CODMODSHIP           := RL_T106.CODMODSHIP;
            REC_XOUT_T106.CODMODDELIV          := RL_T106.CODMODDELIV;
            REC_XOUT_T106.CODWHS               := RL_T106.CODWHS;
            -- REC_XOUT_T106.CODWHSDELIV          := RL_T106.CODWHSDELIV; Spool file considers data from header T100 table
            REC_XOUT_T106.DTEPRICE             := RL_T106.DTEPRICE;
            REC_XOUT_T106.DTEDELIVTO           := RL_T106.DTEDELIVTO;
            REC_XOUT_T106.CODROWGROUP          := RL_T106.CODROWGROUP;
            REC_XOUT_T106.NETAMOUNTGIFT        := RL_T106.NETAMOUNTGIFT;
            REC_XOUT_T106.NETARTAMOUNTEDI      := RL_T106.NETARTAMOUNTEDI;
            REC_XOUT_T106.GROSSARTAMOUNTEDI    := RL_T106.GROSSARTAMOUNTEDI;
            REC_XOUT_T106.QTYORDORIG           := RL_T106.QTYORDORIG;
            REC_XOUT_T106.QTYALLOCATED         := RL_T106.QTYALLOCATED;
            REC_XOUT_T106.RETURNAMOUNT         := RL_T106.RETURNAMOUNT;
            REC_XOUT_T106.NETARTAMOUNTUMORD    := RL_T106.NETARTAMOUNTUMORD;
            REC_XOUT_T106.CODQTYMODCAUSE       := RL_T106.CODQTYMODCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNTUMORD  := RL_T106.GROSSARTAMOUNTUMORD;
            REC_XOUT_T106.Z_DTEXPIRE           := RL_T106.Z_DTEXPIRE;
            -- REC_XOUT_T106.DTECRE            := RL_T106.DTECRE; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_CODPROCESS       := REC_XOUT_T100.SM1_CODPROCESS;
            -- REC_XOUT_T106.SM1_STATUS        := RL_T106.SM1_STATUS; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_DTEPROCESS       := REC_XOUT_T100.SM1_DTEPROCESS;
            -- REC_XOUT_T106.ERP_DOCREFERENCE  := RL_T106.ERP_DOCREFERENCE; Spool file considers data from header T100 table

            INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;
          
            VL_INS_T106 := VL_INS_T106 + 1;
            VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
            
          END LOOP;
          VL_COUNT_XOUT_T106   := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
          VL_COUNT_XOUT_T106_P := 0;
        
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T106,
                                         SQLCODE,
                                         VL_MESSAGE_H);
        
      END;
    
      IF (VL_STATUS = 0) THEN
        
        VL_INS_T100 := VL_INS_T100 + 1;
        UPDATE T100ORDHEAD
           SET CODTYPORDCUST = NUMORD,
               DTELCK        = NULL,
               IDSESSIONLCK  = NULL,
               CODUSRLCK     = NULL,
               NUMORDCUST    = TRIM(NUMORD) || TRIM(CODUSR),
               DTETOHOST     = XSYSDATE
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      ELSE
        
        ROLLBACK;
        UPDATE T100ORDHEAD
           SET DTELCK       = NULL,
               IDSESSIONLCK = NULL,
               CODUSRLCK    = NULL
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      END IF;
    
    END LOOP;
    COMMIT;

    -- Close Logs
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T106,
                             0,
                             VL_COUNT_XOUT_T106,
                             VL_INS_T106,
                             VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T100,
                             0,
                             VL_COUNT_XOUT_T100,
                             VL_INS_T100,
                             VL_COUNT_XOUT_T100 - VL_INS_T100);

    PO_MSG    := VL_INS_T100 || ' Orders Exported';
    PO_STATUS := VL_INS_T100;

  EXCEPTION
    WHEN EX_EXIT THEN
    
      ROLLBACK;
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := -1;
    
    WHEN OTHERS THEN
    
      ROLLBACK;
      UPDATE T100ORDHEAD
         SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
       WHERE CODUSRLCK = C_SYSUSR
         AND IDSESSIONLCK = PI_SESSION_ID;
      COMMIT;
         
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
      
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := VL_STATUS;
    
  END EXP_T10X_VANREQUEST_SYG_51;
  
  /*============================================================================*\
  /* 
     Name : EXP_T10X_ORDERS_SYG
     Exports SM1 tables :
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail

      Staging Area (SSA) tables :
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic :
      •  Exports pre sales order header and rows for division SYG
      •  Exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  Deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

      Error handling :
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  Error on record, header and all details are discarded

      Input parameters :     PI_PROGR_H:           unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID:        unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                             PI_MASSIVE_EXP_DATE:  NULL - normal export NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                             PI_CODE_CHAR_A:       division
  */
  /*============================================================================ */
  PROCEDURE EXP_T10X_ORDERS_SYG(PI_PROGR_H          IN NUMBER,
                                PI_SESSION_ID       IN NUMBER,
                                PI_DOCUMENTKEY      IN VARCHAR2,
                                PI_MASSIVE_EXP_DATE IN DATE,
                                PI_CODDIV           IN VARCHAR2,
                                PO_MSG              OUT VARCHAR,
                                PO_STATUS           OUT NUMBER) IS
    -- Cursor on main Order table
    CURSOR CL_T100 IS
      SELECT T.*, UD.Codwhsdeliv
        FROM T100ORDHEAD T
        
       INNER JOIN T031USERDIV UD
          On T.CODEUSR = UD.CODUSR
         And T.CODDIV = UD.CODDIV
      
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK = PI_SESSION_ID
       ORDER BY T.NUMORD, t.CODUSR ASC;
       
    -- Rows
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT T106.*,
             T060.DESART || '/' || T060.DESART2 PRODUCTDES
        FROM T106ORDROW T106
        
        JOIN T060ARTICLE T060
          ON T060.CODART = T106.CODART
         AND T060.CODDIV = T106.CODDIV
        
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR;
         
    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM ZQEXP_T100_PRICEDELIVERY_SYG_C
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK != PI_SESSION_ID
         AND DOCUMENTKEY = NVL(PI_DOCUMENTKEY, DOCUMENTKEY)
       ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106      NUMBER := 0;
    VL_COUNT_XOUT_T106   NUMBER := 0;
    VL_COUNT_XOUT_T106_P NUMBER := 0;
    VL_INS_T106          NUMBER := 0;

    REC_XOUT_T100 XOUT_T100ORDHEAD%ROWTYPE := NULL;
    REC_XOUT_T106 XOUT_T106ORDROW%ROWTYPE := NULL;

    VL_STATUS NUMBER := 0;
    VL_STEP   NUMBER := 0; -- Used to ping t035
    --
    EX_EXIT EXCEPTION;
    --
  BEGIN

    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER HEAD',
                                                'EXPORT --> PRESALES ORDER HEAD (SYG)',
                                                0,
                                                NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ROWS',
                                                'EXPORT --> PRESALES ORDER DETAIL (SYG)',
                                                0,
                                                NULL);
    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);

    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED
    -- --------------------------------------------------------------
    BEGIN
    
      VL_MESSAGE_D := 'T100ORDHEAD';
      UPDATE T100ORDHEAD T
         SET T.IDSESSIONLCK = PI_SESSION_ID,
             T.CODUSRLCK    = C_SYSUSR,
             T.DTELCK       = XSYSDATE
       WHERE t.DOCUMENTKEY = nvl(PI_DOCUMENTKEY, T.DOCUMENTKEY)
         AND T.CODDIV = nvl(PI_CODDIV, T.coddiv)
         AND (T.NUMORD, T.CODUSR, T.CODDIV) IN
             (SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100_PRICEDELIVERY_SYG_C Q
               WHERE Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE, Q.DTEMOD));
      VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VL_MESSAGE_H := 'Error while Locking: ' || VL_MESSAGE_D;
        RAISE EX_EXIT;
    END;

    -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
    
      VL_MESSAGE_H := 'Unable to Export ' || VL_MESSAGE_D || '.Numord=' ||
                      R_LOCKED.NUMORD || 'Codusr = ' || R_LOCKED.CODUSR ||
                      ' Record locked by user ' || R_LOCKED.CODUSRLCK ||
                      ' since ' ||
                      to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);
    
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
    END LOOP;

    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF (MOD(VL_STEP, 1000) = 0) THEN
        PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
    
      VL_STATUS    := 0;
      VL_MESSAGE_H := 'Order: ' || RL_T100.NUMORD || '/' || RL_T100.CODUSR;
    
      BEGIN
      
        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD
         WHERE NUMORD = RL_T100.NUMORD
           AND CODUSR = RL_T100.CODUSR
           AND ERP_DTEPROCESS IS NULL;
      
        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        REC_XOUT_T100.NUMORD               := RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR               := RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR              := RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD            := RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS            := RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV               := RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE          := RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD               := RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV             := RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV          := RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA               := RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM            := RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD            := RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV         := RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT           := RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV           := RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST              := RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR               := RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF            := RL_T100.NUMORD;
        REC_XOUT_T100.NUMORDHOST           := NULL;
        REC_XOUT_T100.NUMORDCUST           := TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);
        REC_XOUT_T100.DTEORDCUST           := RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT        := RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS           := RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP           := RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV          := RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT         := NVL(RL_T100.CODAGREEMENT,0);
        REC_XOUT_T100.DESAGREEMENT         := RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT            := RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS        := RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT               := NVL(RL_T100.DTEAUT, TO_DATE('12/30/1899','MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPAUT            := RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT               := RL_T100.DESAUT;
        REC_XOUT_T100.GROSSAMOUNT          := RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT            := RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT            := NVL(RL_T100.TAXAMOUNT,0);
        REC_XOUT_T100.VATAMOUNT            := RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT       := NVL(RL_T100.INCREASEAMOUNT,0);
        REC_XOUT_T100.DISCOUNTAMOUNT       := NVL(RL_T100.DISCOUNTAMOUNT,0);
        REC_XOUT_T100.GIFTAMOUNT           := NVL(RL_T100.GIFTAMOUNT,0);
        REC_XOUT_T100.CODUSRMOD            := RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN               := RL_T100.FLGANN;
        REC_XOUT_T100.CODABI               := RL_T100.CODABI;
        REC_XOUT_T100.CODCAB               := RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN               := RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA               := RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR              := RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC               := RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV               := RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT               := RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV               := RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT             := RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT           := RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN            := NVL(RL_T100.FLGRETURN,0);
        REC_XOUT_T100.FLGHOSTED            := NVL(RL_T100.FLGHOSTED,0);
        REC_XOUT_T100.FLGCONFIRMED         := NVL(RL_T100.FLGCONFIRMED,0);
        REC_XOUT_T100.CODWHS               := RL_T100.CODWHS;
        --REC_XOUT_T100.CODWHSDELIV          := RL_T100.CODWHSDELIV;
        REC_XOUT_T100.CODSHIPPER           := NVL(RL_T100.CODSHIPPER,'0001');
        REC_XOUT_T100.CODAZCAPP            := RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN            := RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE             := NVL(RL_T100.DTEPRICE, TO_DATE('12/30/1899','MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPSALE           := RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO        := NVL(RL_T100.FLGCHECKPROMO,0);
        REC_XOUT_T100.CODAGREETYPE         := RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN         := RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV := NVL(RL_T100.DISCOUNTAMOUNTOUTINV,0);
        REC_XOUT_T100.CODTYPORDCUST        := RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3              := RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO           := RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN               := RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2            := NVL(RL_T100.FLGUMORD2,0);
        REC_XOUT_T100.NETAMOUNTTEO         := NVL(RL_T100.NETAMOUNTTEO,0);
        REC_XOUT_T100.NETAMOUNTMIN         := NVL(RL_T100.NETAMOUNTMIN,0);
        REC_XOUT_T100.NETAMOUNTMAX         := NVL(RL_T100.NETAMOUNTMAX,0);
        REC_XOUT_T100.CODUSR4              := RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2              := RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI          := RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI        := RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI      := RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI         := RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6              := RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV               := RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC          := RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN              := RL_T100.CODIBAN;
        REC_XOUT_T100.BACKAMOUNT           := NVL(RL_T100.BACKAMOUNT,0);
        REC_XOUT_T100.TOTPALLETS           := RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT          := RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC                := RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV         := RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.CODUSR5              := RL_T100.CODUSR5;
        REC_XOUT_T100.IDSURVEY             := RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE          := RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI      := NVL(RL_T100.FLGPROCESSEDEDI,0);
        REC_XOUT_T100.FLGEDI               := NVL(RL_T100.FLGEDI,0);
        REC_XOUT_T100.NUMESENZIONE         := RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2            := RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3            := RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4            := RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5            := RL_T100.DTEDELIV5;
        REC_XOUT_T100.IDROUTE              := RL_T100.IDROUTE;
        REC_XOUT_T100.NUMDOC               := RL_T100.NUMDOC;
        REC_XOUT_T100.DTECLOSE             := RL_T100.DTECLOSE;
        REC_XOUT_T100.RETURNAMOUNT         := RL_T100.RETURNAMOUNT;
        REC_XOUT_T100.GPSVALLATITUDE       := RL_T100.GPSVALLATITUDE;
        REC_XOUT_T100.GPSVALLONGITUDE      := RL_T100.GPSVALLONGITUDE;
        REC_XOUT_T100.DTENEW               := RL_T100.DTENEW;
        REC_XOUT_T100.CALCULATEDSPENTTIME  := RL_T100.CALCULATEDSPENTTIME;
        REC_XOUT_T100.CODPRINCIPALUSR      := RL_T100.CODPRINCIPALUSR;
        REC_XOUT_T100.Z_FLGPICKINGDONE     := RL_T100.Z_FLGPICKINGDONE;
        REC_XOUT_T100.Z_FLGCREATEBACKORDER := NVL(RL_T100.Z_FLGCREATEBACKORDER,0);
        REC_XOUT_T100.Z_NUMFIRSTORDER      := RL_T100.Z_NUMFIRSTORDER;
        REC_XOUT_T100.DTECRE               := RL_T100.DTECRE;
        REC_XOUT_T100.SM1_CODPROCESS       := PI_PROGR_H;
        REC_XOUT_T100.SM1_STATUS           := RL_T100.SM1_STATUS;
        REC_XOUT_T100.SM1_DTEPROCESS       := XSYSDATE;
        REC_XOUT_T100.ERP_DOCREFERENCE     := RL_T100.ERP_DOCREFERENCE;
        REC_XOUT_T100.IDDAY                := RL_T100.IDDAY;
        REC_XOUT_T100.CODLOCATION          := RL_T100.CODLOCATION;
        REC_XOUT_T100.FLGPROCESSEDASSET    := NVL(RL_T100.FLGPROCESSEDASSET,0);
        REC_XOUT_T100.CODADDR              := RL_T100.CODADDR;
        REC_XOUT_T100.Z_FLG_KD_ORD         := '0';
        -- Field is mandatory in XOUT_T100ORDHEAD_LOG
        REC_XOUT_T100.MOVED                := 0; 
      
        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
      
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T100,
                                         SQLCODE,
                                         VL_MESSAGE_H);
      END;
    
      BEGIN
      
        IF (VL_STATUS = 0) THEN
        
          VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
          DElETE XOUT_T106ORDROW
           WHERE NUMORD = RL_T100.NUMORD
             AND CODUSR = RL_T100.CODUSR
             AND ERP_DTEPROCESS IS NULL;
        
          FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP
          
            VL_MESSAGE_H := 'Ord Row ' || RL_T106.NUMORD || '/' ||
                            RL_T106.CODUSR || '/' || RL_T106.NUMROW;
          
            VL_MESSAGE_D                       := 'Insert  XOUT_T106ORDROW ';
            REC_XOUT_T106.CODUSR               := RL_T106.CODUSR;
            REC_XOUT_T106.NUMORD               := RL_T106.NUMORD;
            REC_XOUT_T106.NUMROW               := RL_T106.NUMROW;
            REC_XOUT_T106.CODART               := GET_PRODUCT_CODE(RL_T106.CODDIV , RL_T106.CODART);
            REC_XOUT_T106.CODDIV               := RL_T106.CODDIV;
            REC_XOUT_T106.UMORD                := RL_T106.UMORD;
            REC_XOUT_T106.DESART               := RL_T106.PRODUCTDES;
            REC_XOUT_T106.QTYORD               := RL_T106.QTYORD;
            REC_XOUT_T106.QTYBCKORD            := NVL(RL_T106.QTYBCKORD,0);
            REC_XOUT_T106.QTYANN               := RL_T106.QTYANN;
            REC_XOUT_T106.QTYDEL               := RL_T106.QTYDEL;
            REC_XOUT_T106.UMINV                := RL_T106.UMINV;
            REC_XOUT_T106.QTYINV               := RL_T106.QTYINV;
            REC_XOUT_T106.CODTYPROW            := RL_T106.CODTYPROW;
            REC_XOUT_T106.CODLIST              := RL_T106.CODLIST;
            REC_XOUT_T106.DTEDELIV             := RL_T106.DTEDELIV;
            REC_XOUT_T106.DTEPROPDELIV         := RL_T106.DTEPROPDELIV;
            REC_XOUT_T106.CODSTATUS            := NVL(RL_T106.CODSTATUS,1);
            REC_XOUT_T106.CODSHIPPER           := RL_T106.CODSHIPPER;
            REC_XOUT_T106.NUMDOCREF            := RL_T106.NUMDOCREF;
            REC_XOUT_T106.DTEDOCREF            := RL_T106.DTEDOCREF;
            REC_XOUT_T106.GROSSAMOUNT          := RL_T106.GROSSAMOUNT;
            REC_XOUT_T106.NUMINV               := RL_T106.NUMINV;
            REC_XOUT_T106.NETAMOUNT            := RL_T106.NETAMOUNT;
            REC_XOUT_T106.DTEINV               := RL_T106.DTEINV;
            REC_XOUT_T106.TAXAMOUNT            := RL_T106.TAXAMOUNT;
            REC_XOUT_T106.VATAMOUNT            := RL_T106.VATAMOUNT;
            REC_XOUT_T106.INCREASEAMOUNT       := RL_T106.INCREASEAMOUNT;
            REC_XOUT_T106.DISCOUNTAMOUNT       := RL_T106.DISCOUNTAMOUNT;
            REC_XOUT_T106.GIFTAMOUNT           := RL_T106.GIFTAMOUNT;
            REC_XOUT_T106.ENDUSERPRICE         := RL_T106.ENDUSERPRICE;
            REC_XOUT_T106.CODAZCAPP            := RL_T106.CODAZCAPP;
            REC_XOUT_T106.FLGEFFBCKORD         := RL_T106.FLGEFFBCKORD;
            REC_XOUT_T106.CODBCKORDCAUSE       := RL_T106.CODBCKORDCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNT       := RL_T106.GROSSARTAMOUNT;
            REC_XOUT_T106.NETARTAMOUNT         := RL_T106.NETARTAMOUNT;
            REC_XOUT_T106.CODSRC               := RL_T106.CODSRC;
            REC_XOUT_T106.CODSRCREF            := RL_T106.CODSRCREF;
            REC_XOUT_T106.CODBENCAUSE          := RL_T106.CODBENCAUSE;
            REC_XOUT_T106.CODBENSUBCAUSE       := RL_T106.CODBENSUBCAUSE;
            REC_XOUT_T106.BENNOTE              := RL_T106.BENNOTE;
            REC_XOUT_T106.AZCTOAPPLY           := RL_T106.AZCTOAPPLY;
            REC_XOUT_T106.CODOPERATION         := RL_T106.CODOPERATION;
            REC_XOUT_T106.DISCOUNTAMOUNTOUTINV := RL_T106.DISCOUNTAMOUNTOUTINV;
            REC_XOUT_T106.CODACCAPP            := RL_T106.CODACCAPP;
            REC_XOUT_T106.CODTYPROWCAUSE       := RL_T106.CODTYPROWCAUSE;
            REC_XOUT_T106.CODARTCUST           := RL_T106.CODARTCUST;
            REC_XOUT_T106.QTYRESO              := RL_T106.QTYRESO;
            REC_XOUT_T106.NUMORDRESO           := RL_T106.NUMORDRESO;
            REC_XOUT_T106.CODBLCCAUSE          := RL_T106.CODBLCCAUSE;
            REC_XOUT_T106.CODARTKITREF         := RL_T106.CODARTKITREF;
            REC_XOUT_T106.NUMROWKITREF         := RL_T106.NUMROWKITREF;
            REC_XOUT_T106.CODCAUSEKIT          := RL_T106.CODCAUSEKIT;
            REC_XOUT_T106.NETARTAMOUNTTEO      := RL_T106.NETARTAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTTEO         := RL_T106.NETAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTMIN         := RL_T106.NETAMOUNTMIN;
            REC_XOUT_T106.NETAMOUNTMAX         := RL_T106.NETAMOUNTMAX;
            REC_XOUT_T106.NETDIFF              := RL_T106.NETDIFF;
            REC_XOUT_T106.COD_ABBINAMENTO_KIT  := RL_T106.COD_ABBINAMENTO_KIT;
            REC_XOUT_T106.NUMROWORIG           := RL_T106.NUMROWORIG;
            REC_XOUT_T106.FLGFIRSTSON          := RL_T106.FLGFIRSTSON;
            REC_XOUT_T106.NETARTAMOUNTCUST     := RL_T106.NETARTAMOUNTCUST;
            REC_XOUT_T106.NETARTAMOUNTCUST2    := RL_T106.NETARTAMOUNTCUST2;
            REC_XOUT_T106.GROSSARTAMOUNTCUST   := RL_T106.GROSSARTAMOUNTCUST;
            REC_XOUT_T106.NETAMOUNTCUST        := RL_T106.NETAMOUNTCUST;
            REC_XOUT_T106.QTYORDEDI            := RL_T106.QTYORDEDI;
            REC_XOUT_T106.CODEAN               := RL_T106.CODEAN;
            REC_XOUT_T106.UMORDEDI             := RL_T106.UMORDEDI;
            REC_XOUT_T106.NUMROWREF            := RL_T106.NUMROWREF;
            REC_XOUT_T106.FLGOMGPROMO          := RL_T106.FLGOMGPROMO;
            REC_XOUT_T106.GROSSARTAMOUNTORD    := RL_T106.GROSSARTAMOUNTORD;
            REC_XOUT_T106.GROSSARTAMOUNTDELTA  := RL_T106.GROSSARTAMOUNTDELTA;
            REC_XOUT_T106.FLGOMGDISCLIST       := RL_T106.FLGOMGDISCLIST;
            REC_XOUT_T106.CODCNVPDA            := RL_T106.CODCNVPDA;
            REC_XOUT_T106.DTEEVA               := RL_T106.DTEEVA;
            REC_XOUT_T106.CODPAYTRM            := RL_T106.CODPAYTRM;
            REC_XOUT_T106.CODPAYMOD            := RL_T106.CODPAYMOD;
            REC_XOUT_T106.NUMORDHOST           := NULL;
            REC_XOUT_T106.NUMROWHOST           := NULL;
            REC_XOUT_T106.CODMODSHIP           := RL_T106.CODMODSHIP;
            REC_XOUT_T106.CODMODDELIV          := RL_T106.CODMODDELIV;
            REC_XOUT_T106.CODWHS               := RL_T106.CODWHS;
            -- REC_XOUT_T106.CODWHSDELIV          := RL_T106.CODWHSDELIV; Spool file considers data from header T100 table
            REC_XOUT_T106.DTEPRICE             := RL_T106.DTEPRICE;
            REC_XOUT_T106.DTEDELIVTO           := RL_T106.DTEDELIVTO;
            REC_XOUT_T106.CODROWGROUP          := RL_T106.CODROWGROUP;
            REC_XOUT_T106.NETAMOUNTGIFT        := RL_T106.NETAMOUNTGIFT;
            REC_XOUT_T106.NETARTAMOUNTEDI      := RL_T106.NETARTAMOUNTEDI;
            REC_XOUT_T106.GROSSARTAMOUNTEDI    := RL_T106.GROSSARTAMOUNTEDI;
            REC_XOUT_T106.QTYORDORIG           := RL_T106.QTYORDORIG;
            REC_XOUT_T106.QTYALLOCATED         := RL_T106.QTYALLOCATED;
            REC_XOUT_T106.RETURNAMOUNT         := RL_T106.RETURNAMOUNT;
            REC_XOUT_T106.NETARTAMOUNTUMORD    := RL_T106.NETARTAMOUNTUMORD;
            REC_XOUT_T106.CODQTYMODCAUSE       := RL_T106.CODQTYMODCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNTUMORD  := RL_T106.GROSSARTAMOUNTUMORD;
            REC_XOUT_T106.Z_DTEXPIRE           := RL_T106.Z_DTEXPIRE;
            -- REC_XOUT_T106.DTECRE            := RL_T106.DTECRE; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_CODPROCESS       := REC_XOUT_T100.SM1_CODPROCESS;
            -- REC_XOUT_T106.SM1_STATUS        := RL_T106.SM1_STATUS; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_DTEPROCESS       := REC_XOUT_T100.SM1_DTEPROCESS;
            -- REC_XOUT_T106.ERP_DOCREFERENCE  := RL_T106.ERP_DOCREFERENCE; Spool file considers data from header T100 table
          
            INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;
          
            VL_INS_T106          := VL_INS_T106 + 1;
            VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
          
          END LOOP;
          VL_COUNT_XOUT_T106   := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
          VL_COUNT_XOUT_T106_P := 0;
        
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T106,
                                         SQLCODE,
                                         VL_MESSAGE_H);
        
      END;
    
      IF VL_STATUS = 0 THEN
      
        VL_INS_T100 := VL_INS_T100 + 1;
        UPDATE T100ORDHEAD
           SET DTELCK       = NULL,
               IDSESSIONLCK = NULL,
               CODUSRLCK    = NULL,
               NUMORDCUST   = TRIM(NUMORD) || TRIM(CODUSR),
               DTETOHOST    = XSYSDATE
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      ELSE
      
        ROLLBACK;
        UPDATE T100ORDHEAD
           SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      END IF;
    
    END LOOP;
    COMMIT;

    -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T106,
                             0,
                             VL_COUNT_XOUT_T106,
                             VL_INS_T106,
                             VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T100,
                             0,
                             VL_COUNT_XOUT_T100,
                             VL_INS_T100,
                             VL_COUNT_XOUT_T100 - VL_INS_T100);

    PO_MSG    := VL_INS_T100 || ' Orders Exported';
    PO_STATUS := VL_INS_T100;

  EXCEPTION
    WHEN EX_EXIT THEN
    
      ROLLBACK;
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := -1;
    
    WHEN OTHERS THEN
    
      ROLLBACK;
      UPDATE T100ORDHEAD
         SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
       WHERE CODUSRLCK = C_SYSUSR
         AND IDSESSIONLCK = PI_SESSION_ID;
      COMMIT;
    
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := VL_STATUS;
    
  END EXP_T10X_ORDERS_SYG;

  /*============================================================================*\
  /* 
     Name : EXP_T10X_ORDERS_KD_SYG
     Exports SM1 tables :
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail

      Staging Area (SSA) tables :
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic :
      •  Exports KD order header and rows for division SYG
      •  Exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  Deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

      Error handling :
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  Error on record, header and all details are discarded

      Input parameters :     PI_PROGR_H:           unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID:        unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                             PI_MASSIVE_EXP_DATE:  NULL - normal export NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                             PI_CODE_CHAR_A:       division
  */
  /*============================================================================ */
  PROCEDURE EXP_T10X_ORDERS_KD_SYG(PI_PROGR_H          IN NUMBER,
                                   PI_SESSION_ID       IN NUMBER,
                                   PI_DOCUMENTKEY      IN VARCHAR2,
                                   PI_MASSIVE_EXP_DATE IN DATE,
                                   PI_CODDIV           IN VARCHAR2,
                                   PO_MSG              OUT VARCHAR,
                                   PO_STATUS           OUT NUMBER) IS

    -- Cursor on main Order table
    CURSOR CL_T100 IS
      SELECT T.*, UD.Codwhsdeliv
        FROM T100ORDHEAD T
      
       Inner Join T031USERDIV UD
          On T.CODEUSR = UD.CODUSR
         And T.CODDIV = UD.CODDIV
      
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK = PI_SESSION_ID
       ORDER BY T.NUMORD, t.CODUSR ASC;

    -- Rows
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT T106.*, T060.DESART || '/' || T060.DESART2 PRODUCTDES
        FROM T106ORDROW T106
      
        JOIN T060ARTICLE T060
          ON T060.CODART = T106.CODART
         AND T060.CODDIV = T106.CODDIV
      
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR;

    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM ZQEXP_T100ORDHEAD_KD_SYG_C
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK != PI_SESSION_ID
         and DOCUMENTKEY = NVL(PI_DOCUMENTKEY, DOCUMENTKEY)
         and NVL(DTEMOD, DTECRE) >
             NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
       ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H VARCHAR2(2000) := 'Error while exporting EXP_T10X_ORDERS_KD';
    VL_MESSAGE_D VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106      NUMBER := 0;
    VL_COUNT_XOUT_T106   NUMBER := 0;
    VL_COUNT_XOUT_T106_P NUMBER := 0;
    VL_INS_T106          NUMBER := 0;

    REC_XOUT_T100 XOUT_T100ORDHEAD%ROWTYPE := NULL;
    REC_XOUT_T106 XOUT_T106ORDROW%ROWTYPE := NULL;

    VL_STATUS NUMBER := 0;
    VL_STEP   NUMBER := 0; -- Used to ping t035
    --
    EX_EXIT EXCEPTION;
    --
  BEGIN

    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER HEAD',
                                                'EXPORT --> KD ORDER HEAD (SYG)',
                                                0,
                                                NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ROWS',
                                                'EXPORT --> KD ORDER DETAIL (SYG)',
                                                0,
                                                NULL);

    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
    
      VL_MESSAGE_D := 'T100ORDHEAD';
      UPDATE T100ORDHEAD T
         SET T.IDSESSIONLCK = PI_SESSION_ID,
             T.CODUSRLCK    = C_SYSUSR,
             T.DTELCK       = XSYSDATE
       WHERE t.DOCUMENTKEY = nvl(PI_DOCUMENTKEY, T.DOCUMENTKEY)
         and T.CODDIV = nvl(PI_CODDIV, T.coddiv)
         and (T.NUMORD, T.CODUSR, T.CODDIV) IN
             (SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100ORDHEAD_KD_SYG_C Q
               WHERE Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE, Q.DTEMOD));
      VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VL_MESSAGE_H := 'Error while Locking: ' || VL_MESSAGE_D;
        RAISE EX_EXIT;
    END;

    -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
    
      VL_MESSAGE_H := 'Unable to Export ' || VL_MESSAGE_D || '.Numord=' ||
                      R_LOCKED.NUMORD || 'Codusr = ' || R_LOCKED.CODUSR ||
                      ' Record locked by user ' || R_LOCKED.CODUSRLCK ||
                      ' since ' ||
                      to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);
    
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
    END LOOP;

    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF (MOD(VL_STEP, 1000) = 0) THEN
        PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
    
      VL_STATUS    := 0;
      VL_MESSAGE_H := 'Order: ' || RL_T100.NUMORD || '/' || RL_T100.CODUSR;
    
      BEGIN
      
        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD
         WHERE NUMORD = RL_T100.NUMORD
           AND CODUSR = RL_T100.CODUSR
           AND ERP_DTEPROCESS IS NULL;
      
        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
      
        REC_XOUT_T100.NUMORD               := RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR               := RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR              := RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD            := RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS            := RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV               := RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE          := RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD               := RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV             := RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV          := RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA               := RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM            := RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD            := RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV         := RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT           := RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV           := RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST              := RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR               := RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF            := RL_T100.NUMORD;
        REC_XOUT_T100.NUMORDHOST           := NULL;
        REC_XOUT_T100.NUMORDCUST           := TRIM(RL_T100.NUMORD) ||
                                              TRIM(RL_T100.CODUSR);
        REC_XOUT_T100.DTEORDCUST           := RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT        := RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS           := RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP           := RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV          := RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT         := NVL(RL_T100.CODAGREEMENT, 0);
        REC_XOUT_T100.DESAGREEMENT         := RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT            := RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS        := RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT               := NVL(RL_T100.DTEAUT,
                                                  TO_DATE('12/30/1899',
                                                          'MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPAUT            := RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT               := RL_T100.DESAUT;
        REC_XOUT_T100.GROSSAMOUNT          := RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT            := RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT            := NVL(RL_T100.TAXAMOUNT, 0);
        REC_XOUT_T100.VATAMOUNT            := RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT       := NVL(RL_T100.INCREASEAMOUNT, 0);
        REC_XOUT_T100.DISCOUNTAMOUNT       := NVL(RL_T100.DISCOUNTAMOUNT, 0);
        REC_XOUT_T100.GIFTAMOUNT           := NVL(RL_T100.GIFTAMOUNT, 0);
        REC_XOUT_T100.CODUSRMOD            := RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN               := RL_T100.FLGANN;
        REC_XOUT_T100.CODABI               := RL_T100.CODABI;
        REC_XOUT_T100.CODCAB               := RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN               := RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA               := RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR              := RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC               := RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV               := RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT               := RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV               := RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT             := RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT           := RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN            := NVL(RL_T100.FLGRETURN, 0);
        REC_XOUT_T100.FLGHOSTED            := NVL(RL_T100.FLGHOSTED, 0);
        REC_XOUT_T100.FLGCONFIRMED         := NVL(RL_T100.FLGCONFIRMED, 0);
        REC_XOUT_T100.CODWHS               := RL_T100.CODWHS;
        REC_XOUT_T100.CODWHSDELIV          := RL_T100.CODWHSDELIV;
        REC_XOUT_T100.CODSHIPPER           := RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP            := RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN            := RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE             := NVL(RL_T100.DTEPRICE,
                                                  TO_DATE('12/30/1899',
                                                          'MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPSALE           := RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO        := NVL(RL_T100.FLGCHECKPROMO, 0);
        REC_XOUT_T100.CODAGREETYPE         := RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN         := RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV := NVL(RL_T100.DISCOUNTAMOUNTOUTINV,
                                                  0);
        REC_XOUT_T100.CODTYPORDCUST        := RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3              := RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO           := RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN               := RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2            := NVL(RL_T100.FLGUMORD2, 0);
        REC_XOUT_T100.NETAMOUNTTEO         := NVL(RL_T100.NETAMOUNTTEO, 0);
        REC_XOUT_T100.NETAMOUNTMIN         := NVL(RL_T100.NETAMOUNTMIN, 0);
        REC_XOUT_T100.NETAMOUNTMAX         := NVL(RL_T100.NETAMOUNTMAX, 0);
        REC_XOUT_T100.CODUSR4              := RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2              := RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI          := RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI        := RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI      := RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI         := RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6              := RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV               := RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC          := RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN              := RL_T100.CODIBAN;
        REC_XOUT_T100.BACKAMOUNT           := NVL(RL_T100.BACKAMOUNT, 0);
        REC_XOUT_T100.TOTPALLETS           := RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT          := RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC                := RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV         := RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.CODUSR5              := RL_T100.CODUSR5;
        REC_XOUT_T100.IDSURVEY             := RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE          := RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI      := NVL(RL_T100.FLGPROCESSEDEDI, 0);
        REC_XOUT_T100.FLGEDI               := NVL(RL_T100.FLGEDI, 0);
        REC_XOUT_T100.NUMESENZIONE         := RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2            := RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3            := RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4            := RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5            := RL_T100.DTEDELIV5;
        REC_XOUT_T100.IDROUTE              := RL_T100.IDROUTE;
        REC_XOUT_T100.NUMDOC               := RL_T100.NUMDOC;
        REC_XOUT_T100.DTECLOSE             := RL_T100.DTECLOSE;
        REC_XOUT_T100.RETURNAMOUNT         := RL_T100.RETURNAMOUNT;
        REC_XOUT_T100.GPSVALLATITUDE       := RL_T100.GPSVALLATITUDE;
        REC_XOUT_T100.GPSVALLONGITUDE      := RL_T100.GPSVALLONGITUDE;
        REC_XOUT_T100.DTENEW               := RL_T100.DTENEW;
        REC_XOUT_T100.CALCULATEDSPENTTIME  := RL_T100.CALCULATEDSPENTTIME;
        REC_XOUT_T100.CODPRINCIPALUSR      := RL_T100.CODPRINCIPALUSR;
        REC_XOUT_T100.Z_FLGPICKINGDONE     := RL_T100.Z_FLGPICKINGDONE;
        REC_XOUT_T100.Z_FLGCREATEBACKORDER := RL_T100.Z_FLGCREATEBACKORDER;
        REC_XOUT_T100.Z_NUMFIRSTORDER      := RL_T100.Z_NUMFIRSTORDER;
        REC_XOUT_T100.DTECRE               := RL_T100.DTECRE;
        REC_XOUT_T100.SM1_CODPROCESS       := PI_PROGR_H;
        REC_XOUT_T100.SM1_STATUS           := RL_T100.SM1_STATUS;
        REC_XOUT_T100.SM1_DTEPROCESS       := XSYSDATE;
        REC_XOUT_T100.ERP_DOCREFERENCE     := RL_T100.ERP_DOCREFERENCE;
        REC_XOUT_T100.IDDAY                := RL_T100.IDDAY;
        REC_XOUT_T100.CODLOCATION          := RL_T100.CODLOCATION;
        REC_XOUT_T100.FLGPROCESSEDASSET    := NVL(RL_T100.FLGPROCESSEDASSET,
                                                  0);
        REC_XOUT_T100.CODADDR              := RL_T100.CODADDR;
        REC_XOUT_T100.Z_FLG_KD_ORD         := '1';
        -- Field is mandatory in XOUT_T100ORDHEAD_LOG
        REC_XOUT_T100.MOVED := 0;
      
        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
      
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T100,
                                         SQLCODE,
                                         VL_MESSAGE_H);
      END;
    
      BEGIN
        IF (VL_STATUS = 0) THEN
        
          VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
          DElETE XOUT_T106ORDROW
           WHERE NUMORD = RL_T100.NUMORD
             AND CODUSR = RL_T100.CODUSR
             AND ERP_DTEPROCESS IS NULL;
        
          FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP
          
            VL_MESSAGE_H := 'Ord Row ' || RL_T106.NUMORD || '/' ||
                            RL_T106.CODUSR || '/' || RL_T106.NUMROW;
          
            VL_MESSAGE_D                       := 'Insert  XOUT_T106ORDROW ';
            REC_XOUT_T106.CODUSR               := RL_T106.CODUSR;
            REC_XOUT_T106.NUMORD               := RL_T106.NUMORD;
            REC_XOUT_T106.NUMROW               := RL_T106.NUMROW;
            REC_XOUT_T106.CODART               := GET_PRODUCT_CODE(RL_T106.CODDIV,RL_T106.CODART);
            REC_XOUT_T106.CODDIV               := RL_T106.CODDIV;
            REC_XOUT_T106.UMORD                := RL_T106.UMORD;
            REC_XOUT_T106.DESART               := RL_T106.PRODUCTDES;
            REC_XOUT_T106.QTYORD               := RL_T106.QTYORD;
            REC_XOUT_T106.QTYBCKORD            := NVL(RL_T106.QTYBCKORD, 0);
            REC_XOUT_T106.QTYANN               := RL_T106.QTYANN;
            REC_XOUT_T106.QTYDEL               := RL_T106.QTYDEL;
            REC_XOUT_T106.UMINV                := RL_T106.UMINV;
            REC_XOUT_T106.QTYINV               := RL_T106.QTYINV;
            REC_XOUT_T106.CODTYPROW            := RL_T106.CODTYPROW;
            REC_XOUT_T106.CODLIST              := RL_T106.CODLIST;
            REC_XOUT_T106.DTEDELIV             := RL_T106.DTEDELIV;
            REC_XOUT_T106.DTEPROPDELIV         := RL_T106.DTEPROPDELIV;
            REC_XOUT_T106.CODSTATUS            := NVL(RL_T106.CODSTATUS, 1);
            REC_XOUT_T106.CODSHIPPER           := RL_T106.CODSHIPPER;
            REC_XOUT_T106.NUMDOCREF            := RL_T106.NUMDOCREF;
            REC_XOUT_T106.DTEDOCREF            := RL_T106.DTEDOCREF;
            REC_XOUT_T106.GROSSAMOUNT          := RL_T106.GROSSAMOUNT;
            REC_XOUT_T106.NUMINV               := RL_T106.NUMINV;
            REC_XOUT_T106.NETAMOUNT            := RL_T106.NETAMOUNT;
            REC_XOUT_T106.DTEINV               := RL_T106.DTEINV;
            REC_XOUT_T106.TAXAMOUNT            := RL_T106.TAXAMOUNT;
            REC_XOUT_T106.VATAMOUNT            := RL_T106.VATAMOUNT;
            REC_XOUT_T106.INCREASEAMOUNT       := RL_T106.INCREASEAMOUNT;
            REC_XOUT_T106.DISCOUNTAMOUNT       := RL_T106.DISCOUNTAMOUNT;
            REC_XOUT_T106.GIFTAMOUNT           := RL_T106.GIFTAMOUNT;
            REC_XOUT_T106.ENDUSERPRICE         := RL_T106.ENDUSERPRICE;
            REC_XOUT_T106.CODAZCAPP            := RL_T106.CODAZCAPP;
            REC_XOUT_T106.FLGEFFBCKORD         := RL_T106.FLGEFFBCKORD;
            REC_XOUT_T106.CODBCKORDCAUSE       := RL_T106.CODBCKORDCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNT       := RL_T106.GROSSARTAMOUNT;
            REC_XOUT_T106.NETARTAMOUNT         := RL_T106.NETARTAMOUNT;
            REC_XOUT_T106.CODSRC               := RL_T106.CODSRC;
            REC_XOUT_T106.CODSRCREF            := RL_T106.CODSRCREF;
            REC_XOUT_T106.CODBENCAUSE          := RL_T106.CODBENCAUSE;
            REC_XOUT_T106.CODBENSUBCAUSE       := RL_T106.CODBENSUBCAUSE;
            REC_XOUT_T106.BENNOTE              := RL_T106.BENNOTE;
            REC_XOUT_T106.AZCTOAPPLY           := RL_T106.AZCTOAPPLY;
            REC_XOUT_T106.CODOPERATION         := RL_T106.CODOPERATION;
            REC_XOUT_T106.DISCOUNTAMOUNTOUTINV := RL_T106.DISCOUNTAMOUNTOUTINV;
            REC_XOUT_T106.CODACCAPP            := RL_T106.CODACCAPP;
            REC_XOUT_T106.CODTYPROWCAUSE       := RL_T106.CODTYPROWCAUSE;
            REC_XOUT_T106.CODARTCUST           := RL_T106.CODARTCUST;
            REC_XOUT_T106.QTYRESO              := RL_T106.QTYRESO;
            REC_XOUT_T106.NUMORDRESO           := RL_T106.NUMORDRESO;
            REC_XOUT_T106.CODBLCCAUSE          := RL_T106.CODBLCCAUSE;
            REC_XOUT_T106.CODARTKITREF         := RL_T106.CODARTKITREF;
            REC_XOUT_T106.NUMROWKITREF         := RL_T106.NUMROWKITREF;
            REC_XOUT_T106.CODCAUSEKIT          := RL_T106.CODCAUSEKIT;
            REC_XOUT_T106.NETARTAMOUNTTEO      := RL_T106.NETARTAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTTEO         := RL_T106.NETAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTMIN         := RL_T106.NETAMOUNTMIN;
            REC_XOUT_T106.NETAMOUNTMAX         := RL_T106.NETAMOUNTMAX;
            REC_XOUT_T106.NETDIFF              := RL_T106.NETDIFF;
            REC_XOUT_T106.COD_ABBINAMENTO_KIT  := RL_T106.COD_ABBINAMENTO_KIT;
            REC_XOUT_T106.NUMROWORIG           := RL_T106.NUMROWORIG;
            REC_XOUT_T106.FLGFIRSTSON          := RL_T106.FLGFIRSTSON;
            REC_XOUT_T106.NETARTAMOUNTCUST     := RL_T106.NETARTAMOUNTCUST;
            REC_XOUT_T106.NETARTAMOUNTCUST2    := RL_T106.NETARTAMOUNTCUST2;
            REC_XOUT_T106.GROSSARTAMOUNTCUST   := RL_T106.GROSSARTAMOUNTCUST;
            REC_XOUT_T106.NETAMOUNTCUST        := RL_T106.NETAMOUNTCUST;
            REC_XOUT_T106.QTYORDEDI            := RL_T106.QTYORDEDI;
            REC_XOUT_T106.CODEAN               := RL_T106.CODEAN;
            REC_XOUT_T106.UMORDEDI             := RL_T106.UMORDEDI;
            REC_XOUT_T106.NUMROWREF            := RL_T106.NUMROWREF;
            REC_XOUT_T106.FLGOMGPROMO          := RL_T106.FLGOMGPROMO;
            REC_XOUT_T106.GROSSARTAMOUNTORD    := RL_T106.GROSSARTAMOUNTORD;
            REC_XOUT_T106.GROSSARTAMOUNTDELTA  := RL_T106.GROSSARTAMOUNTDELTA;
            REC_XOUT_T106.FLGOMGDISCLIST       := RL_T106.FLGOMGDISCLIST;
            REC_XOUT_T106.CODCNVPDA            := RL_T106.CODCNVPDA;
            REC_XOUT_T106.DTEEVA               := RL_T106.DTEEVA;
            REC_XOUT_T106.CODPAYTRM            := RL_T106.CODPAYTRM;
            REC_XOUT_T106.CODPAYMOD            := RL_T106.CODPAYMOD;
            REC_XOUT_T106.NUMORDHOST           := NULL;
            REC_XOUT_T106.NUMROWHOST           := NULL;
            REC_XOUT_T106.CODMODSHIP           := RL_T106.CODMODSHIP;
            REC_XOUT_T106.CODMODDELIV          := RL_T106.CODMODDELIV;
            REC_XOUT_T106.CODWHS               := RL_T106.CODWHS;
            -- REC_XOUT_T106.CODWHSDELIV          := RL_T106.CODWHSDELIV; Spool file considers data from header T100 table
            REC_XOUT_T106.DTEPRICE            := RL_T106.DTEPRICE;
            REC_XOUT_T106.DTEDELIVTO          := RL_T106.DTEDELIVTO;
            REC_XOUT_T106.CODROWGROUP         := RL_T106.CODROWGROUP;
            REC_XOUT_T106.NETAMOUNTGIFT       := RL_T106.NETAMOUNTGIFT;
            REC_XOUT_T106.NETARTAMOUNTEDI     := RL_T106.NETARTAMOUNTEDI;
            REC_XOUT_T106.GROSSARTAMOUNTEDI   := RL_T106.GROSSARTAMOUNTEDI;
            REC_XOUT_T106.QTYORDORIG          := RL_T106.QTYORDORIG;
            REC_XOUT_T106.QTYALLOCATED        := RL_T106.QTYALLOCATED;
            REC_XOUT_T106.RETURNAMOUNT        := RL_T106.RETURNAMOUNT;
            REC_XOUT_T106.NETARTAMOUNTUMORD   := RL_T106.NETARTAMOUNTUMORD;
            REC_XOUT_T106.CODQTYMODCAUSE      := RL_T106.CODQTYMODCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNTUMORD := RL_T106.GROSSARTAMOUNTUMORD;
            REC_XOUT_T106.Z_DTEXPIRE          := RL_T106.Z_DTEXPIRE;
            -- REC_XOUT_T106.DTECRE            := RL_T106.DTECRE; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;
            -- REC_XOUT_T106.SM1_STATUS        := RL_T106.SM1_STATUS; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
            -- REC_XOUT_T106.ERP_DOCREFERENCE  := RL_T106.ERP_DOCREFERENCE; Spool file considers data from header T100 table
          
            INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;
          
            VL_INS_T106          := VL_INS_T106 + 1;
            VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
          
          END LOOP;
          VL_COUNT_XOUT_T106   := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
          VL_COUNT_XOUT_T106_P := 0;
        
        END IF;
        --
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T106,
                                         SQLCODE,
                                         VL_MESSAGE_H);
        
      END;
    
      IF VL_STATUS = 0 THEN
      
        VL_INS_T100 := VL_INS_T100 + 1;
           
        UPDATE T100ORDHEAD
           SET CODTYPORDCUST   = NUMORD,
               DTELCK          = NULL,
               IDSESSIONLCK    = NULL,
               CODUSRLCK       = NULL,
               NUMORDCUST      = TRIM(NUMORD) || TRIM(CODUSR),
               DTETOHOST = XSYSDATE
         WHERE NUMORD    = REC_XOUT_T100.NUMORD
           AND CODUSR    = REC_XOUT_T100.CODUSR;
      
      ELSE
      
        ROLLBACK;
        UPDATE T100ORDHEAD
           SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      END IF;
    
    END LOOP;
    COMMIT;

    -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T106,
                             0,
                             VL_COUNT_XOUT_T106,
                             VL_INS_T106,
                             VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T100,
                             0,
                             VL_COUNT_XOUT_T100,
                             VL_INS_T100,
                             VL_COUNT_XOUT_T100 - VL_INS_T100);

    PO_MSG    := VL_INS_T100 || ' Orders Exported';
    PO_STATUS := VL_INS_T100;

  EXCEPTION
    WHEN EX_EXIT THEN
    
      ROLLBACK;
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := -1;
    
    WHEN OTHERS THEN
    
      ROLLBACK;
      UPDATE T100ORDHEAD
         SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
       WHERE CODUSRLCK = C_SYSUSR
         AND IDSESSIONLCK = PI_SESSION_ID;
      COMMIT;
    
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := VL_STATUS;
    
  END EXP_T10X_ORDERS_KD_SYG;

  /*============================================================================*\
  /* 
     Name : EXP_T10X_VANUNLOAD_SYG_60
     Exports SM1 tables :
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail

      Staging Area (SSA) tables :
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic :
      •  Exports van unload order header and rows for division SYG
      •  Exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  Deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

      Error handling :
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  Error on record, header and all details are discarded

      Input parameters :     PI_PROGR_H:           unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID:        unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                             PI_MASSIVE_EXP_DATE:  NULL - normal export NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                             PI_CODE_CHAR_A:       division
  */
  /*============================================================================ */
  PROCEDURE EXP_T10X_VANUNLOAD_SYG_60(PI_PROGR_H          IN NUMBER,
                                      PI_SESSION_ID       IN NUMBER,
                                      PI_DOCUMENTKEY      IN VARCHAR2,
                                      PI_MASSIVE_EXP_DATE IN DATE,
                                      PI_CODDIV           IN VARCHAR2,
                                      PO_MSG              OUT VARCHAR,
                                      PO_STATUS           OUT NUMBER) IS
                                      
    -- Cursor on main Order table
    CURSOR CL_T100 IS
      SELECT T.*, UD.Codwhsdeliv
        FROM T100ORDHEAD T
        
       INNER JOIN T031USERDIV UD
          On T.CODEUSR = UD.CODUSR
         And T.CODDIV = UD.CODDIV
      
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK = PI_SESSION_ID
       ORDER BY T.NUMORD, t.CODUSR ASC;
       
    -- Rows
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT T106.*,
             T060.DESART || '/' || T060.DESART2 PRODUCTDES
        FROM T106ORDROW T106
        
        JOIN T060ARTICLE T060
          ON T060.CODART = T106.CODART
         AND T060.CODDIV = T106.CODDIV
        
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR;
       
    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM ZQEXP_T100VANUNLOAD_SYG_60_C
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK != PI_SESSION_ID
         and DOCUMENTKEY = nvl(PI_DOCUMENTKEY, DOCUMENTKEY)
         and NVL(DTEMOD, DTECRE) >
             NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
       ORDER BY NUMORD, CODUSR ASC;
       
    --
    VL_MESSAGE_H VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106      NUMBER := 0;
    VL_COUNT_XOUT_T106   NUMBER := 0;
    VL_COUNT_XOUT_T106_P NUMBER := 0;
    VL_INS_T106          NUMBER := 0;

    REC_XOUT_T100 XOUT_T100ORDHEAD%ROWTYPE := NULL;
    REC_XOUT_T106 XOUT_T106ORDROW%ROWTYPE := NULL;

    VL_STATUS NUMBER := 0;
    VL_STEP   NUMBER := 0; -- Used to ping t035
    --
    EX_EXIT EXCEPTION;
    --
  BEGIN

    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER HEAD',
                                                'EXPORT --> ORDER HEAD VANUNLOAD (SYG)',
                                                0,
                                                NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ROWS',
                                                'EXPORT --> ORDER DETAIL VANUNLOAD (SYG)',
                                                0,
                                                NULL);

    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
    
      VL_MESSAGE_D := 'T100ORDHEAD';
      UPDATE T100ORDHEAD T
         SET T.IDSESSIONLCK = PI_SESSION_ID,
             T.CODUSRLCK    = C_SYSUSR,
             T.DTELCK       = XSYSDATE
       WHERE t.DOCUMENTKEY = nvl(PI_DOCUMENTKEY, T.DOCUMENTKEY)
         and T.CODDIV = nvl(PI_CODDIV, T.coddiv)
         and NVL(DTEMOD, DTECRE) >
             NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
         and (T.NUMORD, T.CODUSR, T.CODDIV) IN
             (SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100VANUNLOAD_SYG_60_C Q
               WHERE Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE, Q.DTEMOD));
      VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VL_MESSAGE_H := 'Error while Locking: ' || VL_MESSAGE_D;
        RAISE EX_EXIT;
    END;

    -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
    
      VL_MESSAGE_H := 'Unable to Export ' || VL_MESSAGE_D || '.Numord=' ||
                      R_LOCKED.NUMORD || 'Codusr = ' || R_LOCKED.CODUSR ||
                      ' Record locked by user ' || R_LOCKED.CODUSRLCK ||
                      ' since ' ||
                      to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);
    
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
    END LOOP;

    FOR RL_T100 IN CL_T100 LOOP
    
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF (MOD(VL_STEP, 1000) = 0) THEN
        PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
    
      --
      VL_STATUS := 0;
      --
      VL_MESSAGE_H := 'Order: ' || RL_T100.NUMORD || '/' || RL_T100.CODUSR;
      --
      BEGIN
      
        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD
         WHERE NUMORD = RL_T100.NUMORD
           AND CODUSR = RL_T100.CODUSR
           AND ERP_DTEPROCESS IS NULL;
      
        VL_MESSAGE_D                       := 'Insert XOUT_T100ORDHEAD ';
        REC_XOUT_T100.NUMORD               := RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR               := RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR              := RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD            := RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS            := RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV               := RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE          := RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD               := RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV             := RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV          := RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA               := RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM            := RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD            := RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV         := RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT           := RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV           := RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST              := RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR               := RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF            := RL_T100.NUMORD;
        REC_XOUT_T100.NUMORDHOST           := NULL;
        REC_XOUT_T100.NUMORDCUST           := TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);
        REC_XOUT_T100.DTEORDCUST           := RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT        := RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS           := RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP           := RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV          := RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT         := NVL(RL_T100.CODAGREEMENT,0);
        REC_XOUT_T100.DESAGREEMENT         := RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT            := RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS        := RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT               := NVL(RL_T100.DTEAUT, TO_DATE('12/30/1899','MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPAUT            := RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT               := RL_T100.DESAUT;
        REC_XOUT_T100.GROSSAMOUNT          := RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT            := RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT            := NVL(RL_T100.TAXAMOUNT,0);
        REC_XOUT_T100.VATAMOUNT            := RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT       := NVL(RL_T100.INCREASEAMOUNT,0);
        REC_XOUT_T100.DISCOUNTAMOUNT       := NVL(RL_T100.DISCOUNTAMOUNT,0);
        REC_XOUT_T100.GIFTAMOUNT           := NVL(RL_T100.GIFTAMOUNT,0);
        REC_XOUT_T100.CODUSRMOD            := RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN               := RL_T100.FLGANN;
        REC_XOUT_T100.CODABI               := RL_T100.CODABI;
        REC_XOUT_T100.CODCAB               := RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN               := RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA               := RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR              := RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC               := RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV               := RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT               := RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV               := RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT             := RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT           := RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN            := NVL(RL_T100.FLGRETURN,0);
        REC_XOUT_T100.FLGHOSTED            := NVL(RL_T100.FLGHOSTED,0);
        REC_XOUT_T100.FLGCONFIRMED         := NVL(RL_T100.FLGCONFIRMED,0);
        REC_XOUT_T100.CODWHS               := RL_T100.CODWHS;
        REC_XOUT_T100.CODWHSDELIV          := RL_T100.CODWHSDELIV;
        REC_XOUT_T100.CODSHIPPER           := RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP            := RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN            := RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE             := NVL(RL_T100.DTEPRICE, TO_DATE('12/30/1899','MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPSALE           := RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO        := NVL(RL_T100.FLGCHECKPROMO,0);
        REC_XOUT_T100.CODAGREETYPE         := RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN         := RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV := NVL(RL_T100.DISCOUNTAMOUNTOUTINV,0);
        REC_XOUT_T100.CODTYPORDCUST        := RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3              := RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO           := RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN               := RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2            := NVL(RL_T100.FLGUMORD2,0);
        REC_XOUT_T100.NETAMOUNTTEO         := NVL(RL_T100.NETAMOUNTTEO,0);
        REC_XOUT_T100.NETAMOUNTMIN         := NVL(RL_T100.NETAMOUNTMIN,0);
        REC_XOUT_T100.NETAMOUNTMAX         := NVL(RL_T100.NETAMOUNTMAX,0);
        REC_XOUT_T100.CODUSR4              := RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2              := RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI          := RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI        := RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI      := RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI         := RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6              := RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV               := RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC          := RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN              := RL_T100.CODIBAN;
        REC_XOUT_T100.BACKAMOUNT           := NVL(RL_T100.BACKAMOUNT,0);
        REC_XOUT_T100.TOTPALLETS           := RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT          := RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC                := RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV         := RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.CODUSR5              := RL_T100.CODUSR5;
        REC_XOUT_T100.IDSURVEY             := RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE          := RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI      := NVL(RL_T100.FLGPROCESSEDEDI,0);
        REC_XOUT_T100.FLGEDI               := NVL(RL_T100.FLGEDI,0);
        REC_XOUT_T100.NUMESENZIONE         := RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2            := RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3            := RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4            := RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5            := RL_T100.DTEDELIV5;
        REC_XOUT_T100.IDROUTE              := RL_T100.IDROUTE;
        REC_XOUT_T100.NUMDOC               := RL_T100.NUMDOC;
        REC_XOUT_T100.DTECLOSE             := RL_T100.DTECLOSE;
        REC_XOUT_T100.RETURNAMOUNT         := RL_T100.RETURNAMOUNT;
        REC_XOUT_T100.GPSVALLATITUDE       := RL_T100.GPSVALLATITUDE;
        REC_XOUT_T100.GPSVALLONGITUDE      := RL_T100.GPSVALLONGITUDE;
        REC_XOUT_T100.DTENEW               := RL_T100.DTENEW;
        REC_XOUT_T100.CALCULATEDSPENTTIME  := RL_T100.CALCULATEDSPENTTIME;
        REC_XOUT_T100.CODPRINCIPALUSR      := RL_T100.CODPRINCIPALUSR;
        REC_XOUT_T100.Z_FLGPICKINGDONE     := RL_T100.Z_FLGPICKINGDONE;
        REC_XOUT_T100.Z_FLGCREATEBACKORDER := RL_T100.Z_FLGCREATEBACKORDER;
        REC_XOUT_T100.Z_NUMFIRSTORDER      := RL_T100.Z_NUMFIRSTORDER;
        REC_XOUT_T100.DTECRE               := RL_T100.DTECRE;
        REC_XOUT_T100.SM1_CODPROCESS       := PI_PROGR_H;
        REC_XOUT_T100.SM1_STATUS           := RL_T100.SM1_STATUS;
        REC_XOUT_T100.SM1_DTEPROCESS       := XSYSDATE;
        REC_XOUT_T100.ERP_DOCREFERENCE     := RL_T100.ERP_DOCREFERENCE;
        REC_XOUT_T100.IDDAY                := RL_T100.IDDAY;
        REC_XOUT_T100.CODLOCATION          := RL_T100.CODLOCATION;
        REC_XOUT_T100.FLGPROCESSEDASSET    := NVL(RL_T100.FLGPROCESSEDASSET,0);
        REC_XOUT_T100.CODADDR              := RL_T100.CODADDR;
        -- Field is mandatory in XOUT_T100ORDHEAD_LOG
        REC_XOUT_T100.MOVED                := 0; 
      
        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
      
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T100,
                                         SQLCODE,
                                         VL_MESSAGE_H);
      END;
    
      BEGIN
      
        IF (VL_STATUS = 0) THEN
          -- Unit Measure data
          VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
          DElETE XOUT_T106ORDROW
           WHERE NUMORD = RL_T100.NUMORD
             AND CODUSR = RL_T100.CODUSR
             AND ERP_DTEPROCESS IS NULL;
        
          FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP
          
            VL_MESSAGE_H := 'Ord Row ' || RL_T106.NUMORD || '/' ||
                            RL_T106.CODUSR || '/' || RL_T106.NUMROW;
          
            VL_MESSAGE_D                       := 'Insert  XOUT_T106ORDROW ';
            REC_XOUT_T106.CODUSR               := RL_T106.CODUSR;
            REC_XOUT_T106.NUMORD               := RL_T106.NUMORD;
            REC_XOUT_T106.NUMROW               := RL_T106.NUMROW;
            REC_XOUT_T106.CODART               := GET_PRODUCT_CODE(RL_T106.CODDIV , RL_T106.CODART);
            REC_XOUT_T106.CODDIV               := RL_T106.CODDIV;
            REC_XOUT_T106.UMORD                := RL_T106.UMORD;
            REC_XOUT_T106.DESART               := RL_T106.PRODUCTDES;
            REC_XOUT_T106.QTYORD               := RL_T106.QTYORD;
            REC_XOUT_T106.QTYBCKORD            := NVL(RL_T106.QTYBCKORD,0);
            REC_XOUT_T106.QTYANN               := RL_T106.QTYANN;
            REC_XOUT_T106.QTYDEL               := RL_T106.QTYDEL;
            REC_XOUT_T106.UMINV                := RL_T106.UMINV;
            REC_XOUT_T106.QTYINV               := RL_T106.QTYINV;
            REC_XOUT_T106.CODTYPROW            := RL_T106.CODTYPROW;
            REC_XOUT_T106.CODLIST              := RL_T106.CODLIST;
            REC_XOUT_T106.DTEDELIV             := RL_T106.DTEDELIV;
            REC_XOUT_T106.DTEPROPDELIV         := RL_T106.DTEPROPDELIV;
            REC_XOUT_T106.CODSTATUS            := NVL(RL_T106.CODSTATUS,1);
            REC_XOUT_T106.CODSHIPPER           := RL_T106.CODSHIPPER;
            REC_XOUT_T106.NUMDOCREF            := RL_T106.NUMDOCREF;
            REC_XOUT_T106.DTEDOCREF            := RL_T106.DTEDOCREF;
            REC_XOUT_T106.GROSSAMOUNT          := RL_T106.GROSSAMOUNT;
            REC_XOUT_T106.NUMINV               := RL_T106.NUMINV;
            REC_XOUT_T106.NETAMOUNT            := RL_T106.NETAMOUNT;
            REC_XOUT_T106.DTEINV               := RL_T106.DTEINV;
            REC_XOUT_T106.TAXAMOUNT            := RL_T106.TAXAMOUNT;
            REC_XOUT_T106.VATAMOUNT            := RL_T106.VATAMOUNT;
            REC_XOUT_T106.INCREASEAMOUNT       := RL_T106.INCREASEAMOUNT;
            REC_XOUT_T106.DISCOUNTAMOUNT       := RL_T106.DISCOUNTAMOUNT;
            REC_XOUT_T106.GIFTAMOUNT           := RL_T106.GIFTAMOUNT;
            REC_XOUT_T106.ENDUSERPRICE         := RL_T106.ENDUSERPRICE;
            REC_XOUT_T106.CODAZCAPP            := RL_T106.CODAZCAPP;
            REC_XOUT_T106.FLGEFFBCKORD         := RL_T106.FLGEFFBCKORD;
            REC_XOUT_T106.CODBCKORDCAUSE       := RL_T106.CODBCKORDCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNT       := RL_T106.GROSSARTAMOUNT;
            REC_XOUT_T106.NETARTAMOUNT         := RL_T106.NETARTAMOUNT;
            REC_XOUT_T106.CODSRC               := RL_T106.CODSRC;
            REC_XOUT_T106.CODSRCREF            := RL_T106.CODSRCREF;
            REC_XOUT_T106.CODBENCAUSE          := RL_T106.CODBENCAUSE;
            REC_XOUT_T106.CODBENSUBCAUSE       := RL_T106.CODBENSUBCAUSE;
            REC_XOUT_T106.BENNOTE              := RL_T106.BENNOTE;
            REC_XOUT_T106.AZCTOAPPLY           := RL_T106.AZCTOAPPLY;
            REC_XOUT_T106.CODOPERATION         := RL_T106.CODOPERATION;
            REC_XOUT_T106.DISCOUNTAMOUNTOUTINV := RL_T106.DISCOUNTAMOUNTOUTINV;
            REC_XOUT_T106.CODACCAPP            := RL_T106.CODACCAPP;
            REC_XOUT_T106.CODTYPROWCAUSE       := RL_T106.CODTYPROWCAUSE;
            REC_XOUT_T106.CODARTCUST           := RL_T106.CODARTCUST;
            REC_XOUT_T106.QTYRESO              := RL_T106.QTYRESO;
            REC_XOUT_T106.NUMORDRESO           := RL_T106.NUMORDRESO;
            REC_XOUT_T106.CODBLCCAUSE          := RL_T106.CODBLCCAUSE;
            REC_XOUT_T106.CODARTKITREF         := RL_T106.CODARTKITREF;
            REC_XOUT_T106.NUMROWKITREF         := RL_T106.NUMROWKITREF;
            REC_XOUT_T106.CODCAUSEKIT          := RL_T106.CODCAUSEKIT;
            REC_XOUT_T106.NETARTAMOUNTTEO      := RL_T106.NETARTAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTTEO         := RL_T106.NETAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTMIN         := RL_T106.NETAMOUNTMIN;
            REC_XOUT_T106.NETAMOUNTMAX         := RL_T106.NETAMOUNTMAX;
            REC_XOUT_T106.NETDIFF              := RL_T106.NETDIFF;
            REC_XOUT_T106.COD_ABBINAMENTO_KIT  := RL_T106.COD_ABBINAMENTO_KIT;
            REC_XOUT_T106.NUMROWORIG           := RL_T106.NUMROWORIG;
            REC_XOUT_T106.FLGFIRSTSON          := RL_T106.FLGFIRSTSON;
            REC_XOUT_T106.NETARTAMOUNTCUST     := RL_T106.NETARTAMOUNTCUST;
            REC_XOUT_T106.NETARTAMOUNTCUST2    := RL_T106.NETARTAMOUNTCUST2;
            REC_XOUT_T106.GROSSARTAMOUNTCUST   := RL_T106.GROSSARTAMOUNTCUST;
            REC_XOUT_T106.NETAMOUNTCUST        := RL_T106.NETAMOUNTCUST;
            REC_XOUT_T106.QTYORDEDI            := RL_T106.QTYORDEDI;
            REC_XOUT_T106.CODEAN               := RL_T106.CODEAN;
            REC_XOUT_T106.UMORDEDI             := RL_T106.UMORDEDI;
            REC_XOUT_T106.NUMROWREF            := RL_T106.NUMROWREF;
            REC_XOUT_T106.FLGOMGPROMO          := RL_T106.FLGOMGPROMO;
            REC_XOUT_T106.GROSSARTAMOUNTORD    := RL_T106.GROSSARTAMOUNTORD;
            REC_XOUT_T106.GROSSARTAMOUNTDELTA  := RL_T106.GROSSARTAMOUNTDELTA;
            REC_XOUT_T106.FLGOMGDISCLIST       := RL_T106.FLGOMGDISCLIST;
            REC_XOUT_T106.CODCNVPDA            := RL_T106.CODCNVPDA;
            REC_XOUT_T106.DTEEVA               := RL_T106.DTEEVA;
            REC_XOUT_T106.CODPAYTRM            := RL_T106.CODPAYTRM;
            REC_XOUT_T106.CODPAYMOD            := RL_T106.CODPAYMOD;
            REC_XOUT_T106.NUMORDHOST           := NULL;
            REC_XOUT_T106.NUMROWHOST           := NULL;
            REC_XOUT_T106.CODMODSHIP           := RL_T106.CODMODSHIP;
            REC_XOUT_T106.CODMODDELIV          := RL_T106.CODMODDELIV;
            REC_XOUT_T106.CODWHS               := RL_T106.CODWHS;
            -- REC_XOUT_T106.CODWHSDELIV          := RL_T106.CODWHSDELIV; Spool file considers data from header T100 table
            REC_XOUT_T106.DTEPRICE             := RL_T106.DTEPRICE;
            REC_XOUT_T106.DTEDELIVTO           := RL_T106.DTEDELIVTO;
            REC_XOUT_T106.CODROWGROUP          := RL_T106.CODROWGROUP;
            REC_XOUT_T106.NETAMOUNTGIFT        := RL_T106.NETAMOUNTGIFT;
            REC_XOUT_T106.NETARTAMOUNTEDI      := RL_T106.NETARTAMOUNTEDI;
            REC_XOUT_T106.GROSSARTAMOUNTEDI    := RL_T106.GROSSARTAMOUNTEDI;
            REC_XOUT_T106.QTYORDORIG           := RL_T106.QTYORDORIG;
            REC_XOUT_T106.QTYALLOCATED         := RL_T106.QTYALLOCATED;
            REC_XOUT_T106.RETURNAMOUNT         := RL_T106.RETURNAMOUNT;
            REC_XOUT_T106.NETARTAMOUNTUMORD    := RL_T106.NETARTAMOUNTUMORD;
            REC_XOUT_T106.CODQTYMODCAUSE       := RL_T106.CODQTYMODCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNTUMORD  := RL_T106.GROSSARTAMOUNTUMORD;
            REC_XOUT_T106.Z_DTEXPIRE           := RL_T106.Z_DTEXPIRE;
            -- REC_XOUT_T106.DTECRE            := RL_T106.DTECRE; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_CODPROCESS       := REC_XOUT_T100.SM1_CODPROCESS;
            -- REC_XOUT_T106.SM1_STATUS        := RL_T106.SM1_STATUS; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_DTEPROCESS       := REC_XOUT_T100.SM1_DTEPROCESS;
            -- REC_XOUT_T106.ERP_DOCREFERENCE  := RL_T106.ERP_DOCREFERENCE; Spool file considers data from header T100 table
            
            INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;
          
            VL_INS_T106          := VL_INS_T106 + 1;
            VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
          
          END LOOP;
        
          VL_COUNT_XOUT_T106   := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
          VL_COUNT_XOUT_T106_P := 0;
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T106,
                                         SQLCODE,
                                         VL_MESSAGE_H);
        
      END;
    
      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
      
        VL_INS_T100 := VL_INS_T100 + 1;
        UPDATE T100ORDHEAD
           SET CODTYPORDCUST = NUMORD,
               DTELCK        = NULL,
               IDSESSIONLCK  = NULL,
               CODUSRLCK     = NULL,
               NUMORDCUST    = TRIM(NUMORD) || TRIM(CODUSR),
               DTETOHOST     = XSYSDATE
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      ELSE
      
        ROLLBACK;
        UPDATE T100ORDHEAD
           SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
           
      END IF;
    
    END LOOP;
    COMMIT;

    -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T106,
                             0,
                             VL_COUNT_XOUT_T106,
                             VL_INS_T106,
                             VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T100,
                             0,
                             VL_COUNT_XOUT_T100,
                             VL_INS_T100,
                             VL_COUNT_XOUT_T100 - VL_INS_T100);

    PO_MSG    := VL_INS_T100 || ' Orders Exported';
    PO_STATUS := VL_INS_T100;

  EXCEPTION
    WHEN EX_EXIT THEN
    
      ROLLBACK;
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := -1;
    
    WHEN OTHERS THEN
    
      ROLLBACK;
      UPDATE T100ORDHEAD
         SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
       WHERE CODUSRLCK = C_SYSUSR
         AND IDSESSIONLCK = PI_SESSION_ID;
      COMMIT;
    
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := VL_STATUS;
    
  END EXP_T10X_VANUNLOAD_SYG_60;
  
  PROCEDURE EXP_T10X_ORDERS_SYG_80(PI_PROGR_H          IN NUMBER,
                                   PI_SESSION_ID       IN NUMBER,
                                   PI_DOCUMENTKEY      IN VARCHAR2,
                                   PI_MASSIVE_EXP_DATE IN DATE,
                                   PI_CODDIV           IN VARCHAR2,
                                   PO_MSG              OUT VARCHAR,
                                   PO_STATUS           OUT NUMBER) IS
    -- Cursor on main Order table
    CURSOR CL_T100 IS
      SELECT T.*, UD.Codwhsdeliv
        FROM T100ORDHEAD T
        
       INNER JOIN T031USERDIV UD
          On T.CODEUSR = UD.CODUSR
         And T.CODDIV = UD.CODDIV
      
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK = PI_SESSION_ID
       ORDER BY T.NUMORD, t.CODUSR ASC;
       
    -- Rows
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT T106.*,
             T060.DESART || '/' || T060.DESART2 PRODUCTDES
        FROM T106ORDROW T106
        
        JOIN T060ARTICLE T060
          ON T060.CODART = T106.CODART
         AND T060.CODDIV = T106.CODDIV
        
       WHERE NUMORD = CI_NUMORD
         AND CODUSR = CI_CODUSR;
         
    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM ZQEXP_T100_PRICEDELIVERY_SYG_C
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK != PI_SESSION_ID
         AND DOCUMENTKEY = NVL(PI_DOCUMENTKEY, DOCUMENTKEY)
       ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106      NUMBER := 0;
    VL_COUNT_XOUT_T106   NUMBER := 0;
    VL_COUNT_XOUT_T106_P NUMBER := 0;
    VL_INS_T106          NUMBER := 0;

    REC_XOUT_T100 XOUT_T100ORDHEAD%ROWTYPE := NULL;
    REC_XOUT_T106 XOUT_T106ORDROW%ROWTYPE := NULL;

    VL_STATUS NUMBER := 0;
    VL_STEP   NUMBER := 0; -- Used to ping t035
    --
    EX_EXIT EXCEPTION;
    --
  BEGIN

    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER HEAD',
                                                'EXPORT --> PRESALES ORDER HEAD (SYG)',
                                                0,
                                                NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ROWS',
                                                'EXPORT --> PRESALES ORDER DETAIL (SYG)',
                                                0,
                                                NULL);
    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);

    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED
    -- --------------------------------------------------------------
    BEGIN
    
      VL_MESSAGE_D := 'T100ORDHEAD';
      UPDATE T100ORDHEAD T
         SET T.IDSESSIONLCK = PI_SESSION_ID,
             T.CODUSRLCK    = C_SYSUSR,
             T.DTELCK       = XSYSDATE
       WHERE t.DOCUMENTKEY = nvl(PI_DOCUMENTKEY, T.DOCUMENTKEY)
         AND T.CODDIV = nvl(PI_CODDIV, T.coddiv)
         AND (T.NUMORD, T.CODUSR, T.CODDIV) IN
             (SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100_PRICEDELIVERY_SYG_C Q
               WHERE Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE, Q.DTEMOD));
      VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VL_MESSAGE_H := 'Error while Locking: ' || VL_MESSAGE_D;
        RAISE EX_EXIT;
    END;

    -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
    
      VL_MESSAGE_H := 'Unable to Export ' || VL_MESSAGE_D || '.Numord=' ||
                      R_LOCKED.NUMORD || 'Codusr = ' || R_LOCKED.CODUSR ||
                      ' Record locked by user ' || R_LOCKED.CODUSRLCK ||
                      ' since ' ||
                      to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);
    
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
    END LOOP;

    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF (MOD(VL_STEP, 1000) = 0) THEN
        PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
    
      VL_STATUS    := 0;
      VL_MESSAGE_H := 'Order: ' || RL_T100.NUMORD || '/' || RL_T100.CODUSR;
    
      BEGIN
      
        VL_MESSAGE_D := 'Delete XOUT_T100ORDHEAD ';
        DElETE XOUT_T100ORDHEAD
         WHERE NUMORD = RL_T100.NUMORD
           AND CODUSR = RL_T100.CODUSR
           AND ERP_DTEPROCESS IS NULL;
      
        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        REC_XOUT_T100.NUMORD               := RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR               := RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR              := RL_T100.CODEUSR;
        REC_XOUT_T100.CODTYPORD            := RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS            := RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV               := RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE          := RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD               := RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV             := RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV          := RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA               := RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM            := RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD            := RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV         := RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT           := RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV           := RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST              := RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR               := RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF            := RL_T100.NUMORD;
        REC_XOUT_T100.NUMORDHOST           := NULL;
        REC_XOUT_T100.NUMORDCUST           := TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);
        REC_XOUT_T100.DTEORDCUST           := RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT        := RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS           := RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP           := RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV          := RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT         := NVL(RL_T100.CODAGREEMENT,0);
        REC_XOUT_T100.DESAGREEMENT         := RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT            := RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS        := RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT               := NVL(RL_T100.DTEAUT, TO_DATE('12/30/1899','MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPAUT            := RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT               := RL_T100.DESAUT;
        REC_XOUT_T100.GROSSAMOUNT          := RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT            := RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT            := NVL(RL_T100.TAXAMOUNT,0);
        REC_XOUT_T100.VATAMOUNT            := RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT       := NVL(RL_T100.INCREASEAMOUNT,0);
        REC_XOUT_T100.DISCOUNTAMOUNT       := NVL(RL_T100.DISCOUNTAMOUNT,0);
        REC_XOUT_T100.GIFTAMOUNT           := NVL(RL_T100.GIFTAMOUNT,0);
        REC_XOUT_T100.CODUSRMOD            := RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN               := RL_T100.FLGANN;
        REC_XOUT_T100.CODABI               := RL_T100.CODABI;
        REC_XOUT_T100.CODCAB               := RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN               := RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA               := RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR              := RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC               := RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV               := RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT               := RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV               := RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT             := RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT           := RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN            := NVL(RL_T100.FLGRETURN,0);
        REC_XOUT_T100.FLGHOSTED            := NVL(RL_T100.FLGHOSTED,0);
        REC_XOUT_T100.FLGCONFIRMED         := NVL(RL_T100.FLGCONFIRMED,0);
        REC_XOUT_T100.CODWHS               := RL_T100.CODWHS;
        --REC_XOUT_T100.CODWHSDELIV          := RL_T100.CODWHSDELIV;
        REC_XOUT_T100.CODSHIPPER           := NVL(RL_T100.CODSHIPPER,'0001');
        REC_XOUT_T100.CODAZCAPP            := RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN            := RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE             := NVL(RL_T100.DTEPRICE, TO_DATE('12/30/1899','MM/DD/YYYY'));
        REC_XOUT_T100.CODTYPSALE           := RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO        := NVL(RL_T100.FLGCHECKPROMO,0);
        REC_XOUT_T100.CODAGREETYPE         := RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN         := RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV := NVL(RL_T100.DISCOUNTAMOUNTOUTINV,0);
        REC_XOUT_T100.CODTYPORDCUST        := RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3              := RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO           := RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN               := RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2            := NVL(RL_T100.FLGUMORD2,0);
        REC_XOUT_T100.NETAMOUNTTEO         := NVL(RL_T100.NETAMOUNTTEO,0);
        REC_XOUT_T100.NETAMOUNTMIN         := NVL(RL_T100.NETAMOUNTMIN,0);
        REC_XOUT_T100.NETAMOUNTMAX         := NVL(RL_T100.NETAMOUNTMAX,0);
        REC_XOUT_T100.CODUSR4              := RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2              := RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI          := RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI        := RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI      := RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI         := RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6              := RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV               := RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC          := RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN              := RL_T100.CODIBAN;
        REC_XOUT_T100.BACKAMOUNT           := NVL(RL_T100.BACKAMOUNT,0);
        REC_XOUT_T100.TOTPALLETS           := RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT          := RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC                := RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV         := RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.CODUSR5              := RL_T100.CODUSR5;
        REC_XOUT_T100.IDSURVEY             := RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE          := RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI      := NVL(RL_T100.FLGPROCESSEDEDI,0);
        REC_XOUT_T100.FLGEDI               := NVL(RL_T100.FLGEDI,0);
        REC_XOUT_T100.NUMESENZIONE         := RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2            := RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3            := RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4            := RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5            := RL_T100.DTEDELIV5;
        REC_XOUT_T100.IDROUTE              := RL_T100.IDROUTE;
        REC_XOUT_T100.NUMDOC               := RL_T100.NUMDOC;
        REC_XOUT_T100.DTECLOSE             := RL_T100.DTECLOSE;
        REC_XOUT_T100.RETURNAMOUNT         := RL_T100.RETURNAMOUNT;
        REC_XOUT_T100.GPSVALLATITUDE       := RL_T100.GPSVALLATITUDE;
        REC_XOUT_T100.GPSVALLONGITUDE      := RL_T100.GPSVALLONGITUDE;
        REC_XOUT_T100.DTENEW               := RL_T100.DTENEW;
        REC_XOUT_T100.CALCULATEDSPENTTIME  := RL_T100.CALCULATEDSPENTTIME;
        REC_XOUT_T100.CODPRINCIPALUSR      := RL_T100.CODPRINCIPALUSR;
        REC_XOUT_T100.Z_FLGPICKINGDONE     := RL_T100.Z_FLGPICKINGDONE;
        REC_XOUT_T100.Z_FLGCREATEBACKORDER := NVL(RL_T100.Z_FLGCREATEBACKORDER,0);
        REC_XOUT_T100.Z_NUMFIRSTORDER      := RL_T100.Z_NUMFIRSTORDER;
        REC_XOUT_T100.DTECRE               := RL_T100.DTECRE;
        REC_XOUT_T100.SM1_CODPROCESS       := PI_PROGR_H;
        REC_XOUT_T100.SM1_STATUS           := RL_T100.SM1_STATUS;
        REC_XOUT_T100.SM1_DTEPROCESS       := XSYSDATE;
        REC_XOUT_T100.ERP_DOCREFERENCE     := RL_T100.ERP_DOCREFERENCE;
        REC_XOUT_T100.IDDAY                := RL_T100.IDDAY;
        REC_XOUT_T100.CODLOCATION          := RL_T100.CODLOCATION;
        REC_XOUT_T100.FLGPROCESSEDASSET    := NVL(RL_T100.FLGPROCESSEDASSET,0);
        REC_XOUT_T100.CODADDR              := RL_T100.CODADDR;
        REC_XOUT_T100.Z_FLG_KD_ORD         := '0';
        -- Field is mandatory in XOUT_T100ORDHEAD_LOG
        REC_XOUT_T100.MOVED                := 0; 
      
        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
      
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T100,
                                         SQLCODE,
                                         VL_MESSAGE_H);
      END;
    
      BEGIN
      
        IF (VL_STATUS = 0) THEN
        
          VL_MESSAGE_D := 'Delete XOUT_T106UMCONV ';
          DElETE XOUT_T106ORDROW
           WHERE NUMORD = RL_T100.NUMORD
             AND CODUSR = RL_T100.CODUSR
             AND ERP_DTEPROCESS IS NULL;
        
          FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP
          
            VL_MESSAGE_H := 'Ord Row ' || RL_T106.NUMORD || '/' ||
                            RL_T106.CODUSR || '/' || RL_T106.NUMROW;
          
            VL_MESSAGE_D                       := 'Insert  XOUT_T106ORDROW ';
            REC_XOUT_T106.CODUSR               := RL_T106.CODUSR;
            REC_XOUT_T106.NUMORD               := RL_T106.NUMORD;
            REC_XOUT_T106.NUMROW               := RL_T106.NUMROW;
            REC_XOUT_T106.CODART               := RL_T106.CODART;
            REC_XOUT_T106.CODDIV               := RL_T106.CODDIV;
            REC_XOUT_T106.UMORD                := RL_T106.UMORD;
            REC_XOUT_T106.DESART               := RL_T106.PRODUCTDES;
            REC_XOUT_T106.QTYORD               := RL_T106.QTYORD;
            REC_XOUT_T106.QTYBCKORD            := NVL(RL_T106.QTYBCKORD,0);
            REC_XOUT_T106.QTYANN               := RL_T106.QTYANN;
            REC_XOUT_T106.QTYDEL               := RL_T106.QTYDEL;
            REC_XOUT_T106.UMINV                := RL_T106.UMINV;
            REC_XOUT_T106.QTYINV               := RL_T106.QTYINV;
            REC_XOUT_T106.CODTYPROW            := RL_T106.CODTYPROW;
            REC_XOUT_T106.CODLIST              := RL_T106.CODLIST;
            REC_XOUT_T106.DTEDELIV             := RL_T106.DTEDELIV;
            REC_XOUT_T106.DTEPROPDELIV         := RL_T106.DTEPROPDELIV;
            REC_XOUT_T106.CODSTATUS            := NVL(RL_T106.CODSTATUS,1);
            REC_XOUT_T106.CODSHIPPER           := RL_T106.CODSHIPPER;
            REC_XOUT_T106.NUMDOCREF            := RL_T106.NUMDOCREF;
            REC_XOUT_T106.DTEDOCREF            := RL_T106.DTEDOCREF;
            REC_XOUT_T106.GROSSAMOUNT          := RL_T106.GROSSAMOUNT;
            REC_XOUT_T106.NUMINV               := RL_T106.NUMINV;
            REC_XOUT_T106.NETAMOUNT            := RL_T106.NETAMOUNT;
            REC_XOUT_T106.DTEINV               := RL_T106.DTEINV;
            REC_XOUT_T106.TAXAMOUNT            := RL_T106.TAXAMOUNT;
            REC_XOUT_T106.VATAMOUNT            := RL_T106.VATAMOUNT;
            REC_XOUT_T106.INCREASEAMOUNT       := RL_T106.INCREASEAMOUNT;
            REC_XOUT_T106.DISCOUNTAMOUNT       := RL_T106.DISCOUNTAMOUNT;
            REC_XOUT_T106.GIFTAMOUNT           := RL_T106.GIFTAMOUNT;
            REC_XOUT_T106.ENDUSERPRICE         := RL_T106.ENDUSERPRICE;
            REC_XOUT_T106.CODAZCAPP            := RL_T106.CODAZCAPP;
            REC_XOUT_T106.FLGEFFBCKORD         := RL_T106.FLGEFFBCKORD;
            REC_XOUT_T106.CODBCKORDCAUSE       := RL_T106.CODBCKORDCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNT       := RL_T106.GROSSARTAMOUNT;
            REC_XOUT_T106.NETARTAMOUNT         := RL_T106.NETARTAMOUNT;
            REC_XOUT_T106.CODSRC               := RL_T106.CODSRC;
            REC_XOUT_T106.CODSRCREF            := RL_T106.CODSRCREF;
            REC_XOUT_T106.CODBENCAUSE          := RL_T106.CODBENCAUSE;
            REC_XOUT_T106.CODBENSUBCAUSE       := RL_T106.CODBENSUBCAUSE;
            REC_XOUT_T106.BENNOTE              := RL_T106.BENNOTE;
            REC_XOUT_T106.AZCTOAPPLY           := RL_T106.AZCTOAPPLY;
            REC_XOUT_T106.CODOPERATION         := RL_T106.CODOPERATION;
            REC_XOUT_T106.DISCOUNTAMOUNTOUTINV := RL_T106.DISCOUNTAMOUNTOUTINV;
            REC_XOUT_T106.CODACCAPP            := RL_T106.CODACCAPP;
            REC_XOUT_T106.CODTYPROWCAUSE       := RL_T106.CODTYPROWCAUSE;
            REC_XOUT_T106.CODARTCUST           := RL_T106.CODARTCUST;
            REC_XOUT_T106.QTYRESO              := RL_T106.QTYRESO;
            REC_XOUT_T106.NUMORDRESO           := RL_T106.NUMORDRESO;
            REC_XOUT_T106.CODBLCCAUSE          := RL_T106.CODBLCCAUSE;
            REC_XOUT_T106.CODARTKITREF         := RL_T106.CODARTKITREF;
            REC_XOUT_T106.NUMROWKITREF         := RL_T106.NUMROWKITREF;
            REC_XOUT_T106.CODCAUSEKIT          := RL_T106.CODCAUSEKIT;
            REC_XOUT_T106.NETARTAMOUNTTEO      := RL_T106.NETARTAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTTEO         := RL_T106.NETAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTMIN         := RL_T106.NETAMOUNTMIN;
            REC_XOUT_T106.NETAMOUNTMAX         := RL_T106.NETAMOUNTMAX;
            REC_XOUT_T106.NETDIFF              := RL_T106.NETDIFF;
            REC_XOUT_T106.COD_ABBINAMENTO_KIT  := RL_T106.COD_ABBINAMENTO_KIT;
            REC_XOUT_T106.NUMROWORIG           := RL_T106.NUMROWORIG;
            REC_XOUT_T106.FLGFIRSTSON          := RL_T106.FLGFIRSTSON;
            REC_XOUT_T106.NETARTAMOUNTCUST     := RL_T106.NETARTAMOUNTCUST;
            REC_XOUT_T106.NETARTAMOUNTCUST2    := RL_T106.NETARTAMOUNTCUST2;
            REC_XOUT_T106.GROSSARTAMOUNTCUST   := RL_T106.GROSSARTAMOUNTCUST;
            REC_XOUT_T106.NETAMOUNTCUST        := RL_T106.NETAMOUNTCUST;
            REC_XOUT_T106.QTYORDEDI            := RL_T106.QTYORDEDI;
            REC_XOUT_T106.CODEAN               := RL_T106.CODEAN;
            REC_XOUT_T106.UMORDEDI             := RL_T106.UMORDEDI;
            REC_XOUT_T106.NUMROWREF            := RL_T106.NUMROWREF;
            REC_XOUT_T106.FLGOMGPROMO          := RL_T106.FLGOMGPROMO;
            REC_XOUT_T106.GROSSARTAMOUNTORD    := RL_T106.GROSSARTAMOUNTORD;
            REC_XOUT_T106.GROSSARTAMOUNTDELTA  := RL_T106.GROSSARTAMOUNTDELTA;
            REC_XOUT_T106.FLGOMGDISCLIST       := RL_T106.FLGOMGDISCLIST;
            REC_XOUT_T106.CODCNVPDA            := RL_T106.CODCNVPDA;
            REC_XOUT_T106.DTEEVA               := RL_T106.DTEEVA;
            REC_XOUT_T106.CODPAYTRM            := RL_T106.CODPAYTRM;
            REC_XOUT_T106.CODPAYMOD            := RL_T106.CODPAYMOD;
            REC_XOUT_T106.NUMORDHOST           := NULL;
            REC_XOUT_T106.NUMROWHOST           := NULL;
            REC_XOUT_T106.CODMODSHIP           := RL_T106.CODMODSHIP;
            REC_XOUT_T106.CODMODDELIV          := RL_T106.CODMODDELIV;
            REC_XOUT_T106.CODWHS               := RL_T106.CODWHS;
            -- REC_XOUT_T106.CODWHSDELIV          := RL_T106.CODWHSDELIV; Spool file considers data from header T100 table
            REC_XOUT_T106.DTEPRICE             := RL_T106.DTEPRICE;
            REC_XOUT_T106.DTEDELIVTO           := RL_T106.DTEDELIVTO;
            REC_XOUT_T106.CODROWGROUP          := RL_T106.CODROWGROUP;
            REC_XOUT_T106.NETAMOUNTGIFT        := RL_T106.NETAMOUNTGIFT;
            REC_XOUT_T106.NETARTAMOUNTEDI      := RL_T106.NETARTAMOUNTEDI;
            REC_XOUT_T106.GROSSARTAMOUNTEDI    := RL_T106.GROSSARTAMOUNTEDI;
            REC_XOUT_T106.QTYORDORIG           := RL_T106.QTYORDORIG;
            REC_XOUT_T106.QTYALLOCATED         := RL_T106.QTYALLOCATED;
            REC_XOUT_T106.RETURNAMOUNT         := RL_T106.RETURNAMOUNT;
            REC_XOUT_T106.NETARTAMOUNTUMORD    := RL_T106.NETARTAMOUNTUMORD;
            REC_XOUT_T106.CODQTYMODCAUSE       := RL_T106.CODQTYMODCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNTUMORD  := RL_T106.GROSSARTAMOUNTUMORD;
            REC_XOUT_T106.Z_DTEXPIRE           := RL_T106.Z_DTEXPIRE;
            -- REC_XOUT_T106.DTECRE            := RL_T106.DTECRE; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_CODPROCESS       := REC_XOUT_T100.SM1_CODPROCESS;
            -- REC_XOUT_T106.SM1_STATUS        := RL_T106.SM1_STATUS; Spool file considers data from header T100 table
            REC_XOUT_T106.SM1_DTEPROCESS       := REC_XOUT_T100.SM1_DTEPROCESS;
            -- REC_XOUT_T106.ERP_DOCREFERENCE  := RL_T106.ERP_DOCREFERENCE; Spool file considers data from header T100 table
          
            INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;
          
            VL_INS_T106          := VL_INS_T106 + 1;
            VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
          
          END LOOP;
          VL_COUNT_XOUT_T106   := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
          VL_COUNT_XOUT_T106_P := 0;
        
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T106,
                                         SQLCODE,
                                         VL_MESSAGE_H);
        
      END;
    
      IF VL_STATUS = 0 THEN
      
        VL_INS_T100 := VL_INS_T100 + 1;
        UPDATE T100ORDHEAD
           SET DTELCK       = NULL,
               IDSESSIONLCK = NULL,
               CODUSRLCK    = NULL,
               NUMORDCUST   = TRIM(NUMORD) || TRIM(CODUSR),
               DTETOHOST    = XSYSDATE
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      ELSE
      
        ROLLBACK;
        UPDATE T100ORDHEAD
           SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      END IF;
    
    END LOOP;
    COMMIT;

    -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T106,
                             0,
                             VL_COUNT_XOUT_T106,
                             VL_INS_T106,
                             VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T100,
                             0,
                             VL_COUNT_XOUT_T100,
                             VL_INS_T100,
                             VL_COUNT_XOUT_T100 - VL_INS_T100);

    PO_MSG    := VL_INS_T100 || ' Orders Exported';
    PO_STATUS := VL_INS_T100;

  EXCEPTION
    WHEN EX_EXIT THEN
    
      ROLLBACK;
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := -1;
    
    WHEN OTHERS THEN
    
      ROLLBACK;
      UPDATE T100ORDHEAD
         SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
       WHERE CODUSRLCK = C_SYSUSR
         AND IDSESSIONLCK = PI_SESSION_ID;
      COMMIT;
    
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := VL_STATUS;
    
  END EXP_T10X_ORDERS_SYG_80;

  /*============================================================================*\
  /* 
     Name : EXP_T10X_CREDIT_ORDERS_SYG
     Exports SM1 tables :
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail

      Staging Area (SSA) tables :
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic :
      •  Exports vanload request order header and rows for division SYG
      •  Exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  Deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

      Error handling :
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  Error on record, header and all details are discarded

      Input parameters :     PI_PROGR_H:           unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                             PI_SESSION_ID:        unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG - message of error if procedure exit with error
                             PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                             PI_MASSIVE_EXP_DATE:  NULL - normal export NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                             PI_CODE_CHAR_A:       division
  */
  /*============================================================================ */
  PROCEDURE EXP_T10X_CREDIT_ORDERS_SYG(PI_PROGR_H          IN NUMBER,
                                       PI_SESSION_ID       IN NUMBER,
                                       PI_DOCUMENTKEY      IN VARCHAR2,
                                       PI_MASSIVE_EXP_DATE IN DATE,
                                       PI_CODDIV           IN VARCHAR2,
                                       PO_MSG              OUT VARCHAR,
                                       PO_STATUS           OUT NUMBER) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT T100.*, TA0300.CODSALESMAN
        FROM T100ORDHEAD T100
      
        LEFT JOIN TA0300SELLINGDAY TA0300
          ON TA0300.CODDIV = T100.CODDIV
         AND TA0300.IDDAY = T100.IDDAY
      
        WHERE T100.IDSESSIONLCK IS NOT NULL 
        AND T100.IDSESSIONLCK = PI_SESSION_ID
      
       ORDER BY T100.NUMORD, T100.CODUSR ASC;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD NUMBER, CI_CODUSR VARCHAR2) IS
      SELECT T106.*,
             T060.DESART || '/' || T060.DESART2 PRODUCTDES
        FROM T106ORDROW T106
        
        JOIN T060ARTICLE T060
          ON T060.CODART = T106.CODART
         AND T060.CODDIV = T106.CODDIV
        
       WHERE T106.NUMORD = CI_NUMORD
         AND T106.CODUSR = CI_CODUSR
         AND T106.CODTYPROW IN ('0', '1')
         AND T106.QTYORD > 0;

    -- -----------------------------------------
    -- Cursor on main Customer table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM ZQEXP_T100CREDITORDER_SYG_C
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK != PI_SESSION_ID
         and DOCUMENTKEY = nvl(PI_DOCUMENTKEY, DOCUMENTKEY)
         and NVL(DTEMOD, DTECRE) >
             NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
       ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106      NUMBER := 0;
    VL_COUNT_XOUT_T106   NUMBER := 0;
    VL_COUNT_XOUT_T106_P NUMBER := 0;
    VL_INS_T106          NUMBER := 0;

    REC_XOUT_T100 XOUT_T100ORDHEAD%ROWTYPE := NULL;
    REC_XOUT_T106 XOUT_T106ORDROW%ROWTYPE := NULL;

    VL_STATUS   NUMBER := 0;
    VL_STEP     NUMBER := 0;
    --
    EX_EXIT EXCEPTION;
    --
    
  BEGIN
      
    

    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER HEAD',
                                                'EXPORT CREDIT ORDERS --> T100ORDHEAD',
                                                0,
                                                NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER ROWS',
                                                'EXPORT CREDIT ORDERS --> T106ORDROW',
                                                0,
                                                NULL);

    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
    
      VL_MESSAGE_D := 'T100ORDHEAD';
      UPDATE T100ORDHEAD T
         SET T.IDSESSIONLCK = PI_SESSION_ID,
             T.CODUSRLCK    = C_SYSUSR,
             T.DTELCK       = XSYSDATE
       WHERE t.DOCUMENTKEY = nvl(PI_DOCUMENTKEY, T.DOCUMENTKEY)
         and T.CODDIV = nvl(PI_CODDIV, T.coddiv)
         and (T.NUMORD, T.CODUSR, T.CODDIV) IN
             (SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100CREDITORDER_SYG_C Q
               WHERE Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE, Q.DTEMOD));
      VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VL_MESSAGE_H := 'Error while Locking: ' || VL_MESSAGE_D;
        RAISE EX_EXIT;
    END;

    -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
    
      VL_MESSAGE_H := 'Unable to Export ' || VL_MESSAGE_D || '.Numord=' ||
                      R_LOCKED.NUMORD || 'Codusr = ' || R_LOCKED.CODUSR ||
                      ' Record locked by user ' || R_LOCKED.CODUSRLCK ||
                      ' since ' ||
                      to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);
    
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
    END LOOP;

    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
    
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF (MOD(VL_STEP, 1000) = 0) THEN
        PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
      --
      VL_STATUS    := 0;
      VL_MESSAGE_H := 'Order: ' || RL_T100.NUMORD || '/' || RL_T100.CODUSR;
      
        
      --
      BEGIN
        --- delete old record for specific ordder type and status from xout_t100
        
        --- HEAD T100
        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table
        REC_XOUT_T100.NUMORD               := RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR               := RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR              := RL_T100.CODEUSR;
        REC_XOUT_T100.CODSALESMAN          := RL_T100.CODSALESMAN;
        REC_XOUT_T100.CODTYPORD            := RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS            := RL_T100.CODSTATUS;
        REC_XOUT_T100.CODDIV               := RL_T100.CODDIV;
        REC_XOUT_T100.CODBLCCAUSE          := RL_T100.CODBLCCAUSE;
        REC_XOUT_T100.DTEORD               := RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV             := RL_T100.DTEDELIV;
        REC_XOUT_T100.CODTYPDELIV          := RL_T100.CODTYPDELIV;
        REC_XOUT_T100.DTEEVA               := RL_T100.DTEEVA;
        REC_XOUT_T100.CODPAYTRM            := RL_T100.CODPAYTRM;
        REC_XOUT_T100.CODPAYMOD            := RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODCUSTDELIV         := RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODVATMGMT           := RL_T100.CODVATMGMT;
        REC_XOUT_T100.CODCUSTINV           := RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODLIST              := RL_T100.CODLIST;
        REC_XOUT_T100.CODCUR               := RL_T100.CODCUR;
        REC_XOUT_T100.NUMORDREF            := RL_T100.NUMORD;
        REC_XOUT_T100.NUMORDHOST           := RL_T100.NUMORDHOST;
        REC_XOUT_T100.NUMORDCUST           := TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODUSR);
        REC_XOUT_T100.DTEORDCUST           := RL_T100.DTEORDCUST;
        REC_XOUT_T100.CODASSORTMENT        := RL_T100.CODASSORTMENT;
        REC_XOUT_T100.CODCANVASS           := RL_T100.CODCANVASS;
        REC_XOUT_T100.CODMODSHIP           := RL_T100.CODMODSHIP;
        REC_XOUT_T100.CODMODDELIV          := RL_T100.CODMODDELIV;
        REC_XOUT_T100.CODAGREEMENT         := RL_T100.CODAGREEMENT;
        REC_XOUT_T100.OBJID                := RL_T100.OBJID;
        REC_XOUT_T100.DESAGREEMENT         := RL_T100.DESAGREEMENT;
        REC_XOUT_T100.CODUSRAUT            := RL_T100.CODUSRAUT;
        REC_XOUT_T100.CODAGREECLASS        := RL_T100.CODAGREECLASS;
        REC_XOUT_T100.DTEAUT               := RL_T100.DTEAUT;
        REC_XOUT_T100.CODTYPAUT            := RL_T100.CODTYPAUT;
        REC_XOUT_T100.DESAUT               := RL_T100.DESAUT;
        REC_XOUT_T100.DTETOSERVER          := RL_T100.DTETOSERVER;
        REC_XOUT_T100.DTETOHOST            := RL_T100.DTETOHOST;
        REC_XOUT_T100.GROSSAMOUNT          := RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT            := RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT            := RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT            := RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT       := RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT       := RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT           := RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.DTECRE               := RL_T100.DTECRE;
        REC_XOUT_T100.DTEMOD               := RL_T100.DTEMOD;
        REC_XOUT_T100.DTELCK               := RL_T100.DTELCK;
        REC_XOUT_T100.CODUSRLCK            := RL_T100.CODUSRLCK;
        REC_XOUT_T100.CODUSRMOD            := RL_T100.CODUSRMOD;
        REC_XOUT_T100.FLGANN               := RL_T100.FLGANN;
        REC_XOUT_T100.PGMMODCL             := RL_T100.PGMMODCL;
        REC_XOUT_T100.PGMMODDB             := RL_T100.PGMMODDB;
        REC_XOUT_T100.CODABI               := RL_T100.CODABI;
        REC_XOUT_T100.CODCAB               := RL_T100.CODCAB;
        REC_XOUT_T100.DESBAN               := RL_T100.DESBAN;
        REC_XOUT_T100.DESBRA               := RL_T100.DESBRA;
        REC_XOUT_T100.DESADDR              := RL_T100.DESADDR;
        REC_XOUT_T100.DESLOC               := RL_T100.DESLOC;
        REC_XOUT_T100.DESPRV               := RL_T100.DESPRV;
        REC_XOUT_T100.QTYTOT               := RL_T100.QTYTOT;
        REC_XOUT_T100.CODPRV               := RL_T100.CODPRV;
        REC_XOUT_T100.UMQTYTOT             := RL_T100.UMQTYTOT;
        REC_XOUT_T100.CODACCOUNT           := RL_T100.CODACCOUNT;
        REC_XOUT_T100.FLGRETURN            := RL_T100.FLGRETURN;
        REC_XOUT_T100.FLGHOSTED            := RL_T100.FLGHOSTED;
        REC_XOUT_T100.FLGCONFIRMED         := RL_T100.FLGCONFIRMED;
        REC_XOUT_T100.IDSESSIONLCK         := RL_T100.IDSESSIONLCK;
        REC_XOUT_T100.CODWHS               := RL_T100.CODWHS;
        REC_XOUT_T100.CODSHIPPER           := RL_T100.CODSHIPPER;
        REC_XOUT_T100.CODAZCAPP            := RL_T100.CODAZCAPP;
        REC_XOUT_T100.CODAZCBEN            := RL_T100.CODAZCBEN;
        REC_XOUT_T100.DTEPRICE             := RL_T100.DTEPRICE;
        REC_XOUT_T100.CODTYPSALE           := RL_T100.CODTYPSALE;
        REC_XOUT_T100.FLGCHECKPROMO        := RL_T100.FLGCHECKPROMO;
        REC_XOUT_T100.CODAGREETYPE         := RL_T100.CODAGREETYPE;
        REC_XOUT_T100.CODSTATUSMAN         := RL_T100.CODSTATUSMAN;
        REC_XOUT_T100.DISCOUNTAMOUNTOUTINV := RL_T100.DISCOUNTAMOUNTOUTINV;
        REC_XOUT_T100.CODTYPORDCUST        := RL_T100.CODTYPORDCUST;
        REC_XOUT_T100.CODUSR3              := RL_T100.CODUSR3;
        REC_XOUT_T100.DTEDELIVTO           := RL_T100.DTEDELIVTO;
        REC_XOUT_T100.CODCIN               := RL_T100.CODCIN;
        REC_XOUT_T100.FLGUMORD2            := RL_T100.FLGUMORD2;
        REC_XOUT_T100.NETAMOUNTTEO         := RL_T100.NETAMOUNTTEO;
        REC_XOUT_T100.NETAMOUNTMIN         := RL_T100.NETAMOUNTMIN;
        REC_XOUT_T100.NETAMOUNTMAX         := RL_T100.NETAMOUNTMAX;
        REC_XOUT_T100.CODUSR4              := RL_T100.CODUSR4;
        REC_XOUT_T100.CODUSR2              := RL_T100.CODUSR2;
        REC_XOUT_T100.CODBUYEREDI          := RL_T100.CODBUYEREDI;
        REC_XOUT_T100.CODCUSTINVEDI        := RL_T100.CODCUSTINVEDI;
        REC_XOUT_T100.CODCUSTDELIVEDI      := RL_T100.CODCUSTDELIVEDI;
        REC_XOUT_T100.CODSELLEREDI         := RL_T100.CODSELLEREDI;
        REC_XOUT_T100.CODUSR6              := RL_T100.CODUSR6;
        REC_XOUT_T100.CODPDV               := RL_T100.CODPDV;
        REC_XOUT_T100.CODCUSTCONC          := RL_T100.CODCUSTCONC;
        REC_XOUT_T100.CODIBAN              := RL_T100.CODIBAN;
        REC_XOUT_T100.CODUSRCRE            := RL_T100.CODUSRCRE;
        REC_XOUT_T100.BACKAMOUNT           := RL_T100.BACKAMOUNT;
        REC_XOUT_T100.TOTPALLETS           := RL_T100.TOTPALLETS;
        REC_XOUT_T100.GROSSWEIGHT          := RL_T100.GROSSWEIGHT;
        REC_XOUT_T100.TOTMC                := RL_T100.TOTMC;
        REC_XOUT_T100.DTEPROPDELIV         := RL_T100.DTEPROPDELIV;
        REC_XOUT_T100.DOCUMENTKEY          := RL_T100.DOCUMENTKEY;
        REC_XOUT_T100.CODUSR5              := RL_T100.CODUSR5;
        REC_XOUT_T100.CODUSRMODREAL        := RL_T100.CODUSRMODREAL;
        REC_XOUT_T100.CODUSRCREREAL        := RL_T100.CODUSRCREREAL;
        REC_XOUT_T100.IDSURVEY             := RL_T100.IDSURVEY;
        REC_XOUT_T100.CODCUSTSALE          := RL_T100.CODCUSTSALE;
        REC_XOUT_T100.FLGPROCESSEDEDI      := RL_T100.FLGPROCESSEDEDI;
        REC_XOUT_T100.FLGEDI               := RL_T100.FLGEDI;
        REC_XOUT_T100.NUMESENZIONE         := RL_T100.NUMESENZIONE;
        REC_XOUT_T100.DTEDELIV2            := RL_T100.DTEDELIV2;
        REC_XOUT_T100.DTEDELIV3            := RL_T100.DTEDELIV3;
        REC_XOUT_T100.DTEDELIV4            := RL_T100.DTEDELIV4;
        REC_XOUT_T100.DTEDELIV5            := RL_T100.DTEDELIV5;
        --
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;
        -- Field is mandatory in XOUT_T100ORDHEAD_LOG
        REC_XOUT_T100.MOVED                := 0;
        
        
      
        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
      
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T100,
                                         SQLCODE,
                                         VL_MESSAGE_H);
      END;
    
      BEGIN
        -- ORDER ROWS T106
        --
        
           
           
        IF (VL_STATUS = 0) THEN
          FOR RL_T106 IN CL_T106(RL_T100.NUMORD, RL_T100.CODUSR) LOOP
          
            VL_MESSAGE_H := 'Ord Row ' || RL_T106.NUMORD || '/' ||
                            RL_T106.CODUSR || '/' || RL_T106.NUMROW;
          
            VL_MESSAGE_D                       := 'Insert  XOUT_T106ORDROW ';
            REC_XOUT_T106.CODUSR               := RL_T106.CODUSR;
            REC_XOUT_T106.NUMORD               := RL_T106.NUMORD;
            REC_XOUT_T106.NUMROW               := RL_T106.NUMROW;
            REC_XOUT_T106.CODART               := GET_PRODUCT_CODE(RL_T106.CODDIV , RL_T106.CODART);
            REC_XOUT_T106.CODDIV               := RL_T106.CODDIV;
            REC_XOUT_T106.UMORD                := RL_T106.UMORD;
            REC_XOUT_T106.DESART               := RL_T106.PRODUCTDES;
            REC_XOUT_T106.QTYORD               := RL_T106.QTYORD;
            REC_XOUT_T106.QTYBCKORD            := RL_T106.QTYBCKORD;
            REC_XOUT_T106.QTYANN               := RL_T106.QTYANN;
            REC_XOUT_T106.QTYDEL               := RL_T106.QTYDEL;
            REC_XOUT_T106.UMINV                := RL_T106.UMINV;
            REC_XOUT_T106.QTYINV               := RL_T106.QTYINV;
            REC_XOUT_T106.CODTYPROW            := RL_T106.CODTYPROW;
            REC_XOUT_T106.CODLIST              := RL_T106.CODLIST;
            REC_XOUT_T106.DTEDELIV             := RL_T106.DTEDELIV;
            REC_XOUT_T106.DTEPROPDELIV         := RL_T106.DTEPROPDELIV;
            REC_XOUT_T106.CODSTATUS            := RL_T106.CODSTATUS;
            REC_XOUT_T106.CODSHIPPER           := RL_T106.CODSHIPPER;
            REC_XOUT_T106.OBJID                := RL_T106.OBJID;
            REC_XOUT_T106.NUMDOCREF            := RL_T106.NUMDOCREF;
            REC_XOUT_T106.DTEDOCREF            := RL_T106.DTEDOCREF;
            REC_XOUT_T106.GROSSAMOUNT          := RL_T106.GROSSAMOUNT;
            REC_XOUT_T106.NUMINV               := RL_T106.NUMINV;
            REC_XOUT_T106.NETAMOUNT            := RL_T106.NETAMOUNT;
            REC_XOUT_T106.DTEINV               := RL_T106.DTEINV;
            REC_XOUT_T106.TAXAMOUNT            := RL_T106.TAXAMOUNT;
            REC_XOUT_T106.VATAMOUNT            := RL_T106.VATAMOUNT;
            REC_XOUT_T106.INCREASEAMOUNT       := RL_T106.INCREASEAMOUNT;
            REC_XOUT_T106.DISCOUNTAMOUNT       := RL_T106.DISCOUNTAMOUNT / RL_T106.QTYORD; 
            REC_XOUT_T106.GIFTAMOUNT           := RL_T106.GIFTAMOUNT;
            REC_XOUT_T106.ENDUSERPRICE         := RL_T106.ENDUSERPRICE;
            REC_XOUT_T106.CODAZCAPP            := RL_T106.CODAZCAPP;
            REC_XOUT_T106.FLGEFFBCKORD         := RL_T106.FLGEFFBCKORD;
            REC_XOUT_T106.CODBCKORDCAUSE       := RL_T106.CODBCKORDCAUSE;
            REC_XOUT_T106.GROSSARTAMOUNT       := RL_T106.GROSSARTAMOUNT;
            REC_XOUT_T106.NETARTAMOUNT         := RL_T106.NETARTAMOUNT;
            REC_XOUT_T106.CODSRC               := RL_T106.CODSRC;
            REC_XOUT_T106.CODSRCREF            := RL_T106.CODSRCREF;
            REC_XOUT_T106.CODBENCAUSE          := RL_T106.CODBENCAUSE;
            REC_XOUT_T106.CODBENSUBCAUSE       := RL_T106.CODBENSUBCAUSE;
            REC_XOUT_T106.BENNOTE              := RL_T106.BENNOTE;
            REC_XOUT_T106.AZCTOAPPLY           := RL_T106.AZCTOAPPLY;
            REC_XOUT_T106.CODOPERATION         := RL_T106.CODOPERATION;
            REC_XOUT_T106.DISCOUNTAMOUNTOUTINV := RL_T106.DISCOUNTAMOUNTOUTINV;
            REC_XOUT_T106.CODACCAPP            := RL_T106.CODACCAPP;
            REC_XOUT_T106.CODTYPROWCAUSE       := RL_T106.CODTYPROWCAUSE;
            REC_XOUT_T106.CODARTCUST           := RL_T106.CODARTCUST;
            REC_XOUT_T106.QTYRESO              := RL_T106.QTYRESO;
            REC_XOUT_T106.NUMORDRESO           := RL_T106.NUMORDRESO;
            REC_XOUT_T106.CODBLCCAUSE          := RL_T106.CODBLCCAUSE;
            REC_XOUT_T106.CODARTKITREF         := RL_T106.CODARTKITREF;
            REC_XOUT_T106.NUMROWKITREF         := RL_T106.NUMROWKITREF;
            REC_XOUT_T106.CODCAUSEKIT          := RL_T106.CODCAUSEKIT;
            REC_XOUT_T106.NETARTAMOUNTTEO      := RL_T106.NETARTAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTTEO         := RL_T106.NETAMOUNTTEO;
            REC_XOUT_T106.NETAMOUNTMIN         := RL_T106.NETAMOUNTMIN;
            REC_XOUT_T106.NETAMOUNTMAX         := RL_T106.NETAMOUNTMAX;
            REC_XOUT_T106.NETDIFF              := RL_T106.NETDIFF;
            REC_XOUT_T106.COD_ABBINAMENTO_KIT  := RL_T106.COD_ABBINAMENTO_KIT;
            REC_XOUT_T106.NUMROWORIG           := RL_T106.NUMROWORIG;
            REC_XOUT_T106.FLGFIRSTSON          := RL_T106.FLGFIRSTSON;
            REC_XOUT_T106.NETARTAMOUNTCUST     := RL_T106.NETARTAMOUNTCUST;
            REC_XOUT_T106.NETARTAMOUNTCUST2    := RL_T106.NETARTAMOUNTCUST2;
            REC_XOUT_T106.GROSSARTAMOUNTCUST   := RL_T106.GROSSARTAMOUNTCUST;
            REC_XOUT_T106.NETAMOUNTCUST        := RL_T106.NETAMOUNTCUST;
            REC_XOUT_T106.QTYORDEDI            := RL_T106.QTYORDEDI;
            REC_XOUT_T106.CODEAN               := RL_T106.CODEAN;
            REC_XOUT_T106.UMORDEDI             := RL_T106.UMORDEDI;
            REC_XOUT_T106.NUMROWREF            := RL_T106.NUMROWREF;
            REC_XOUT_T106.FLGOMGPROMO          := RL_T106.FLGOMGPROMO;
            REC_XOUT_T106.GROSSARTAMOUNTORD    := RL_T106.GROSSARTAMOUNTORD;
            REC_XOUT_T106.GROSSARTAMOUNTDELTA  := RL_T106.GROSSARTAMOUNTDELTA;
            REC_XOUT_T106.FLGOMGDISCLIST       := RL_T106.FLGOMGDISCLIST;
            REC_XOUT_T106.CODCNVPDA            := RL_T106.CODCNVPDA;
            REC_XOUT_T106.DTEEVA               := RL_T106.DTEEVA;
            REC_XOUT_T106.CODPAYTRM            := RL_T106.CODPAYTRM;
            REC_XOUT_T106.CODPAYMOD            := RL_T106.CODPAYMOD;
            REC_XOUT_T106.NUMORDHOST           := RL_T106.NUMORDHOST;
            REC_XOUT_T106.NUMROWHOST           := RL_T106.NUMROWHOST;
            REC_XOUT_T106.CODMODSHIP           := RL_T106.CODMODSHIP;
            REC_XOUT_T106.CODMODDELIV          := RL_T106.CODMODDELIV;
            REC_XOUT_T106.CODWHS               := RL_T106.CODWHS;
            REC_XOUT_T106.DTEPRICE             := RL_T106.DTEPRICE;
            REC_XOUT_T106.DTEDELIVTO           := RL_T106.DTEDELIVTO;
            REC_XOUT_T106.CODROWGROUP          := RL_T106.CODROWGROUP;
            REC_XOUT_T106.NETAMOUNTGIFT        := RL_T106.NETAMOUNTGIFT;
            REC_XOUT_T106.NETARTAMOUNTEDI      := RL_T106.NETARTAMOUNTEDI;
            REC_XOUT_T106.GROSSARTAMOUNTEDI    := RL_T106.GROSSARTAMOUNTEDI;
            --
            REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
            REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;
          
            INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;
          
            VL_INS_T106          := VL_INS_T106 + 1;
            VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
            
          END LOOP;
          
          VL_COUNT_XOUT_T106   := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
          VL_COUNT_XOUT_T106_P := 0;
        END IF;
        --
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T106,
                                         SQLCODE,
                                         VL_MESSAGE_H);
        
      END;
    
      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
      
        VL_INS_T100 := VL_INS_T100 + 1;
        UPDATE T100ORDHEAD
           SET DTETOHOST    = REC_XOUT_T100.SM1_DTEPROCESS,
               DTELCK       = NULL,
               IDSESSIONLCK = NULL,
               CODUSRLCK    = NULL
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      ELSE
      
        UPDATE T100ORDHEAD
           SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      END IF;
    
    END LOOP;
    COMMIT;
    -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T106,
                             0,
                             VL_COUNT_XOUT_T106,
                             VL_INS_T106,
                             VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T100,
                             0,
                             VL_COUNT_XOUT_T100,
                             VL_INS_T100,
                             VL_COUNT_XOUT_T100 - VL_INS_T100);

    PO_MSG    := VL_INS_T100 || ' Orders Exported';
    PO_STATUS := VL_INS_T100;

  EXCEPTION
    WHEN EX_EXIT THEN
    
      ROLLBACK;
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := -1;
    
    WHEN OTHERS THEN
    
      ROLLBACK;
      UPDATE T100ORDHEAD
         SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
       WHERE CODUSRLCK = C_SYSUSR
         AND IDSESSIONLCK = PI_SESSION_ID;
      COMMIT;
    
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := VL_STATUS;
    
  END EXP_T10X_CREDIT_ORDERS_SYG;

  /*============================================================================*\
  /* Name: EXP_T10X_CASH_ORDERS_SYG (SUMMARISED)
     Source View Name  Used To Lock : ZQEXP_T100CREDITORDER_C
     Exports SM1 tables:
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail

      Staging Area (SSA) tables
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  NO FILTER IS APPLIED ON ORDER STATUS IT HAS TO BE CUSTOMIZED
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

      Error handling:
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  Error on record, header and all details are discarded

       Input parameters :     PI_PROGR_H          - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                              PI_SESSION_ID       - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                              PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                              PI_MASSIVE_EXP_DATE:  NULL - normal export
                                                    NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                              PI_CODE_CHAR_A : division
  ============================================================================ */
  PROCEDURE EXP_T10X_CASH_ORDERS_SYG(PI_PROGR_H          IN NUMBER,
                                     PI_SESSION_ID       IN NUMBER,
                                     PI_DOCUMENTKEY      IN VARCHAR2,
                                     PI_MASSIVE_EXP_DATE IN DATE,
                                     PI_CODDIV           IN VARCHAR2,
                                     PO_MSG              OUT VARCHAR,
                                     PO_STATUS           OUT NUMBER) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      SELECT Max(T.NUMORD) NUMORD,
             MAX(T.CODUSR) CODUSR, --LOGGED USER
             TA0300.CODSALESMAN,
             T.CODEUSR CODEUSR, --SALESMN
             T.CODTYPORD CODTYPORD,
             T.CODDIV,
             TRUNC(T.DTEORD) DTEORD,
             TRUNC(T.DTEDELIV) DTEDELIV, --ORDER AND DELIVERY DATE WILL BE SAME
             T.CODPAYTRM,
             T.CODPAYMOD,
             MAX(T.CODSTATUS) CODSTATUS,
             UD.CODPARTY CODCUSTDELIV, --T.CODCUSTDELIV,
             T.CODCUR,
             Sum(T.GROSSAMOUNT) GROSSAMOUNT,
             Sum(T.NETAMOUNT) NETAMOUNT,
             Sum(T.TAXAMOUNT) TAXAMOUNT,
             Sum(T.VATAMOUNT) VATAMOUNT,
             Sum(T.INCREASEAMOUNT) INCREASEAMOUNT,
             Sum(T.DISCOUNTAMOUNT) DISCOUNTAMOUNT,
             Sum(T.GIFTAMOUNT) GIFTAMOUNT,
             MAX(T.CODWHS) CODWHS,
             Sum(T.TOTPALLETS) TOTPALLETS,
             Sum(T.RETURNAMOUNT) RETURNAMOUNT,
             UD.CODPARTY CODCUSTINV
        From T100ORDHEAD T
      
       Inner Join T031USERDIV UD
          On T.CODEUSR = UD.CODUSR
         And T.CODDIV = UD.CODDIV
      
        LEFT JOIN TA0300SELLINGDAY TA0300
          ON TA0300.CODDIV = T.CODDIV
         AND TA0300.IDDAY = T.IDDAY
      
       WHERE T.IDSESSIONLCK IS NOT NULL
         AND T.IDSESSIONLCK = PI_SESSION_ID
         AND T.CODTYPORD IN ('70', '80') -- ADDED BY VIKAS .  INVOICE AND DELIVERY ORDERS 
         AND T.CODSTATUS IN ('11', '6') -- INVOICED INVOICES AND DELIVERED DELIVERY ORDERS
      
       Group By TA0300.CODSALESMAN,
                T.CODEUSR,
                T.CODDIV,
                TRUNC(T.DTEORD),
                TRUNC(T.DTEDELIV),
                T.CODCUR,
                T.CODPAYTRM,
                T.CODPAYMOD,
                T.CODTYPORD,
                UD.CODPARTY;

    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD    NUMBER,
                   CI_CODEUSR   VARCHAR2,
                   CI_CODDIV    VARCHAR2,
                   CI_DTEORD    DATE,
                   CI_DTEDELIV  DATE,
                   CI_CODCUR    VARCHAR2,
                   CI_CODPAYTRM VARCHAR2,
                   CI_CODPAYMOD VARCHAR2) IS
      SELECT CODUSR,
             CI_NUMORD NUMORD,
             T.CODART,
             T060.DESART || '/' || T060.DESART2 PRODUCTDES,
             CI_CODDIV CODDIV,
             UMORD,
             SUM(QTYORD) QTYORD,
             UMINV,
             SUM(QTYINV) QTYINV,
             CODTYPROW,
             MAX(T.CODSTATUS) CODSTATUS,
             SUM(GROSSAMOUNT) GROSSAMOUNT,
             SUM(NETAMOUNT) NETAMOUNT,
             (DISCOUNTAMOUNT / QTYINV) DISCOUNTAMOUNT,
             SUM(GIFTAMOUNT) GIFTAMOUNT,
             GROSSARTAMOUNT, --GROSS UNIT PRICE 
             NETARTAMOUNT, --NET UNIT PRICE
             max(CODBENCAUSE) CODBENCAUSE,
             MAX(CODBENSUBCAUSE) CODBENSUBCAUSE
      
        FROM (SELECT NUMORD
                FROM T100ORDHEAD
               WHERE IDSESSIONLCK IS NOT NULL
                 AND IDSESSIONLCK = PI_SESSION_ID
                 AND CODEUSR = CI_CODEUSR
                 AND CODDIV = CI_CODDIV
                 AND TRUNC(DTEORD) = CI_DTEORD
                 AND TRUNC(DTEDELIV) = CI_DTEDELIV
                 AND CODCUR = CI_CODCUR
                 AND CODPAYTRM = CI_CODPAYTRM
                 AND CODPAYMOD = CI_CODPAYMOD) ORDHEAD
      
       INNER JOIN T106ORDROW T
          ON T.NUMORD = ORDHEAD.NUMORD
         AND CODTYPROW IN ('0', '1')
      
        JOIN T060ARTICLE T060
          ON T060.CODART = T.CODART
         AND T060.CODDIV = T.CODDIV
         
       WHERE NVL(QTYINV, 0) != 0 -- QTYINV CAN'T BE NULL OR ZERO SINCE IT IS USED AS A DIVISOR IN DISCOUNTAMOUNT FIELD 
      
       GROUP BY CODUSR,
                T.CODART,
                T060.DESART || '/' || T060.DESART2,
                T.CODDIV,
                UMORD,
                UMINV,
                CODTYPROW,
                NETARTAMOUNT, --NET UNIT PRICE
                GROSSARTAMOUNT, -- GROSS UNIT PRICE
                (DISCOUNTAMOUNT / QTYINV);

    -- -----------------------------------------
    -- Cursor on main Order table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM ZQEXP_T100CASHORDER_SYG_C
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK != PI_SESSION_ID
         and DOCUMENTKEY = nvl(PI_DOCUMENTKEY, DOCUMENTKEY)
         and NVL(DTEMOD, DTECRE) >
             NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
       ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H VARCHAR2(2000) := 'Error while exporting ORDERS T10X';
    VL_MESSAGE_D VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106      NUMBER := 0;
    VL_COUNT_XOUT_T106   NUMBER := 0;
    VL_COUNT_XOUT_T106_P NUMBER := 0;
    VL_INS_T106          NUMBER := 0;

    REC_XOUT_T100 XOUT_T100ORDHEAD%ROWTYPE := NULL;
    REC_XOUT_T106 XOUT_T106ORDROW%ROWTYPE := NULL;

    VL_STATUS      NUMBER := 0;
    VL_STEP        NUMBER := 0;
    VL_NUMROW      NUMBER := 0;
    num_total_rows NUMBER := 50;
    --
    EX_EXIT EXCEPTION;
    --
  BEGIN

    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER HEAD',
                                                'EXPORT CASH ORDERS --> T100ORDHEAD',
                                                0,
                                                NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER ROWS',
                                                'EXPORT CASH ORDERS --> T106ORDROW',
                                                0,
                                                NULL);

    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
    
      VL_MESSAGE_D := 'T100ORDHEAD';
      UPDATE T100ORDHEAD T
         SET T.IDSESSIONLCK = PI_SESSION_ID,
             T.CODUSRLCK    = C_SYSUSR,
             T.DTELCK       = XSYSDATE
       WHERE t.DOCUMENTKEY = nvl(PI_DOCUMENTKEY, T.DOCUMENTKEY)
         AND T.CODDIV = nvl(PI_CODDIV, T.coddiv)
         AND NVL(DTEMOD, DTECRE) >
             NVL(PI_MASSIVE_EXP_DATE, NVL(DTETOHOST, C_SM1_NULL_DATE))
         AND (T.NUMORD, T.CODUSR, T.CODDIV) IN
             (SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100CASHORDER_SYG_C Q
               WHERE Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE, Q.DTEMOD));
      VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VL_MESSAGE_H := 'Error while Locking: ' || VL_MESSAGE_D;
        RAISE EX_EXIT;
    END;

    -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
    
      VL_MESSAGE_H := 'Unable to Export ' || VL_MESSAGE_D || '.Numord=' ||
                      R_LOCKED.NUMORD || 'Codusr = ' || R_LOCKED.CODUSR ||
                      ' Record locked by user ' || R_LOCKED.CODUSRLCK ||
                      ' since ' ||
                      to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);
    
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    END LOOP;

    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
    
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF (MOD(VL_STEP, 1000) = 0) THEN
        PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
    
      --
      VL_STATUS    := 0;
      VL_MESSAGE_H := 'Order: ' || RL_T100.NUMORD || '/' || RL_T100.CODUSR;
      --
      BEGIN
      
        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table
        REC_XOUT_T100.NUMORD         := RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR         := RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR        := RL_T100.CODEUSR;
        REC_XOUT_T100.CODSALESMAN    := RL_T100.CODSALESMAN;
        REC_XOUT_T100.CODTYPORD      := RL_T100.CODTYPORD;
        REC_XOUT_T100.CODSTATUS      := RL_T100.CODSTATUS;
        REC_XOUT_T100.CODPAYMOD      := RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODDIV         := RL_T100.CODDIV;
        REC_XOUT_T100.DTEORD         := RL_T100.DTEORD;
        REC_XOUT_T100.DTEDELIV       := RL_T100.DTEDELIV;
        REC_XOUT_T100.CODCUSTDELIV   := RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODCUR         := RL_T100.CODCUR;
        REC_XOUT_T100.GROSSAMOUNT    := RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT      := RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT      := RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT      := RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT := RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT := RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT     := RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.CODWHS         := RL_T100.CODWHS;
        REC_XOUT_T100.TOTPALLETS     := RL_T100.TOTPALLETS;
        REC_XOUT_T100.RETURNAMOUNT   := RL_T100.RETURNAMOUNT;
        REC_XOUT_T100.CODCUSTINV     := RL_T100.CODCUSTINV;
        REC_XOUT_T100.NUMORDHOST     := '';
        REC_XOUT_T100.NUMORDCUST     := 'CS-' || TRIM(RL_T100.NUMORD) || TRIM(RL_T100.CODEUSR);
      
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;
        -- Field is mandatory in XOUT_T100ORDHEAD_LOG
        REC_XOUT_T100.MOVED          := 0;
      
        INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
      
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T100,
                                         SQLCODE,
                                         VL_MESSAGE_H);
      END;
    
      BEGIN
        -- ORDER ROWS T106
        --
        IF (VL_STATUS = 0) THEN
        
          VL_NUMROW := 0;
          FOR RL_T106 IN CL_T106(RL_T100.NUMORD,
                                 RL_T100.CODEUSR,
                                 RL_T100.CODDIV,
                                 RL_T100.DTEORD,
                                 RL_T100.DTEDELIV,
                                 RL_T100.CODCUR,
                                 RL_T100.CODPAYTRM,
                                 RL_T100.CODPAYMOD) LOOP
          
            VL_NUMROW := VL_NUMROW + 1;
          
            VL_MESSAGE_H := 'Ord Row ' || RL_T106.NUMORD || '/' ||
                            RL_T106.CODUSR || '/' || VL_NUMROW;
          
            VL_MESSAGE_D := 'Insert XOUT_T106ORDROW ';
            -- Here you can customize field elaboration
            -- the default is the xout has the same value of sm1 table
            -----------------------------------------------------------------------------
            REC_XOUT_T106.CODUSR         := RL_T106.CODUSR;
            REC_XOUT_T106.NUMORD         := RL_T106.NUMORD;
            REC_XOUT_T106.NUMROW         := VL_NUMROW; --RL_T106.NUMROW;
            REC_XOUT_T106.CODART         := RL_T106.CODART;
            REC_XOUT_T106.DESART         := RL_T106.PRODUCTDES;
            REC_XOUT_T106.CODDIV         := RL_T106.CODDIV;
            REC_XOUT_T106.UMORD          := RL_T106.UMORD;
            REC_XOUT_T106.QTYORD         := RL_T106.QTYORD;
            REC_XOUT_T106.UMINV          := RL_T106.UMINV;
            REC_XOUT_T106.QTYINV         := RL_T106.QTYINV;
            REC_XOUT_T106.CODTYPROW      := RL_T106.CODTYPROW;
            REC_XOUT_T106.CODSTATUS      := RL_T106.CODSTATUS;
            REC_XOUT_T106.GROSSAMOUNT    := RL_T106.GROSSAMOUNT;
            REC_XOUT_T106.NETAMOUNT      := RL_T106.NETAMOUNT;
            REC_XOUT_T106.DISCOUNTAMOUNT := RL_T106.DISCOUNTAMOUNT;
            REC_XOUT_T106.GIFTAMOUNT     := RL_T106.GIFTAMOUNT;
            REC_XOUT_T106.GROSSARTAMOUNT := RL_T106.GROSSARTAMOUNT;
            REC_XOUT_T106.NETARTAMOUNT   := RL_T106.NETARTAMOUNT;
            REC_XOUT_T106.CODBENCAUSE    := RL_T106.CODBENCAUSE;
            REC_XOUT_T106.CODBENSUBCAUSE := RL_T106.CODBENSUBCAUSE;
            -----------------------------------------------------------------------------
            REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
            REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;
          
            INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;
          
            VL_INS_T106          := VL_INS_T106 + 1;
            VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
          
          END LOOP;
        
          VL_COUNT_XOUT_T106   := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
          VL_COUNT_XOUT_T106_P := 0;
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T106,
                                         SQLCODE,
                                         VL_MESSAGE_H);
      END;
    
      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF (VL_STATUS = 0) THEN
      
        VL_INS_T100 := VL_INS_T100 + 1;
        UPDATE T100ORDHEAD
           SET DTETOHOST    = REC_XOUT_T100.SM1_DTEPROCESS,
               DTELCK       = NULL,
               IDSESSIONLCK = NULL,
               CODUSRLCK    = NULL
         WHERE IDSESSIONLCK IS NOT NULL
           AND IDSESSIONLCK = PI_SESSION_ID
           AND CODEUSR = RL_T100.CODEUSR
           AND CODDIV = RL_T100.CODDIV
           AND TRUNC(DTEORD) = RL_T100.DTEORD
           AND TRUNC(DTEDELIV) = RL_T100.DTEDELIV
           AND CODCUR = RL_T100.CODCUR
           AND CODPAYTRM = RL_T100.CODPAYTRM
           AND CODPAYMOD = RL_T100.CODPAYMOD
           AND CODTYPORD = RL_T100.CODTYPORD;
      
      ELSE
      
        UPDATE T100ORDHEAD
           SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
         WHERE NUMORD = REC_XOUT_T100.NUMORD
           AND CODUSR = REC_XOUT_T100.CODUSR;
      
      END IF;
    
    END LOOP;
    COMMIT;

    -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T106,
                             0,
                             VL_COUNT_XOUT_T106,
                             VL_INS_T106,
                             VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T100,
                             0,
                             VL_COUNT_XOUT_T100,
                             VL_INS_T100,
                             VL_COUNT_XOUT_T100 - VL_INS_T100);

    PO_MSG    := VL_INS_T100 || ' Orders Exported';
    PO_STATUS := VL_INS_T100;

  EXCEPTION
    WHEN EX_EXIT THEN
    
      ROLLBACK;
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := -1;
    
    WHEN OTHERS THEN
    
      ROLLBACK;
      UPDATE T100ORDHEAD
         SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
       WHERE CODUSRLCK = C_SYSUSR
         AND IDSESSIONLCK = PI_SESSION_ID;
      COMMIT;
    
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := VL_STATUS;
    
  END EXP_T10X_CASH_ORDERS_SYG;
  
  /*============================================================================*\
  /* Name: EXP_T10X_EMPANDPERISH_ORD_SYG (SUMMARISED)

     Exports SM1 tables:
      •  T100ORDHEAD - orders main table
      •  T106ORDROW  - order product detail

      Staging Area (SSA) tables
      •  XOUT_T100ORDHEAD
      •  XOUT_T106ORDROW

      Before exporting it :
      •  cleans old records from XOUT_LOG table
      •  moves all already read by ERP records from XOUT to XOUT_LOG and it writes into T852/T854 those read with error by ERP

      Export logic:
      •  exports all records not locked by SM1 User that have field T100ORDHEAD.DTETOHOST set to NULL or lower than last modified data (T100ORDHEAD.DTEMOD)
      •  NO FILTER IS APPLIED ON ORDER STATUS IT HAS TO BE CUSTOMIZED
      •  It locks all records that are going to be exported in order to disable Sm1 User to update the record while the export procedure is running.
      •  deletes records on XOUT table already present that havn't been already read by ERP
      •  Inserts records into XOUT table from SM1 table
      •  Commits each T100ORDHEAD.NUMORD/CODUSR block of information
      •  Set date T100ORDHEAD.DTETOHOST into SM1 header table

      Error handling:
      •  All Errors will be logged in T852/T854 SM1 log tables
      •  Error on record, header and all details are discarded

       Input parameters :     PI_PROGR_H          - unique sm1 job number ( T800SYSTEMACTIVITYLOG )
                              PI_SESSION_ID       - unique login session (T035LOGGEDUSERS)  Output parameters :  PO_MSG           - message of error if procedure exit with error
                              PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL'
                              PI_MASSIVE_EXP_DATE:  NULL - normal export
                                                    NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE
                              PI_CODE_CHAR_A : division
  ============================================================================ */
  PROCEDURE EXP_T10X_EMPANDPERISH_ORD_SYG(PI_PROGR_H          IN NUMBER,
                                          PI_SESSION_ID       IN NUMBER,
                                          PI_DOCUMENTKEY      IN VARCHAR2,
                                          PI_MASSIVE_EXP_DATE IN DATE,
                                          PI_CODDIV           IN VARCHAR2,
                                          PO_MSG              OUT VARCHAR,
                                          PO_STATUS           OUT NUMBER) IS
    --
    -- Cursor on main Order table
    --
    CURSOR CL_T100 IS
      Select Max(T.NUMORD) NUMORD,
             MAX(T.CODUSR) CODUSR, --LOGGED USER
             TA030.CODSALESMAN,
             T.CODEUSR CODEUSR, --SALESMN
             Max(T.CODTYPORD) CODTYPORD,
             T.CODDIV,
             TA030.DTEDAY DTEDAY, -- Vikas, only for orders b/w open day and close day
             MAX(T.CODPAYTRM) CODPAYTRM,
             MAX(T.CODPAYMOD) CODPAYMOD,
             MAX(T.CODSTATUS) CODSTATUS,
             MAX(UD.CODPARTY) CODCUSTDELIV, --T.CODCUSTDELIV,
             MAX(T.CODCUR) CODCUR,
             Sum(T.GROSSAMOUNT) GROSSAMOUNT,
             Sum(T.NETAMOUNT) NETAMOUNT,
             Sum(T.TAXAMOUNT) TAXAMOUNT,
             Sum(T.VATAMOUNT) VATAMOUNT,
             Sum(T.INCREASEAMOUNT) INCREASEAMOUNT,
             Sum(T.DISCOUNTAMOUNT) DISCOUNTAMOUNT,
             Sum(T.GIFTAMOUNT) GIFTAMOUNT,
             MAX(T.CODWHS) CODWHS,
             Sum(T.TOTPALLETS) TOTPALLETS,
             Sum(T.RETURNAMOUNT) RETURNAMOUNT,
             MAX(UD.CODPARTY) CODCUSTINV
        From T100ORDHEAD T
      
       Inner Join T031USERDIV UD
          On T.CODEUSR = UD.CODUSR
         And T.CODDIV = UD.CODDIV
      
       Inner Join TA0300SELLINGDAY TA030 -- Vikas, only for orders b/w open day and close day
          ON T.IDDAY = TA030.IDDAY
      
       WHERE T.IDSESSIONLCK IS NOT NULL
         AND T.IDSESSIONLCK = PI_SESSION_ID
         AND T.CODTYPORD IN ('70', '80') -- INVOICE AND DELIVERY ORDERS
         AND T.CODSTATUS IN ('11', '6') --INVOICED OR DELIVERED   
       Group By TA030.CODSALESMAN, T.CODEUSR, T.CODDIV, TA030.DTEDAY;
    --
    -- Rows
    --
    CURSOR CL_T106(CI_NUMORD    NUMBER,
                   CI_CODEUSR   VARCHAR2,
                   CI_CODDIV    VARCHAR2,
                   CI_DTEDAY    DATE,
                   CI_CODCUR    VARCHAR2,
                   CI_CODPAYTRM VARCHAR2,
                   CI_CODPAYMOD VARCHAR2) IS
      SELECT MAX(CODUSR) CODUSR,
             CI_NUMORD NUMORD,
             T.CODART,
             T060.DESART || '/' || T060.DESART2 PRODUCTDES,
             CI_CODDIV CODDIV,
             UMORD,
             SUM(QTYORD) QTYORD,
             UMINV,
             SUM(QTYINV) QTYINV,
             CODTYPROW,
             DTEDELIV,
             MAX(T.CODSTATUS) CODSTATUS,
             SUM(GROSSAMOUNT) GROSSAMOUNT,
             SUM(NETAMOUNT) NETAMOUNT,
             sum(DISCOUNTAMOUNT) DISCOUNTAMOUNT,
             SUM(GIFTAMOUNT) GIFTAMOUNT,
             MAX(GROSSARTAMOUNT) GROSSARTAMOUNT, -- UNIT PRICE 
             MAX(NETARTAMOUNT) NETARTAMOUNT, -- UNIT PRICE
             max(CODBENCAUSE) CODBENCAUSE,
             MAX(CODBENSUBCAUSE) CODBENSUBCAUSE
      
        FROM (SELECT NUMORD
                FROM T100ORDHEAD T100, TA0300SELLINGDAY TA030
               WHERE T100.IDDAY = TA030.IDDAY
                 AND T100.IDSESSIONLCK IS NOT NULL
                 AND T100.IDSESSIONLCK = PI_SESSION_ID
                 AND CODEUSR = CI_CODEUSR
                 AND T100.CODDIV = CI_CODDIV
                 AND TA030.DTEDAY = CI_DTEDAY) ORDHEAD
       INNER JOIN T106ORDROW T
          ON T.NUMORD = ORDHEAD.NUMORD
         AND CODTYPROW IN ('32', '33')
        
        JOIN T060ARTICLE T060
          ON T060.CODART = T.CODART
         AND T060.CODDIV = T.CODDIV
      
       GROUP BY T.CODART, T060.DESART || '/' || T060.DESART2, UMORD, UMINV, CODTYPROW, DTEDELIV;

    -- -----------------------------------------
    -- Cursor on main Order table T100ORDHEAD where records are locked by another user
    -- -----------------------------------------
    CURSOR CL_LOCKED_T100 IS
      SELECT NUMORD, CODUSR, DTELCK, CODUSRLCK
        FROM ZQEXP_T100EMPTYANDPERISH_SYG_C
       WHERE IDSESSIONLCK IS NOT NULL
         AND IDSESSIONLCK != PI_SESSION_ID
         and DOCUMENTKEY = nvl(PI_DOCUMENTKEY, DOCUMENTKEY)
         AND CODTYPORDCUST IS NULL
       ORDER BY NUMORD, CODUSR ASC;
    --
    VL_MESSAGE_H VARCHAR2(2000) := 'Error while exporting Perish And Empty ORDERS T10X';
    VL_MESSAGE_D VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D_T100    NUMBER := 0;
    VL_COUNT_XOUT_T100 NUMBER := 0;
    VL_INS_T100        NUMBER := 0;
    --
    VL_PROGR_D_T106      NUMBER := 0;
    VL_COUNT_XOUT_T106   NUMBER := 0;
    VL_COUNT_XOUT_T106_P NUMBER := 0;
    VL_INS_T106          NUMBER := 0;

    REC_XOUT_T100 XOUT_T100ORDHEAD%ROWTYPE := NULL;
    REC_XOUT_T106 XOUT_T106ORDROW%ROWTYPE := NULL;

    VL_STATUS        NUMBER := 0;
    VL_STEP          NUMBER := 0; -- Used to ping t035
    VL_NUMROW        NUMBER := 0; -- Used to CREATE UNIQUE NUMROW IN ORDER ROWS FOR COSLIDATION
    VL_XOUT_ROWCOUNT NUMBER := 0;

    num_total_rows NUMBER := 50;
    --
    EX_EXIT EXCEPTION;
    --
  BEGIN

    VL_PROGR_D_T100 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER HEAD',
                                                'EXPORT CASH ORDERS --> T100ORDHEAD',
                                                0,
                                                NULL);
    --
    VL_PROGR_D_T106 := PKG_UTILS.LOG_NEW_DETAIL(PI_PROGR_H,
                                                'ORDER ROWS',
                                                'EXPORT CASH ORDERS --> T106ORDROW',
                                                0,
                                                NULL);

    -- Clean old records in log table
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    P_XOUT_CLEANUP_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    --
    -- Moves records from staging area to log staging area
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T100,
                       'XOUT_T100ORDHEAD',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;
    P_XOUT_MOVE_TO_LOG(PI_PROGR_H,
                       VL_PROGR_D_T106,
                       'XOUT_T106ORDROW',
                       VL_STATUS);
    IF (VL_STATUS <> 0) THEN
      RAISE EX_EXIT;
    END IF;

    -- --------------------------------------------------------------
    -- Identifies  records to be Exported
    -- HERE YOU CAN CUSTOMIZE THE FILTER YOU NEED TO APPLY TO HEAD TABLE
    -- IN ORDER TO LOCK ONLY THE RECORDS THAT ARE REALLY TO BE EXPORTED

    -- --------------------------------------------------------------
    BEGIN
    
      VL_MESSAGE_D := 'T100ORDHEAD';
      UPDATE T100ORDHEAD T
         SET T.IDSESSIONLCK = PI_SESSION_ID,
             T.CODUSRLCK    = C_SYSUSR,
             T.DTELCK       = XSYSDATE
       WHERE t.DOCUMENTKEY = nvl(PI_DOCUMENTKEY, T.DOCUMENTKEY)
         AND T.CODDIV = nvl(PI_CODDIV, T.coddiv)
         AND (T.NUMORD, T.CODUSR, T.CODDIV) IN
             (SELECT Q.NUMORD, Q.CODUSR, Q.CODDIV
                FROM ZQEXP_T100EMPTYANDPERISH_SYG_C Q
               WHERE Q.DTEMOD >= NVL(PI_MASSIVE_EXP_DATE, Q.DTEMOD))
         AND (T.CODUSR, T.CODDIV, T.DTEORD) NOT IN
             (SELECT CODUSR, CODDIV, ORDER_DATE FROM Z_T100_UNEXPORTED);
      VL_COUNT_XOUT_T100 := SQL%ROWCOUNT;
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VL_MESSAGE_H := 'Error while Locking: ' || VL_MESSAGE_D;
        RAISE EX_EXIT;
    END;

    -- --------------------------------------------------------------
    -- loops locked records in main table T100ORDHEAD to log them
    -- --------------------------------------------------------------
    FOR R_LOCKED IN CL_LOCKED_T100 LOOP
    
      VL_MESSAGE_H := 'Unable to Export ' || VL_MESSAGE_D || '.Numord=' ||
                      R_LOCKED.NUMORD || 'Codusr = ' || R_LOCKED.CODUSR ||
                      ' Record locked by user ' || R_LOCKED.CODUSRLCK ||
                      ' since ' ||
                      to_char(R_LOCKED.DTELCK, C_SM1_FORMAT_DATE);
    
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    END LOOP;

    -- --------------------------------------------------------------
    -- loop in main table T100ORDHEAD
    -- --------------------------------------------------------------
    FOR RL_T100 IN CL_T100 LOOP
    
      -- pings to t035 every 1000 cicles--
      VL_STEP := VL_STEP + 1;
      IF (MOD(VL_STEP, 1000) = 0) THEN
        PKG_UTILS.user_ping(PI_SESSION_ID);
      END IF;
    
      --
      VL_STATUS    := 0;
      VL_MESSAGE_H := 'Order: ' || RL_T100.NUMORD || '/' || RL_T100.CODUSR;
      --
      BEGIN
      
        VL_XOUT_ROWCOUNT := 0;
        SELECT COUNT(*)
          INTO VL_XOUT_ROWCOUNT
          FROM T100ORDHEAD
         WHERE NUMORD = RL_T100.NUMORD
           AND CODUSR = RL_T100.CODUSR;
      
        VL_MESSAGE_D := 'Insert XOUT_T100ORDHEAD ';
        -- Here you can customize field elaboration
        -- the default is the xout has the same value of sm1 table
        REC_XOUT_T100.NUMORD          := RL_T100.NUMORD;
        REC_XOUT_T100.CODUSR          := RL_T100.CODUSR;
        REC_XOUT_T100.CODEUSR         := RL_T100.CODEUSR;
        REC_XOUT_T100.CODSALESMAN     := RL_T100.CODSALESMAN;
        REC_XOUT_T100.CODTYPORD       := RL_T100.CODTYPORD;
        REC_XOUT_T100.CODPAYMOD       := RL_T100.CODPAYMOD;
        REC_XOUT_T100.CODDIV          := RL_T100.CODDIV;
        REC_XOUT_T100.DTEORD          := RL_T100.DTEDAY;
        REC_XOUT_T100.DTEDELIV        := RL_T100.DTEDAY;
        REC_XOUT_T100.CODCUSTDELIV    := RL_T100.CODCUSTDELIV;
        REC_XOUT_T100.CODCUR          := RL_T100.CODCUR;
        REC_XOUT_T100.GROSSAMOUNT     := RL_T100.GROSSAMOUNT;
        REC_XOUT_T100.NETAMOUNT       := RL_T100.NETAMOUNT;
        REC_XOUT_T100.TAXAMOUNT       := RL_T100.TAXAMOUNT;
        REC_XOUT_T100.VATAMOUNT       := RL_T100.VATAMOUNT;
        REC_XOUT_T100.INCREASEAMOUNT  := RL_T100.INCREASEAMOUNT;
        REC_XOUT_T100.DISCOUNTAMOUNT  := RL_T100.DISCOUNTAMOUNT;
        REC_XOUT_T100.GIFTAMOUNT      := RL_T100.GIFTAMOUNT;
        REC_XOUT_T100.CODWHS          := RL_T100.CODWHS;
        REC_XOUT_T100.TOTPALLETS      := RL_T100.TOTPALLETS;
        REC_XOUT_T100.RETURNAMOUNT    := RL_T100.RETURNAMOUNT;
        REC_XOUT_T100.CODCUSTINV      := RL_T100.CODCUSTINV;
        REC_XOUT_T100.CODSTATUS       := RL_T100.CODSTATUS;
        REC_XOUT_T100.Z_DTE_SELINGDAY := RL_T100.DTEDAY;
      
        REC_XOUT_T100.NUMORDHOST := '';
        REC_XOUT_T100.NUMORDCUST := 'CS-' || TRIM(RL_T100.NUMORD) ||
                                    TRIM(RL_T100.CODEUSR);
      
        REC_XOUT_T100.SM1_DTEPROCESS := XSYSDATE;
        REC_XOUT_T100.SM1_CODPROCESS := PI_PROGR_H;
        -- Field is mandatory in XOUT_T100ORDHEAD_LOG
        REC_XOUT_T100.MOVED          := 0;
      
        IF (VL_XOUT_ROWCOUNT = 0) THEN
          INSERT INTO XOUT_T100ORDHEAD VALUES REC_XOUT_T100;
        END IF;
      
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T100,
                                         SQLCODE,
                                         VL_MESSAGE_H);
      END;
    
      BEGIN
      
        IF (VL_STATUS = 0) THEN
        
          -- Unit Measure data
          VL_NUMROW := 0;
          FOR RL_T106 IN CL_T106(RL_T100.NUMORD,
                                 RL_T100.CODEUSR,
                                 RL_T100.CODDIV,
                                 RL_T100.DTEDAY,
                                 RL_T100.CODCUR,
                                 RL_T100.CODPAYTRM,
                                 RL_T100.CODPAYMOD) LOOP
          
            VL_NUMROW := VL_NUMROW + 1;
          
            VL_MESSAGE_H := 'Ord Row ' || RL_T106.NUMORD || '/' ||
                            RL_T106.CODUSR || '/' || VL_NUMROW;
          
            VL_MESSAGE_D := 'Insert  XOUT_T106ORDROW ';
            -- Here you can customize field elaboration
            -- the default is the xout has the same value of sm1 table
            -----------------------------------------------------------------------------
            REC_XOUT_T106.CODUSR         := RL_T106.CODUSR;
            REC_XOUT_T106.NUMORD         := RL_T106.NUMORD;
            REC_XOUT_T106.NUMROW         := VL_NUMROW; --RL_T106.NUMROW;
            REC_XOUT_T106.CODART         := RL_T106.CODART;
            REC_XOUT_T106.DESART         := RL_T106.PRODUCTDES;
            REC_XOUT_T106.CODDIV         := RL_T106.CODDIV;
            REC_XOUT_T106.UMORD          := RL_T106.UMORD;
            REC_XOUT_T106.QTYORD         := RL_T106.QTYORD;
            REC_XOUT_T106.UMINV          := RL_T106.UMINV;
            REC_XOUT_T106.QTYINV         := RL_T106.QTYINV;
            REC_XOUT_T106.CODTYPROW      := RL_T106.CODTYPROW;
            REC_XOUT_T106.DTEDELIV       := RL_T106.DTEDELIV;
            REC_XOUT_T106.CODSTATUS      := RL_T106.CODSTATUS;
            REC_XOUT_T106.GROSSAMOUNT    := RL_T106.GROSSAMOUNT;
            REC_XOUT_T106.NETAMOUNT      := RL_T106.NETAMOUNT;
            REC_XOUT_T106.DISCOUNTAMOUNT := RL_T106.DISCOUNTAMOUNT;
            REC_XOUT_T106.GIFTAMOUNT     := RL_T106.GIFTAMOUNT;
            REC_XOUT_T106.GROSSARTAMOUNT := RL_T106.GROSSARTAMOUNT;
            REC_XOUT_T106.NETARTAMOUNT   := RL_T106.NETARTAMOUNT;
            REC_XOUT_T106.CODBENCAUSE    := RL_T106.CODBENCAUSE;
            REC_XOUT_T106.CODBENSUBCAUSE := RL_T106.CODBENSUBCAUSE;
          
            -----------------------------------------------------------------------------
            REC_XOUT_T106.SM1_DTEPROCESS := REC_XOUT_T100.SM1_DTEPROCESS;
            REC_XOUT_T106.SM1_CODPROCESS := REC_XOUT_T100.SM1_CODPROCESS;
          
            INSERT INTO XOUT_T106ORDROW VALUES REC_XOUT_T106;
          
            VL_INS_T106          := VL_INS_T106 + 1;
            VL_COUNT_XOUT_T106_P := CL_T106%ROWCOUNT;
          
          END LOOP;
        
          VL_COUNT_XOUT_T106   := VL_COUNT_XOUT_T106 + VL_COUNT_XOUT_T106_P;
          VL_COUNT_XOUT_T106_P := 0;
        
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          VL_STATUS    := -1;
          VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || ' ' || VL_MESSAGE_D || ' ' ||
                                 SQLERRM,
                                 1,
                                 2000);
        
          PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                         VL_PROGR_D_T106,
                                         SQLCODE,
                                         VL_MESSAGE_H);
        
      END;
    
      -- if all records have been stored with success then it makes the commit
      -- set DTETOHOST
      IF VL_STATUS = 0 THEN
      
        VL_INS_T100 := VL_INS_T100 + 1;
        UPDATE T100ORDHEAD
           SET Z_DTETOHOST_1 = REC_XOUT_T100.SM1_DTEPROCESS,
               DTELCK        = NULL,
               IDSESSIONLCK  = NULL,
               CODUSRLCK     = NULL
         WHERE NUMORD IN (SELECT NUMORD
                            FROM T100ORDHEAD T100, TA0300SELLINGDAY TA030
                           WHERE T100.IDDAY = TA030.IDDAY
                             AND T100.IDSESSIONLCK IS NOT NULL
                             AND T100.IDSESSIONLCK = PI_SESSION_ID
                             AND T100.CODEUSR = RL_T100.CODEUSR
                             AND T100.CODDIV = RL_T100.CODDIV
                             AND TA030.DTEDAY = RL_T100.DTEDAY);
      
      ELSE
      
        UPDATE T100ORDHEAD
           SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
         WHERE IDSESSIONLCK IS NOT NULL
           AND IDSESSIONLCK = PI_SESSION_ID
           AND CODEUSR = REC_XOUT_T100.CODEUSR
           AND CODDIV = REC_XOUT_T100.CODDIV
           AND TRUNC(DTEORD) = REC_XOUT_T100.DTEORD;
      
      END IF;
    
    END LOOP;
    COMMIT;

    -- Close Logs
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T106,
                             0,
                             VL_COUNT_XOUT_T106,
                             VL_INS_T106,
                             VL_COUNT_XOUT_T106 - VL_INS_T106);
    --
    PKG_UTILS.LOG_END_DETAIL(PI_PROGR_H,
                             VL_PROGR_D_T100,
                             0,
                             VL_COUNT_XOUT_T100,
                             VL_INS_T100,
                             VL_COUNT_XOUT_T100 - VL_INS_T100);

    PO_MSG    := VL_INS_T100 || ' Orders Exported';
    PO_STATUS := VL_INS_T100;

  EXCEPTION
    WHEN EX_EXIT THEN
    
      ROLLBACK;
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := -1;
    
    WHEN OTHERS THEN
    
      ROLLBACK;
      UPDATE T100ORDHEAD
         SET DTELCK = NULL, IDSESSIONLCK = NULL, CODUSRLCK = NULL
       WHERE CODUSRLCK = C_SYSUSR
         AND IDSESSIONLCK = PI_SESSION_ID;
      COMMIT;
    
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H || SQLERRM, 1, 2000);
      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PI_PROGR_H,
                                     VL_PROGR_D_T100,
                                     SQLCODE,
                                     VL_MESSAGE_H);
    
      PO_MSG    := VL_MESSAGE_H;
      PO_STATUS := VL_STATUS;
    
  END EXP_T10X_EMPANDPERISH_ORD_SYG;


  /*============================================================================*/
  /*        Main procedure for exporting data                                   */

  /*     PI_OPERATION:         Flow code - ALL to export all flows
         PI_DOCUMENTKEY:       Explicit a document key to export- used only if PI_OPERATION <> 'ALL', without any check on DTETOHOST
         PI_MASSIVE_EXP_DATE:  NULL - normal export (DTEMOD>DTETOHOST or DTETOHOST is null)
                               NOT NULL -  -- MASSIVE EXPORT - DTEMOD > PI_MASSIVE_EXP_DATE without any check on DTETOHOST


   -- 2014 03 10; 012: Mbandiera; tfs 29729; main; added Massive export and one documentkey export modalities

  */
  /*============================================================================*/
  PROCEDURE MAIN(  PI_OPERATION        IN VARCHAR2,
                   PI_DOCUMENTKEY      IN VARCHAR2,
                   PI_MASSIVE_EXP_DATE IN DATE,
                   --
                   PO_CODPROCESS    OUT NUMBER,
                   PO_MSG           OUT VARCHAR2,
                   PO_STATUS        OUT NUMBER,
                   PI_CODE_CHAR_A   IN VARCHAR2 DEFAULT NULL,
                   PI_CODE_CHAR_B   IN VARCHAR2 DEFAULT NULL,
                   PI_CODE_NUM_A    IN NUMBER DEFAULT NULL,
                   PI_CODE_NUM_B    IN NUMBER DEFAULT NULL,
                   PI_DATE_A        IN DATE DEFAULT NULL,
                   PI_DATE_B        IN DATE DEFAULT NULL) IS
    --

    VL_MESSAGE_H   VARCHAR2(2000) := 'Error while exporting PKG_XTEL_EXPORTORT.MAIN';
    VL_MESSAGE_D   VARCHAR2(2000) := NULL;
    --
    VL_PROGR_D NUMBER := NULL;
    VL_OPERATION      VARCHAR2(30) := TRIM(UPPER(PI_OPERATION));

    -- Allowed only if it is a flow export
    VL_DOCUMENTKEY    VARCHAR2(30) := CASE WHEN PI_OPERATION <> 'ALL' THEN TRIM(PI_DOCUMENTKEY) ELSE NULL END;
    VL_MASS_EXP_DATE  DATE:=PI_MASSIVE_EXP_DATE;
    --
    VL_SESSION_ID NUMBER := 0;
    --
    EX_EXIT EXCEPTION;
    --
  BEGIN

    -- set format for Numbers:
    -- DECIMAL SEPARATOR . (point)
    -- GROUPING SEPARATON (null)
    EXECUTE IMMEDIATE (' alter session set NLS_NUMERIC_CHARACTERS =  ''. ''');

    -- F_CHECK if the parameter is missing
    IF VL_OPERATION IS NULL THEN
      VL_MESSAGE_D   := 'Parameter "Operation" Missing';
      RAISE EX_EXIT;
    END IF;


    --LOGIN
    -- Second parameter = 0  because the package must not start again when is already running with same operation
    -- you can run more then one extraction at the same time, but you cannot run extraction of orders if there is another order extraction job running (eg. custoemers)
    VL_SESSION_ID := PKG_UTILS.USER_LOGIN(C_SYSUSR,0,'PKG_XTEL_EXPORT-'||VL_OPERATION,NULL);

    IF VL_SESSION_ID IS NULL THEN
         VL_MESSAGE_D   :=  'Export Procedure Cannot Run. Export of '||VL_OPERATION||' with user SYSH is already running - see T035LOGGEDUSER';  
         RAISE EX_EXIT;
         else 
    dbms_output.put_line('came to export page after insering into t035 and idssession = ' || VL_SESSION_ID); 
    END IF;


      -- Export decode tables T900 - T902
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'DECODE_TAB' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'QTABS_TABLE',
                                         NULL,
                                         NULL,
                                         'PKG_XTEL_EXPORT');

      PKG_XTEL_EXPORT_C.EXP_T90X_DECODES(PO_CODPROCESS,VL_SESSION_ID, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

     IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'DEPOSITS' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'DEPOSITS',
                                         NULL,
                                         NULL,
                                         'PKG_XTEL_EXPORT');

      PKG_XTEL_EXPORT_C.EXP_T09X_DEPOSITS(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

    -- Export Users T030 - T031
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'USERS' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                         'USERS T03X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      PKG_XTEL_EXPORT_C.EXP_T03X_USERS(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    --
    --
    -- Export Customers T040 - T041 - T042 - T045 - T046 - T047 - T049
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'CUSTOMERS' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'CUSTOMERS T04X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      PKG_XTEL_EXPORT_C.EXP_T04X_CUSTOMERS(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

    --
    -- Export Articles T060 - T062
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'PRODUCTS' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('l',
                                              'PRODUCTS T06X',
                                               NULL,
                                               NULL,
                                              'PKG_XTEL_EXPORT');

      PKG_XTEL_EXPORT_C.EXP_T06X_PRODUCTS(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PO_MSG, PO_STATUS);

      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
          --
 -- Export Orders T100/T106/T101
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'ORDERS' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_ORDERS(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    
    -- Export Orders T100/T106
    
     IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'ORDERSKD' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'ORDERS T10X KD',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_ORDERS_KD(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    
    
       IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VAN_LOADIN' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_VAN_LOADIN(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    
    
    
     -- EXP_SETTLEMENTCASH
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'SETCASH' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXP_SETTLEMENTCASH',
                                        'CASH EXP_SETTLEMENTCASH',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_SETTLEMENTCASH(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    
    
    
    -- Export Orders T100/T106/T101
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'ORDERS61' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_ORDERS_61(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VANUNLOAD' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_VANUNLOAD(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'CREDITORDERS' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'CREDIT ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_CREDIT_ORDERS(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'CONSORDERS' THEN  --CONSIGNMENT
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'CONS ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_CONS_ORDERS(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'CASHORDERS' THEN  --CASH ORDERS HAS TO AGREGATE
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'CASH ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_CASH_ORDERS(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
     -- Export Orders T100/T106/T101
     
      IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'EMPANDPERISH' THEN  --EMPTIES AND PERSH ORDERS HAS TO AGREGATE
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'CASH ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_EMPANDPERISH_ORDERS(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
   
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VANLOADR_50' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'VANLOADR T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_VANREQUEST_50(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    
        IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VANLOADR_51' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'VANLOADR T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_VANREQUEST_51(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;


      IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VANLOADR_50' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'VANLOADR_50 ',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_VANREQUEST_DDF_50(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;


        IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VANLOADR_51' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'VANLOADR_51 ',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_VANREQUEST_DDF_51(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    
      IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VANLOADR_DFI_50' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'VANLOADR_DFI_50',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT_C.EXP_T10X_VANREQUEST_DFI_50');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_VANREQUEST_DFI_50(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
	
	
	
	      IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VANLOADR_DFI_51' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'VANLOADR_DFI_51 ',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT_C.EXP_T10X_VANREQUEST_DFI_51');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_VANREQUEST_DFI_51(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
        
    


      IF VL_OPERATION = 'ALL' OR VL_OPERATION = '80DELIVERY' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        '80 DELIVERY ORDERS',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_ORDERS_80(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
  
  
 IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'FINACEORDERS' THEN  --CONSIGNMENT
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'CONS FINANCE ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_FINANCISSUE_ORDER(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

     --
    -- Export Survey Type TA0191/TA0192 INTO XOUT_<SURVEYTYPE>
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'SURVEY_TYPE' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'SURVEY TYPE',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');

      -- In PI_CODE_CHAR_A  there is the Survey type, if 'ALL' it exports all types
      --
      PKG_XTEL_EXPORT_C.EXP_TA019X_SURVEYTYPE(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS );
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

      --
    -- Export Survey TA0191/TA0192 INTO XOUT_TA0191 AND XOUT_TA0192
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'SURVEY' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'SURVEY',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');

      -- In PI_CODE_CHAR_A  there is the Survey type, if 'ALL' it exports all types
      --
      PKG_XTEL_EXPORT_C.EXP_TA019X_SURVEY(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS );
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

      -- Export QUESTIONNAIR
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'QUESTIONNAIR' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'QUESTIONNAIR',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');

      PKG_XTEL_EXPORT_C.EXP_QUESTIONNAIR(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PO_MSG, PO_STATUS );
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;

     -- Export Panels
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'PANELS' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'PANELS',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');


      PKG_XTEL_EXPORT_C.EXP_TA022X_PANELS(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PO_MSG, PO_STATUS );
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;


     -- Export Panels
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'PROMO' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'PROMO',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');


      PKG_XTEL_EXPORT_C.EXP_TA50X_PROMO(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PO_MSG, PO_STATUS );
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    
    
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VANLOAD_REQUEST_SYG_50' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                           'VANLOAD_REQUEST_SYG_50',
                                           NULL,
                                           NULL,
                                           'PKG_XTEL_EXPORT');
      --
      EXP_T10X_VANREQUEST_SYG_50(PO_CODPROCESS, VL_SESSION_ID, VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VANLOAD_REQUEST_SYG_51' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                           'VANLOAD_REQUEST_SYG_51',
                                           NULL,
                                           NULL,
                                           'PKG_XTEL_EXPORT');
      --
      EXP_T10X_VANREQUEST_SYG_51(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'VANUNLOAD_SYG_60' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                           'VANUNLOAD_SYG_60',
                                           NULL,
                                           NULL,
                                           'PKG_XTEL_EXPORT');
      --
      PKG_XTEL_EXPORT_C.EXP_T10X_VANUNLOAD_SYG_60(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF; 
       
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'ORDERSKD_SYG' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'ORDERSKD_SYG',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      -- PI_CODE_CHAR_A is the division
      PKG_XTEL_EXPORT_C.EXP_T10X_ORDERS_KD_SYG(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

    END IF;
    
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'ORDERS_SYG' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                           'ORDERS_SYG',
                                            NULL,
                                            NULL,
                                            'PKG_XTEL_EXPORT');
      --
      PKG_XTEL_EXPORT_C.EXP_T10X_ORDERS_SYG(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);
    END IF;
    
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'ORDERS_SYG_80' THEN
      -- Open the log on T800SYSTEMACTIVITYLOG
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                           'ORDERS_SYG_80',
                                            NULL,
                                            NULL,
                                            'PKG_XTEL_EXPORT');
      --
      PKG_XTEL_EXPORT_C.EXP_T10X_ORDERS_SYG_80(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);
    END IF;
    
    IF VL_OPERATION = 'ALL' OR VL_OPERATION = 'INVOICES_SYG' THEN
      -- START : Export credit orders
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'CREDIT ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      PKG_XTEL_EXPORT_C.EXP_T10X_CREDIT_ORDERS_SYG(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);
      -- END : Export credit orders
      -- START : Export cash orders
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'CASH ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      PKG_XTEL_EXPORT_C.EXP_T10X_CASH_ORDERS_SYG(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);
      -- END : Export cash orders
      -- START : Export empandperish orders
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'EMPANDPERISH ORDERS T10X',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      PKG_XTEL_EXPORT_C.EXP_T10X_EMPANDPERISH_ORD_SYG(PO_CODPROCESS,VL_SESSION_ID,VL_DOCUMENTKEY, VL_MASS_EXP_DATE, PI_CODE_CHAR_A, PO_MSG, PO_STATUS);
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);
      -- END : Export empandperish orders
    END IF;
    
    --
    --LOGOUT USER
    PKG_UTILS.USER_LOGOUT(VL_SESSION_ID);
  EXCEPTION
   WHEN EX_EXIT THEN

     ROLLBACK;

      -- Manage errors in Export operation
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'LOG',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      VL_PROGR_D := PKG_UTILS.LOG_NEW_DETAIL(PO_CODPROCESS,
                                                              'LOG',
                                                              'MAIN ERROR ',
                                                              0,
                                                              NULL);
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PO_CODPROCESS,
                                              VL_PROGR_D,
                                              SQLCODE,
                                              VL_MESSAGE_H);

      --
      PKG_UTILS.LOG_END_DETAIL(PO_CODPROCESS,
                                        VL_PROGR_D,
                                        0,
                                        1,
                                        1,
                                        0);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);

      PO_MSG := VL_MESSAGE_H;
      PO_STATUS := -1;

    WHEN OTHERS THEN

     ROLLBACK;
      --LOGOUT USER
      PKG_UTILS.USER_LOGOUT(VL_SESSION_ID);

      -- Manage errors in Export  operation
      PO_CODPROCESS := PKG_UTILS.LOG_START('EXPORT',
                                        'LOG',
                                         NULL,
                                         NULL,
                                        'PKG_XTEL_EXPORT');
      --
      VL_PROGR_D := PKG_UTILS.LOG_NEW_DETAIL(PO_CODPROCESS,
                                              'LOG',
                                              'MAIN ERROR ',
                                              0,
                                              NULL);
      VL_MESSAGE_H := SUBSTR(VL_MESSAGE_H||' '||VL_MESSAGE_D||' '||SQLERRM,1,2000);

      PKG_UTILS.LOG_NEW_DETAIL_ERROR(PO_CODPROCESS,
                                              VL_PROGR_D,
                                              SQLCODE,
                                              VL_MESSAGE_H);
      --
      PKG_UTILS.LOG_END_DETAIL(PO_CODPROCESS,
                                        VL_PROGR_D,
                                        0,
                                        1,
                                        1,
                                        0);
      --
      PKG_UTILS.LOG_END(PO_CODPROCESS, 0);
      PO_MSG := VL_MESSAGE_H;
      PO_STATUS := -1;
      --
  END MAIN;
END PKG_XTEL_EXPORT_C;